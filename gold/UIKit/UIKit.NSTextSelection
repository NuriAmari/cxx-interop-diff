@_exported import Foundation

@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSTextSelection.Granularity")
typealias NSTextSelectionGranularity = NSTextSelection.Granularity
extension NSTextSelection {
  @available(iOS 15.0, *)
  enum Granularity : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case character
    @available(swift, obsoleted: 3, renamed: "character")
    static var Character: NSTextSelection.Granularity { get }
    case word
    @available(swift, obsoleted: 3, renamed: "word")
    static var Word: NSTextSelection.Granularity { get }
    case paragraph
    @available(swift, obsoleted: 3, renamed: "paragraph")
    static var Paragraph: NSTextSelection.Granularity { get }
    case line
    @available(swift, obsoleted: 3, renamed: "line")
    static var Line: NSTextSelection.Granularity { get }
    case sentence
    @available(swift, obsoleted: 3, renamed: "sentence")
    static var Sentence: NSTextSelection.Granularity { get }
  }
  @available(iOS 15.0, *)
  enum Affinity : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case upstream
    @available(swift, obsoleted: 3, renamed: "upstream")
    static var Upstream: NSTextSelection.Affinity { get }
    case downstream
    @available(swift, obsoleted: 3, renamed: "downstream")
    static var Downstream: NSTextSelection.Affinity { get }
  }
}
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSTextSelection.Affinity")
typealias NSTextSelectionAffinity = NSTextSelection.Affinity
@available(iOS 15.0, *)
class NSTextSelection : NSObject, NSSecureCoding {
  init(_ textRanges: [NSTextRange], affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)
  @available(swift, obsoleted: 3, renamed: "init(_:affinity:granularity:)")
  init(ranges textRanges: [NSTextRange], affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)
  init?(coder: NSCoder)
  convenience init(range: NSTextRange, affinity: NSTextSelection.Affinity, granularity: NSTextSelection.Granularity)
  convenience init(_ location: NSTextLocation, affinity: NSTextSelection.Affinity)
  @available(swift, obsoleted: 3, renamed: "init(_:affinity:)")
  convenience init(location: NSTextLocation, affinity: NSTextSelection.Affinity)
  @available(*, unavailable)
  convenience init()
  var textRanges: [NSTextRange] { get }
  var granularity: NSTextSelection.Granularity { get }
  var affinity: NSTextSelection.Affinity { get }
  var isTransient: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isTransient")
  var transient: Bool { get }
  var anchorPositionOffset: CGFloat
  var isLogical: Bool
  @available(swift, obsoleted: 3, renamed: "isLogical")
  var logical: Bool
  var secondarySelectionLocation: NSTextLocation?
  var typingAttributes: [NSAttributedString.Key : Any]
  func textSelection(_ textRanges: [NSTextRange]) -> NSTextSelection
  @available(swift, obsoleted: 3, renamed: "textSelection(_:)")
  func textSelectionWithTextRanges(_ textRanges: [NSTextRange]) -> NSTextSelection
  @available(iOS 15.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 15.0, *)
  func encode(with coder: NSCoder)
}
