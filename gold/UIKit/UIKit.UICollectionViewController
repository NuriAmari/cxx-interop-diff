@_exported import Foundation

@available(iOS 6.0, *)
@MainActor @_nonSendable(_assumed) class UICollectionViewController : UIViewController, UICollectionViewDelegate, UICollectionViewDataSource {
  init(collectionViewLayout layout: UICollectionViewLayout)
  init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  init?(coder: NSCoder)
  var collectionView: UICollectionView!
  var clearsSelectionOnViewWillAppear: Bool
  @available(iOS 7.0, *)
  var useLayoutToLayoutNavigationTransitions: Bool
  @available(iOS 7.0, *)
  var collectionViewLayout: UICollectionViewLayout { get }
  @available(iOS 9.0, *)
  var installsStandardGestureForInteractiveMovement: Bool
  convenience init()
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, shouldHighlightItemAt indexPath: IndexPath) -> Bool
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, didHighlightItemAt indexPath: IndexPath)
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, didUnhighlightItemAt indexPath: IndexPath)
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, shouldSelectItemAt indexPath: IndexPath) -> Bool
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, shouldDeselectItemAt indexPath: IndexPath) -> Bool
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath)
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath)

  /**
   * @abstract Called to determine if a primary action can be performed for the item at the given indexPath.
   * See @c collectionView:performPrimaryActionForItemAtIndexPath: for more details about primary actions.
   *
   * @param collectionView This UICollectionView
   * @param indexPath NSIndexPath of the item
   *
   * @return `YES` if the primary action can be performed; otherwise `NO`. If not implemented, defaults to `YES` when not editing
   * and `NO` when editing.
   */
  @available(iOS 16.0, *)
  func collectionView(_ collectionView: UICollectionView, canPerformPrimaryActionForItemAt indexPath: IndexPath) -> Bool

  /**
   * @abstract Called when the primary action should be performed for the item at the given indexPath.
   *
   * @discussion Primary actions allow you to distinguish between a change of selection (which can be based on focus changes or
   * other indirect selection changes) and distinct user actions. Primary actions are performed when the user selects a cell without extending
   * an existing selection. This is called after @c shouldSelectItem and @c didSelectItem , regardless of whether the cell's selection
   * state was allowed to change.
   *
   * As an example, use @c didSelectItemAtIndexPath for updating state in the current view controller (i.e. buttons, title, etc) and
   * use the primary action for navigation or showing another split view column.
   *
   * @param collectionView This UICollectionView
   * @param indexPath NSIndexPath of the item to perform the action on
   */
  @available(iOS 16.0, *)
  func collectionView(_ collectionView: UICollectionView, performPrimaryActionForItemAt indexPath: IndexPath)
  @available(iOS 8.0, *)
  func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath)
  @available(iOS 8.0, *)
  func collectionView(_ collectionView: UICollectionView, willDisplaySupplementaryView view: UICollectionReusableView, forElementKind elementKind: String, at indexPath: IndexPath)
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath)
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, didEndDisplayingSupplementaryView view: UICollectionReusableView, forElementOfKind elementKind: String, at indexPath: IndexPath)
  @available(iOS, introduced: 6.0, deprecated: 13.0)
  func collectionView(_ collectionView: UICollectionView, shouldShowMenuForItemAt indexPath: IndexPath) -> Bool
  @available(iOS, introduced: 6.0, deprecated: 13.0)
  func collectionView(_ collectionView: UICollectionView, canPerformAction action: Selector, forItemAt indexPath: IndexPath, withSender sender: Any?) -> Bool
  @available(iOS, introduced: 6.0, deprecated: 13.0)
  func collectionView(_ collectionView: UICollectionView, performAction action: Selector, forItemAt indexPath: IndexPath, withSender sender: Any?)
  @available(iOS 7.0, *)
  func collectionView(_ collectionView: UICollectionView, transitionLayoutForOldLayout fromLayout: UICollectionViewLayout, newLayout toLayout: UICollectionViewLayout) -> UICollectionViewTransitionLayout
  @available(iOS 9.0, *)
  func collectionView(_ collectionView: UICollectionView, canFocusItemAt indexPath: IndexPath) -> Bool
  @available(iOS 9.0, *)
  func collectionView(_ collectionView: UICollectionView, shouldUpdateFocusIn context: UICollectionViewFocusUpdateContext) -> Bool
  @available(iOS 9.0, *)
  func collectionView(_ collectionView: UICollectionView, didUpdateFocusIn context: UICollectionViewFocusUpdateContext, with coordinator: UIFocusAnimationCoordinator)
  @available(iOS 9.0, *)
  func indexPathForPreferredFocusedView(in collectionView: UICollectionView) -> IndexPath?

  /// Determines if the item at the specified index path should also become selected when focus moves to it.
  /// If the collection view's global selectionFollowsFocus is enabled, this method will allow you to override that behavior on a per-index path basis. This method is not called if selectionFollowsFocus is disabled.
  @available(iOS 15.0, *)
  func collectionView(_ collectionView: UICollectionView, selectionFollowsFocusForItemAt indexPath: IndexPath) -> Bool
  @available(iOS 15.0, *)
  func collectionView(_ collectionView: UICollectionView, targetIndexPathForMoveOfItemFromOriginalIndexPath originalIndexPath: IndexPath, atCurrentIndexPath currentIndexPath: IndexPath, toProposedIndexPath proposedIndexPath: IndexPath) -> IndexPath
  @available(iOS, introduced: 9.0, deprecated: 15.0)
  func collectionView(_ collectionView: UICollectionView, targetIndexPathForMoveFromItemAt currentIndexPath: IndexPath, toProposedIndexPath proposedIndexPath: IndexPath) -> IndexPath
  @available(iOS 9.0, *)
  func collectionView(_ collectionView: UICollectionView, targetContentOffsetForProposedContentOffset proposedContentOffset: CGPoint) -> CGPoint
  @available(iOS 14.0, *)
  func collectionView(_ collectionView: UICollectionView, canEditItemAt indexPath: IndexPath) -> Bool
  @available(iOS 11.0, *)
  func collectionView(_ collectionView: UICollectionView, shouldSpringLoadItemAt indexPath: IndexPath, with context: UISpringLoadedInteractionContext) -> Bool
  @available(iOS 13.0, *)
  func collectionView(_ collectionView: UICollectionView, shouldBeginMultipleSelectionInteractionAt indexPath: IndexPath) -> Bool
  @available(iOS 13.0, *)
  func collectionView(_ collectionView: UICollectionView, didBeginMultipleSelectionInteractionAt indexPath: IndexPath)
  @available(iOS 13.0, *)
  func collectionViewDidEndMultipleSelectionInteraction(_ collectionView: UICollectionView)

  /**
   * @abstract Called when a context menu is invoked from this collection view.
   *
   * @param collectionView  The @c UICollectionView.
   * @param indexPaths      An array of index paths on which the menu acts.
   * @param point           Touch location in the collection view's coordinate space.
   *
   * @return A @c UIContextMenuConfiguration describing the menu to be presented. Return nil to prevent the interaction from beginning.
   *         Returning an empty configuration causes the interaction to begin then fail with a cancellation effect. You might use this
   *         to indicate to users that it's possible for a menu to be presented from this element, but that there are no actions to
   *         present at this particular time.
   *
   * @discussion  The @c indexPaths array may contain 0-many items:
   *              - An empty array indicates that the menu was invoked in the space between cells (or any location that does not map to an item index path).
   *              - An array with multiple index paths indicates that the menu was invoked on an item within a multiple selection.
   */
  @available(iOS 16.0, *)
  func collectionView(_ collectionView: UICollectionView, contextMenuConfigurationForItemsAt indexPaths: [IndexPath], point: CGPoint) -> UIContextMenuConfiguration?

  /**
   * @abstract Called when a context menu interaction begins in this collection view to request a preview for the interaction's initial highlight effect.
   *           Return a @c UITargetedPreview corresponding to the item at the given indexPath.
   *
   * @param collectionView  The @c UICollectionView.
   * @param configuration   Configuration of the menu that will be presented if the interaction proceeds.
   * @param indexPath       Index path of the item at which the interaction is occurring.
   */
  @available(iOS 16.0, *)
  func collectionView(_ collectionView: UICollectionView, contextMenuConfiguration configuration: UIContextMenuConfiguration, highlightPreviewForItemAt indexPath: IndexPath) -> UITargetedPreview?

  /**
   * @abstract Called when a context menu presented from this collection view is dismissed. Return a @c UITargetedPreview corresponding to the item at the given indexPath.
   *
   * @param collectionView  The @c UICollectionView.
   * @param configuration   Configuration of the menu being dismissed.
   * @param indexPath       Index path of the item to which the menu is being dismissed.
   */
  @available(iOS 16.0, *)
  func collectionView(_ collectionView: UICollectionView, contextMenuConfiguration configuration: UIContextMenuConfiguration, dismissalPreviewForItemAt indexPath: IndexPath) -> UITargetedPreview?

  /**
   * @abstract Called when the interaction is about to "commit" in response to the user tapping the preview.
   *
   * @param collectionView  The @c UICollectionView.
   * @param configuration   Configuration of the currently displayed menu.
   * @param animator        Commit animator. Add animations to this object to run them alongside the commit transition.
   */
  @available(iOS 13.0, *)
  func collectionView(_ collectionView: UICollectionView, willPerformPreviewActionForMenuWith configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionCommitAnimating)

  /**
   * @abstract Called when the collection view is about to display a menu.
   *
   * @param collectionView  The @c UICollectionView.
   * @param configuration   The configuration of the menu about to be displayed.
   * @param animator        Appearance animator. Add animations to run them alongside the appearance transition.
   */
  @available(iOS 13.2, *)
  func collectionView(_ collectionView: UICollectionView, willDisplayContextMenu configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)

  /**
   * @abstract Called when the collection view's context menu interaction is about to end.
   *
   * @param collectionView  The @c UICollectionView.
   * @param configuration   Ending configuration.
   * @param animator        Disappearance animator. Add animations to run them alongside the disappearance transition.
   */
  @available(iOS 13.2, *)
  func collectionView(_ collectionView: UICollectionView, willEndContextMenuInteraction configuration: UIContextMenuConfiguration, animator: UIContextMenuInteractionAnimating?)

  /**
   * @abstract Return a valid @c UIWindowSceneActivationConfiguration to allow for the cell to be expanded into a new scene. Return nil to prevent the interaction from starting.
   *
   * @param collectionView The collection view
   * @param indexPath The index path of the cell being interacted with
   * @param point The centroid of the interaction in the collection view's coordinate space.
   */
  @available(iOS 15.0, *)
  func collectionView(_ collectionView: UICollectionView, sceneActivationConfigurationForItemAt indexPath: IndexPath, point: CGPoint) -> UIWindowScene.ActivationConfiguration?

  /**
   * @abstract Called when the interaction begins.
   *
   * @param collectionView  The @c UICollectionView.
   * @param indexPath       IndexPath of the item for which a configuration is being requested.
   * @param point           Touch location in the collection view's coordinate space
   *
   * @return A UIContextMenuConfiguration describing the menu to be presented. Return nil to prevent the interaction from beginning.
   *         Returning an empty configuration causes the interaction to begin then fail with a cancellation effect. You might use this
   *         to indicate to users that it's possible for a menu to be presented from this element, but that there are no actions to
   *         present at this particular time. If the non-deprecated replacement for the configuration, highlight preview, or dismissal preview methods is implemented this method is not called.
   */
  @available(iOS, introduced: 13.0, deprecated: 16.0)
  func collectionView(_ collectionView: UICollectionView, contextMenuConfigurationForItemAt indexPath: IndexPath, point: CGPoint) -> UIContextMenuConfiguration?

  /**
   * @abstract Called when the interaction begins. Return a UITargetedPreview describing the desired highlight preview.
   *           If the non-deprecated replacement for the configuration, highlight preview, or dismissal preview methods is implemented this method is not called.
   *
   * @param collectionView  The @c UICollectionView.
   * @param configuration   The configuration of the menu about to be displayed by this interaction.
   */
  @available(iOS, introduced: 13.0, deprecated: 16.0)
  func collectionView(_ collectionView: UICollectionView, previewForHighlightingContextMenuWithConfiguration configuration: UIContextMenuConfiguration) -> UITargetedPreview?

  /**
   * @abstract Called when the interaction is about to dismiss. Return a UITargetedPreview describing the desired dismissal target.
   *           The interaction will animate the presented menu to the target. Use this to customize the dismissal animation.
   *           If the non-deprecated replacement for the configuration, highlight preview, or dismissal preview methods is implemented this method is not called.
   *
   * @param collectionView  The @c UICollectionView.
   * @param configuration   The configuration of the menu displayed by this interaction.
   */
  @available(iOS, introduced: 13.0, deprecated: 16.0)
  func collectionView(_ collectionView: UICollectionView, previewForDismissingContextMenuWithConfiguration configuration: UIContextMenuConfiguration) -> UITargetedPreview?
  @available(iOS 6.0, *)
  func scrollViewDidScroll(_ scrollView: UIScrollView)
  @available(iOS 3.2, *)
  func scrollViewDidZoom(_ scrollView: UIScrollView)
  @available(iOS 6.0, *)
  func scrollViewWillBeginDragging(_ scrollView: UIScrollView)
  @available(iOS 5.0, *)
  func scrollViewWillEndDragging(_ scrollView: UIScrollView, withVelocity velocity: CGPoint, targetContentOffset: UnsafeMutablePointer<CGPoint>)
  @available(iOS 6.0, *)
  func scrollViewDidEndDragging(_ scrollView: UIScrollView, willDecelerate decelerate: Bool)
  @available(iOS 6.0, *)
  func scrollViewWillBeginDecelerating(_ scrollView: UIScrollView)
  @available(iOS 6.0, *)
  func scrollViewDidEndDecelerating(_ scrollView: UIScrollView)
  @available(iOS 6.0, *)
  func scrollViewDidEndScrollingAnimation(_ scrollView: UIScrollView)
  @available(iOS 6.0, *)
  func viewForZooming(in scrollView: UIScrollView) -> UIView?
  @available(iOS 3.2, *)
  func scrollViewWillBeginZooming(_ scrollView: UIScrollView, with view: UIView?)
  @available(iOS 6.0, *)
  func scrollViewDidEndZooming(_ scrollView: UIScrollView, with view: UIView?, atScale scale: CGFloat)
  @available(iOS 6.0, *)
  func scrollViewShouldScrollToTop(_ scrollView: UIScrollView) -> Bool
  @available(iOS 6.0, *)
  func scrollViewDidScrollToTop(_ scrollView: UIScrollView)
  @available(iOS 11.0, *)
  func scrollViewDidChangeAdjustedContentInset(_ scrollView: UIScrollView)
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell
  @available(iOS 6.0, *)
  func numberOfSections(in collectionView: UICollectionView) -> Int
  @available(iOS 6.0, *)
  func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView
  @available(iOS 9.0, *)
  func collectionView(_ collectionView: UICollectionView, canMoveItemAt indexPath: IndexPath) -> Bool
  @available(iOS 9.0, *)
  func collectionView(_ collectionView: UICollectionView, moveItemAt sourceIndexPath: IndexPath, to destinationIndexPath: IndexPath)

  /// Returns a list of index titles to display in the index view (e.g. ["A", "B", "C" ... "Z", "#"])
  @available(iOS 14.0, *)
  func indexTitles(for collectionView: UICollectionView) -> [String]?

  /// Returns the index path that corresponds to the given title / index. (e.g. "B",1)
  /// Return an index path with a single index to indicate an entire section, instead of a specific item.
  @available(iOS 14.0, *)
  func collectionView(_ collectionView: UICollectionView, indexPathForIndexTitle title: String, at index: Int) -> IndexPath
}
