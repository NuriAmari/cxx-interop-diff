@_exported import Foundation

@available(swift, obsoleted: 3, renamed: "UIFindSession.SearchResultDisplayStyle")
typealias UIFindSessionSearchResultDisplayStyle = UIFindSession.SearchResultDisplayStyle
extension UIFindSession {
  @available(iOS 16.0, *)
  @_nonSendable(_assumed) enum SearchResultDisplayStyle : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int

    /// Displays the total number of reported results, and which result index is currently highlighted (i.e., "1 of 5").
    case currentAndTotal

    /// Displays the total number of reported results, and which result index is currently highlighted (i.e., "1 of 5").
    @available(swift, obsoleted: 3, renamed: "currentAndTotal")
    static var CurrentAndTotal: UIFindSession.SearchResultDisplayStyle { get }

    /// Displays only the total number of reported results (i.e., "5 results").
    case total

    /// Displays only the total number of reported results (i.e., "5 results").
    @available(swift, obsoleted: 3, renamed: "total")
    static var Total: UIFindSession.SearchResultDisplayStyle { get }

    /// Do not display number of reported results.
    case none

    /// Do not display number of reported results.
    @available(swift, obsoleted: 3, renamed: "none")
    static var None: UIFindSession.SearchResultDisplayStyle { get }
  }
}
@available(swift, obsoleted: 3, renamed: "UITextSearchOptions.WordMatchMethod")
typealias UITextSearchMatchMethod = UITextSearchOptions.WordMatchMethod
extension UITextSearchOptions {
  @available(iOS 16.0, *)
  @_nonSendable(_assumed) enum WordMatchMethod : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int

    /// Word contains search string.
    case contains

    /// Word contains search string.
    @available(swift, obsoleted: 3, renamed: "contains")
    static var Contains: UITextSearchOptions.WordMatchMethod { get }

    /// Word contains the search string as a prefix.
    case startsWith

    /// Word contains the search string as a prefix.
    @available(swift, obsoleted: 3, renamed: "startsWith")
    static var StartsWith: UITextSearchOptions.WordMatchMethod { get }

    /// Word is an exact match for the search string.
    case fullWord

    /// Word is an exact match for the search string.
    @available(swift, obsoleted: 3, renamed: "fullWord")
    static var FullWord: UITextSearchOptions.WordMatchMethod { get }
  }
}
@available(iOS 16.0, *)
@MainActor @_nonSendable(_assumed) class UITextSearchOptions : NSObject {

  /// See UITextSearchMatchMethod above.
  var wordMatchMethod: UITextSearchOptions.WordMatchMethod { get }

  /// Comparison options to use when searching for strings.
  var stringCompareOptions: Int { get }
  init()
}

/// @class  UIFindSession
/// @abstract An abstract base class for managing a find session.
/// @discussion A UIFindSession instance is returned by UIFindInteractionDelegate when a find session is initiated
///             by the user. You can choose to implement a subclass of UIFindSession to handle all state, decoration,
///             and behavior yourself. This would be the preferred choice if the view your find interaction is attached to
///             is very custom in the way it handles the presentation of found results. Other clients are encouraged to
///             instead use UISearchableObjectFindSession and the UITextSearching protocol, which manages the
///             state of a find session automatically using behavior consistent with the rest of the system.
@available(iOS 16.0, *)
@MainActor @_nonSendable(_assumed) class UIFindSession : NSObject {

  /// Returns the total number of results.
  /// You may call UIFindInteraction's @c updateResultCount to update the system find panel's UI if already visible.
  var resultCount: Int { get }

  /// Returns the index of the currently highlighted result, out of @c resultCount.
  /// If no result is currently highlighted, return NSNotFound.
  /// You may call UIFindInteraction's @c updateResultCount to update the system find panel's UI if already visible.
  var highlightedResultIndex: Int { get }

  /// Defines how results are reported through the find panel's UI. The default style is @c CurrentAndTotal.
  var searchResultDisplayStyle: UIFindSession.SearchResultDisplayStyle

  /// Return YES if replacement is supported. This gates the appearance of replace UI in the find navigator panel. Default is NO.
  var supportsReplacement: Bool { get }

  /// Return YES if replacement is allowed for the currently highlighted item. This property controls the enabled state
  /// of the "replace" button in the find navigator, as well as various hardware keyboard shortcuts involving replacement.
  /// Default is YES, if supportsReplacement is YES. 
  var allowsReplacementForCurrentlyHighlightedResult: Bool { get }

  /// Called when the user requests a search to be performed for @c query, using @c options.
  ///
  /// @param query    The search string entered into the search text field in the system find panel.
  /// @param options  Object representing all configured search options for this search.
  func performSearch(query: String, options: UITextSearchOptions?)

  /// Called when the user requests a search to be performed for @c query, using @c options.
  ///
  /// @param query    The search string entered into the search text field in the system find panel.
  /// @param options  Object representing all configured search options for this search.
  @available(swift, obsoleted: 3, renamed: "performSearch(query:options:)")
  func performSearchWithQuery(_ query: String, options: UITextSearchOptions?)

  /// Called when the user requests a single replacement to occur given @c searchQuery and @c replacementString.
  ///
  /// @param searchQuery  The search string entered into the search text field in the system find panel.
  /// @param replacementString    The replacement string entered into the replace text field in the system find panel.
  /// @param options  Object representing all configured search options for this replacement.
  func performSingleReplacement(query searchQuery: String, replacementString: String, options: UITextSearchOptions?)

  /// Called when the user requests a single replacement to occur given @c searchQuery and @c replacementString.
  ///
  /// @param searchQuery  The search string entered into the search text field in the system find panel.
  /// @param replacementString    The replacement string entered into the replace text field in the system find panel.
  /// @param options  Object representing all configured search options for this replacement.
  @available(swift, obsoleted: 3, renamed: "performSingleReplacement(query:replacementString:options:)")
  func performSingleReplacementWithSearchQuery(_ searchQuery: String, replacementString: String, options: UITextSearchOptions?)

  /// Called when the user requests a document-wide replacement to occur.
  ///
  /// @param searchQuery  The search string entered into the search text field in the system find panel.
  /// @param replacementString    The replacement string entered into the replace text field in the system find panel.
  /// @param options  Object representing all configured search options for this replacement.
  func replaceAll(searchQuery: String, replacementString: String, options: UITextSearchOptions?)

  /// Called when the user requests a document-wide replacement to occur.
  ///
  /// @param searchQuery  The search string entered into the search text field in the system find panel.
  /// @param replacementString    The replacement string entered into the replace text field in the system find panel.
  /// @param options  Object representing all configured search options for this replacement.
  @available(swift, obsoleted: 3, renamed: "replaceAll(searchQuery:replacementString:options:)")
  func replaceAllInstancesOfSearchQuery(_ searchQuery: String, withReplacementString replacementString: String, options: UITextSearchOptions?)

  /// Called when either the next or previous button is activated, or when return or shift+return is pressed in the search field.
  ///
  /// @param direction    Which direction the user intends to move, either forward or backward.
  func highlightNextResult(in direction: UITextStorageDirection)

  /// Called when either the next or previous button is activated, or when return or shift+return is pressed in the search field.
  ///
  /// @param direction    Which direction the user intends to move, either forward or backward.
  @available(swift, obsoleted: 3, renamed: "highlightNextResult(in:)")
  func highlightNextResultInDirection(_ direction: UITextStorageDirection)

  /// This method will be called whenever the current find session's found/highlighted results are to be invalidated. For instance,
  /// when the search query is cleared, options changed, or any other event where we may not perform another search right away.
  func invalidateFoundResults()
  @available(iOS, introduced: 16.0, deprecated: 16.0)
  var allowsReplacement: Bool { get }
  init()
}

/// @class UITextSearchingFindSession
/// @abstract   A @c UIFindSession implementation for clients who adopt the @c UITextSearching protocol.
/// @discussion @c UITextSearchingFindSession is a concrete implementation of @c UIFindSession which manages
///             all of the state associated with a find session (i.e., the way results are presented to the user, the
///             order in which they are cycled through, etc.). A @c UITextSearchingFindSession would be ideal
///             for clients who already implement the @c UITextInput protocol, since many of the concepts defined there are
///             compatible with this class.
@available(iOS 16.0, *)
@MainActor @_nonSendable(_assumed) class UITextSearchingFindSession : UIFindSession {

  /// The object responsible for actually performing the search operation and decorating found text results.
  /// See `UITextSearching.h` for more information.
  weak var searchableObject: @sil_weak __UITextSearching? { get }
  init(searchableObject: __UITextSearching)
  @available(*, unavailable)
  convenience init()
  @available(*, unavailable)
  class func new() -> Self
}

extension UITextSearchingFindSession {
  @MainActor convenience init<SearchableObject>(searchableObject: SearchableObject) where SearchableObject : UITextSearching
}
