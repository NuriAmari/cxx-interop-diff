@_exported import Foundation

@MainActor protocol UITextViewDelegate : UIScrollViewDelegate {
  @available(iOS 2.0, *)
  optional func textViewShouldBeginEditing(_ textView: UITextView) -> Bool
  @available(iOS 2.0, *)
  optional func textViewShouldEndEditing(_ textView: UITextView) -> Bool
  @available(iOS 2.0, *)
  optional func textViewDidBeginEditing(_ textView: UITextView)
  @available(iOS 2.0, *)
  optional func textViewDidEndEditing(_ textView: UITextView)
  @available(iOS 2.0, *)
  optional func textView(_ textView: UITextView, shouldChangeTextIn range: NSRange, replacementText text: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "textView(_:shouldChangeTextIn:replacementText:)")
  optional func textView(_ textView: UITextView, shouldChangeTextInRange range: NSRange, replacementText text: String) -> Bool
  @available(iOS 2.0, *)
  optional func textViewDidChange(_ textView: UITextView)
  @available(iOS 2.0, *)
  optional func textViewDidChangeSelection(_ textView: UITextView)
  @available(iOS 10.0, *)
  optional func textView(_ textView: UITextView, shouldInteractWith URL: URL, in characterRange: NSRange, interaction: UITextItemInteraction) -> Bool
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "textView(_:shouldInteractWith:in:interaction:)")
  optional func textView(_ textView: UITextView, shouldInteractWithURL URL: URL, inRange characterRange: NSRange, interaction: UITextItemInteraction) -> Bool
  @available(iOS 10.0, *)
  optional func textView(_ textView: UITextView, shouldInteractWith textAttachment: NSTextAttachment, in characterRange: NSRange, interaction: UITextItemInteraction) -> Bool
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "textView(_:shouldInteractWith:in:interaction:)")
  optional func textView(_ textView: UITextView, shouldInteractWithTextAttachment textAttachment: NSTextAttachment, inRange characterRange: NSRange, interaction: UITextItemInteraction) -> Bool
  @available(iOS, introduced: 7.0, deprecated: 10.0)
  optional func textView(_ textView: UITextView, shouldInteractWith URL: URL, in characterRange: NSRange) -> Bool
  @available(swift, obsoleted: 3, renamed: "textView(_:shouldInteractWith:in:)")
  @available(iOS, introduced: 7.0, deprecated: 10.0)
  optional func textView(_ textView: UITextView, shouldInteractWithURL URL: URL, inRange characterRange: NSRange) -> Bool
  @available(iOS, introduced: 7.0, deprecated: 10.0)
  optional func textView(_ textView: UITextView, shouldInteractWith textAttachment: NSTextAttachment, in characterRange: NSRange) -> Bool
  @available(swift, obsoleted: 3, renamed: "textView(_:shouldInteractWith:in:)")
  @available(iOS, introduced: 7.0, deprecated: 10.0)
  optional func textView(_ textView: UITextView, shouldInteractWithTextAttachment textAttachment: NSTextAttachment, inRange characterRange: NSRange) -> Bool

  /**
   * @abstract Asks the delegate for the menu to be shown for the specified text range.
   *
   * @param textView                     The text view requesting the menu.
   * @param range                            The text range for which the menu is presented for.
   * @param suggestedActions   The actions and commands that the system suggests.
   *
   * @return Return a UIMenu describing the desired menu hierarchy. Return @c nil to present the default system menu.
   */
  @available(iOS 16.0, *)
  optional func textView(_ textView: UITextView, editMenuForTextIn range: NSRange, suggestedActions: [UIMenuElement]) -> UIMenu?

  /**
   * @abstract Asks the delegate for the menu to be shown for the specified text range.
   *
   * @param textView                     The text view requesting the menu.
   * @param range                            The text range for which the menu is presented for.
   * @param suggestedActions   The actions and commands that the system suggests.
   *
   * @return Return a UIMenu describing the desired menu hierarchy. Return @c nil to present the default system menu.
   */
  @available(iOS 16.0, *)
  @available(swift, obsoleted: 3, renamed: "textView(_:editMenuForTextIn:suggestedActions:)")
  optional func textView(_ textView: UITextView, editMenuForTextInRange range: NSRange, suggestedActions: [UIMenuElement]) -> UIMenu?

  /**
   * @abstract Called when the text view is about to present the edit menu.
   *
   * @param textView      The text view displaying the menu.
   * @param animator      Appearance animator. Add animations to this object to run them alongside the appearance transition.
   */
  @available(iOS 16.0, *)
  optional func textView(_ textView: UITextView, willPresentEditMenuWith animator: UIEditMenuInteractionAnimating)

  /**
   * @abstract Called when the text view is about to present the edit menu.
   *
   * @param textView      The text view displaying the menu.
   * @param animator      Appearance animator. Add animations to this object to run them alongside the appearance transition.
   */
  @available(iOS 16.0, *)
  @available(swift, obsoleted: 3, renamed: "textView(_:willPresentEditMenuWith:)")
  optional func textView(_ textView: UITextView, willPresentEditMenuWithAnimator animator: UIEditMenuInteractionAnimating)

  /**
   * @abstract Called when the text view is about to dismiss the edit menu.
   *
   * @param textView      The text view displaying the menu.
   * @param animator      Dismissal animator. Add animations to this object to run them alongside the dismissal transition.
   */
  @available(iOS 16.0, *)
  optional func textView(_ textView: UITextView, willDismissEditMenuWith animator: UIEditMenuInteractionAnimating)

  /**
   * @abstract Called when the text view is about to dismiss the edit menu.
   *
   * @param textView      The text view displaying the menu.
   * @param animator      Dismissal animator. Add animations to this object to run them alongside the dismissal transition.
   */
  @available(iOS 16.0, *)
  @available(swift, obsoleted: 3, renamed: "textView(_:willDismissEditMenuWith:)")
  optional func textView(_ textView: UITextView, willDismissEditMenuWithAnimator animator: UIEditMenuInteractionAnimating)
}
@available(iOS 2.0, *)
@MainActor @_nonSendable(_assumed) class UITextView : UIScrollView, UITextInput, UIContentSizeCategoryAdjusting {
  weak var delegate: @sil_weak UITextViewDelegate?
  var text: String!
  var font: UIFont?
  var textColor: UIColor?
  var textAlignment: NSTextAlignment
  var selectedRange: NSRange
  var isEditable: Bool
  @available(swift, obsoleted: 3, renamed: "isEditable")
  var editable: Bool
  @available(iOS 7.0, *)
  var isSelectable: Bool
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "isSelectable")
  var selectable: Bool
  @available(iOS 3.0, *)
  var dataDetectorTypes: UIDataDetectorTypes
  @available(iOS 6.0, *)
  var allowsEditingTextAttributes: Bool
  @available(iOS 6.0, *)
  @NSCopying var attributedText: NSAttributedString!
  @available(iOS 6.0, *)
  var typingAttributes: [NSAttributedString.Key : Any]
  func scrollRangeToVisible(_ range: NSRange)
  var inputView: UIView?
  var inputAccessoryView: UIView?
  @available(iOS 6.0, *)
  var clearsOnInsertion: Bool
  @available(iOS 7.0, *)
  init(frame: CGRect, textContainer: NSTextContainer?)
  @available(iOS 16.0, *)
  convenience init(usingTextLayoutManager: Bool)
  @available(iOS 16.0, *)
  @available(*, unavailable, renamed: "init(usingTextLayoutManager:)", message: "Not available in Swift")
  class func textViewUsingTextLayoutManager(_ usingTextLayoutManager: Bool) -> Self
  init?(coder: NSCoder)
  @available(iOS 7.0, *)
  var textContainer: NSTextContainer { get }
  @available(iOS 7.0, *)
  var textContainerInset: UIEdgeInsets
  @available(iOS 16.0, *)
  var textLayoutManager: NSTextLayoutManager? { get }
  @available(iOS 7.0, *)
  var layoutManager: NSLayoutManager { get }
  @available(iOS 7.0, *)
  var textStorage: NSTextStorage { get }
  @available(iOS 7.0, *)
  var linkTextAttributes: [NSAttributedString.Key : Any]!
  @available(iOS 13.0, *)
  var usesStandardTextScaling: Bool

  /// If `findInteractionEnabled` is set to true, returns this text view's built-in find interaction. Otherwise, nil.
  @available(iOS 16.0, *)
  var findInteraction: UIFindInteraction? { get }

  /// Enables this text view's built-in find interaction.
  @available(iOS 16.0, *)
  var isFindInteractionEnabled: Bool

  /// Enables this text view's built-in find interaction.
  @available(iOS 16.0, *)
  @available(swift, obsoleted: 3, renamed: "isFindInteractionEnabled")
  var findInteractionEnabled: Bool
  convenience init(frame: CGRect)
  convenience init()
  @available(iOS 3.2, *)
  @NSCopying var selectedTextRange: UITextRange?
  @available(iOS 3.2, *)
  var markedTextRange: UITextRange? { get }
  @available(iOS 3.2, *)
  var markedTextStyle: [NSAttributedString.Key : Any]?
  @available(iOS 3.2, *)
  var beginningOfDocument: UITextPosition { get }
  @available(iOS 3.2, *)
  var endOfDocument: UITextPosition { get }
  @available(iOS 2.0, *)
  weak var inputDelegate: @sil_weak UITextInputDelegate?
  @available(iOS 2.0, *)
  var tokenizer: UITextInputTokenizer { get }
  @available(iOS 2.0, *)
  var textInputView: UIView { get }
  @available(iOS 2.0, *)
  var selectionAffinity: UITextStorageDirection
  @available(iOS 2.0, *)
  var insertDictationResultPlaceholder: Any { get }
  @available(iOS 2.0, *)
  var hasText: Bool { get }
  @available(iOS 2.0, *)
  var autocapitalizationType: UITextAutocapitalizationType
  @available(iOS 2.0, *)
  var autocorrectionType: UITextAutocorrectionType
  @available(iOS 5.0, *)
  var spellCheckingType: UITextSpellCheckingType
  @available(iOS 11.0, *)
  var smartQuotesType: UITextSmartQuotesType
  @available(iOS 11.0, *)
  var smartDashesType: UITextSmartDashesType
  @available(iOS 11.0, *)
  var smartInsertDeleteType: UITextSmartInsertDeleteType
  @available(iOS 2.0, *)
  var keyboardType: UIKeyboardType
  @available(iOS 2.0, *)
  var keyboardAppearance: UIKeyboardAppearance
  @available(iOS 2.0, *)
  var returnKeyType: UIReturnKeyType
  @available(iOS 2.0, *)
  var enablesReturnKeyAutomatically: Bool
  @available(iOS 2.0, *)
  var isSecureTextEntry: Bool
  @available(iOS 10.0, *)
  var textContentType: UITextContentType!
  @available(iOS 12.0, *)
  @NSCopying var passwordRules: UITextInputPasswordRules?
  @available(iOS 10.0, *)
  var adjustsFontForContentSizeCategory: Bool
  @available(iOS 3.2, *)
  func text(in range: UITextRange) -> String?
  @available(iOS 3.2, *)
  func replace(_ range: UITextRange, withText text: String)
  @available(iOS 2.0, *)
  func setMarkedText(_ markedText: String?, selectedRange: NSRange)
  @available(iOS 2.0, *)
  func unmarkText()
  @available(iOS 3.2, *)
  func textRange(from fromPosition: UITextPosition, to toPosition: UITextPosition) -> UITextRange?
  @available(iOS 3.2, *)
  func position(from position: UITextPosition, offset: Int) -> UITextPosition?
  @available(iOS 3.2, *)
  func position(from position: UITextPosition, in direction: UITextLayoutDirection, offset: Int) -> UITextPosition?
  @available(iOS 3.2, *)
  func compare(_ position: UITextPosition, to other: UITextPosition) -> ComparisonResult
  @available(iOS 3.2, *)
  func offset(from: UITextPosition, to toPosition: UITextPosition) -> Int
  @available(iOS 3.2, *)
  func position(within range: UITextRange, farthestIn direction: UITextLayoutDirection) -> UITextPosition?
  @available(iOS 3.2, *)
  func characterRange(byExtending position: UITextPosition, in direction: UITextLayoutDirection) -> UITextRange?
  @available(iOS 6.0, *)
  func baseWritingDirection(for position: UITextPosition, in direction: UITextStorageDirection) -> NSWritingDirection
  @available(iOS 6.0, *)
  func setBaseWritingDirection(_ writingDirection: NSWritingDirection, for range: UITextRange)
  @available(iOS 3.2, *)
  func firstRect(for range: UITextRange) -> CGRect
  @available(iOS 3.2, *)
  func caretRect(for position: UITextPosition) -> CGRect
  @available(iOS 6.0, *)
  func selectionRects(for range: UITextRange) -> [UITextSelectionRect]
  @available(iOS 3.2, *)
  func closestPosition(to point: CGPoint) -> UITextPosition?
  @available(iOS 3.2, *)
  func closestPosition(to point: CGPoint, within range: UITextRange) -> UITextPosition?
  @available(iOS 3.2, *)
  func characterRange(at point: CGPoint) -> UITextRange?
  @available(iOS 6.0, *)
  func shouldChangeText(in range: UITextRange, replacementText text: String) -> Bool
  @available(iOS 3.2, *)
  func textStyling(at position: UITextPosition, in direction: UITextStorageDirection) -> [NSAttributedString.Key : Any]?
  @available(iOS 3.2, *)
  func position(within range: UITextRange, atCharacterOffset offset: Int) -> UITextPosition?
  @available(iOS 3.2, *)
  func characterOffset(of position: UITextPosition, within range: UITextRange) -> Int
  @available(iOS 5.1, *)
  func insertDictationResult(_ dictationResult: [UIDictationPhrase])
  @available(iOS 2.0, *)
  func dictationRecordingDidEnd()
  @available(iOS 2.0, *)
  func dictationRecognitionFailed()
  @available(iOS 2.0, *)
  func frame(forDictationResultPlaceholder placeholder: Any) -> CGRect
  @available(iOS 2.0, *)
  func removeDictationResultPlaceholder(_ placeholder: Any, willInsertResult: Bool)
  @available(iOS 2.0, *)
  func insertText(_ text: String, alternatives: [String], style: UITextAlternativeStyle)
  @available(iOS 3.2, *)
  func setAttributedMarkedText(_ markedText: NSAttributedString?, selectedRange: NSRange)
  @available(iOS 13.0, *)
  func insertTextPlaceholder(with size: CGSize) -> UITextPlaceholder
  @available(iOS 13.0, *)
  func remove(_ textPlaceholder: UITextPlaceholder)
  @available(iOS 9.0, *)
  func beginFloatingCursor(at point: CGPoint)
  @available(iOS 9.0, *)
  func updateFloatingCursor(at point: CGPoint)
  @available(iOS 9.0, *)
  func endFloatingCursor()

  /**
   * Called when the text input is preparing an edit menu presentation for the specified text range.
   *
   * @param textRange                  The text range for which the menu is presented for.
   * @param suggestedActions  The actions and commands that the system suggests.
   *
   * @return Return a UIMenu describing the desired menu hierarchy. Return @c nil to present the default system menu.
   */
  @available(iOS 16.0, *)
  func editMenu(for textRange: UITextRange, suggestedActions: [UIMenuElement]) -> UIMenu?
  @available(iOS 16.0, *)
  func willPresentEditMenu(animator: UIEditMenuInteractionAnimating)
  @available(iOS 16.0, *)
  func willDismissEditMenu(animator: UIEditMenuInteractionAnimating)
  @available(iOS 2.0, *)
  func insertText(_ text: String)
  @available(iOS 2.0, *)
  func deleteBackward()
}
extension UITextView : UITextDraggable, UITextDroppable, UITextPasteConfigurationSupporting, UIFindInteractionDelegate, __UITextSearching {
  @available(iOS 11.0, *)
  weak var textDragDelegate: @sil_weak UITextDragDelegate?
  @available(iOS 11.0, *)
  var textDragInteraction: UIDragInteraction? { get }
  @available(iOS 11.0, *)
  var isTextDragActive: Bool { get }
  @available(iOS 11.0, *)
  var textDragOptions: UITextDragOptions
  @available(iOS 11.0, *)
  weak var textDropDelegate: @sil_weak UITextDropDelegate?
  @available(iOS 11.0, *)
  var textDropInteraction: UIDropInteraction? { get }
  @available(iOS 11.0, *)
  var isTextDropActive: Bool { get }
  @available(iOS 11.0, *)
  weak var pasteDelegate: @sil_weak UITextPasteDelegate?

  /// Return YES if your searchable item also supports replacement. If this method is unimplemented, it is
  /// assumed that text replacement is not supported.
  @available(iOS 16.0, *)
  var supportsTextReplacement: Bool { get }

  /// Returns the current search document, if applicable. Nil otherwise.
  @available(iOS 16.0, *)
  var selectedTextSearchDocument: __UITextSearchDocumentIdentifier? { get }

  /// Called when a find session is requested to begin by the user. Return an instance of a UIFindSession implementation to allow the
  /// find session to begin, otherwise return nil to prevent the system find panel from appearing.
  @available(iOS 16.0, *)
  func findInteraction(_ interaction: UIFindInteraction, sessionFor view: UIView) -> UIFindSession?

  /// Called when the search operation begins (and the system search UI appears).
  /// This would be a good time to decorate your view to indicate that a search operation is about to occur.
  /// System text elements will apply a dimming view around all non-highlighted search results, for instance.
  @available(iOS 16.0, *)
  func findInteraction(_ interaction: UIFindInteraction, didBegin session: UIFindSession)

  /// Called when the current search session has changed or ended. This would be a good time to remove all
  /// decorations applied to found search results, and any decorations added when the search operation began
  /// (such as a dimming view).
  @available(iOS 16.0, *)
  func findInteraction(_ interaction: UIFindInteraction, didEnd session: UIFindSession)

  /// Provide a comparison result comparing developer-provided @c fromRange to @c toRange . This is used by
  /// the system find panel to know which @c UITextRange to highlight next when the user taps the "next" or "previous"
  /// result buttons.
  ///
  /// @param foundRange    Developer-provided range to compare from.
  /// @param toRange  Developer-provided range to compare to.
  /// @param document If multiple documents are used, a document identifier will be provided here. Ranges are only
  ///                compared between other ranges of the same document.
  @available(iOS 16.0, *)
  func compareFound(_ foundRange: UITextRange, to toRange: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?) -> ComparisonResult

  /// Perform a text search (across all available searchable documents) using @c string. When results are found,
  /// provide the results to @c aggregator.
  ///
  /// @param string     The query string to search for
  /// @param options    Search options provided by the user.
  /// @param aggregator When results are found, provide them to the aggregator. The aggregator is thread-safe,
  ///                   so you may send it messages on other threads.
  @available(iOS 16.0, *)
  func performTextSearch(withQueryString string: String, using options: UITextSearchOptions, resultAggregator aggregator: __UITextSearchAggregator)

  /// Given a found @c range , decorate this text appropriately using the provided @c style type.
  ///
  /// @param range    The range of text to decorate.
  /// @param document If multiple documents are used, the relevant document identifier is provided here.
  ///                 Otherwise nil.
  /// @param style    A style hint for how to decorate the text. This is ultimately up to the developer, but developers are
  ///               encouraged to match the system's appearance (i.e., UITextView) as close as possible. 
  @available(iOS 16.0, *)
  func decorateFound(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, using style: UITextSearchFoundTextStyle)

  /// Called when the current search session has changed or ended, with the expectation that all decorations
  /// applied via @c decorateFoundTextRange:usingStyle: are cleared.
  @available(iOS 16.0, *)
  func clearAllDecoratedFoundText()

  /// Optionally return NO to disallow the replacement of a particular result @c range . This will disable the "replace"
  /// button in the UI. If this method is unimplemented, it is assumed that all results are replaceable.
  ///
  /// @param range    Range to replace.
  /// @param document If multiple documents are used, the document from which range originates.
  /// @param replacementText  Text that the user intends to replace with.
  @available(iOS 16.0, *)
  func shouldReplaceFoundText(in range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, withText replacementText: String) -> Bool

  /// If you return YES for `-supportsTextReplacement`, this method will be called whenever the user intends to
  /// replace a range of text.
  ///
  /// @param range            The range of text requesting to be replaced.
  /// @param document         If multiple search documents are used, the relevant document identifier is provided
  ///                    here. Otherwise nil.
  /// @param replacementText  The replacement string.
  @available(iOS 16.0, *)
  func replaceFoundText(in range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, withText replacementText: String)

  /// When replacing all occurrences at once, this method is called instead of the one above.
  ///
  /// @param queryString             The search term to replace.
  /// @param options                      Search options provided by the find panel UI.
  /// @param replacementText    The string to replace it with.
  @available(iOS 16.0, *)
  func replaceAllOccurrences(ofQueryString queryString: String, using options: UITextSearchOptions, withText replacementText: String)

  /// Called when the highlighted search result is about to change to @c range .
  @available(iOS 16.0, *)
  func willHighlightFound(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?)

  /// If scrolling is supported, implement this to know when the document should be scrolled to a particular
  /// search result.
  ///
  /// @param range    The text range to scroll to.
  /// @param document (Optional) If multiple documents are used, the document identifier to scroll to.
  @available(iOS 16.0, *)
  func scrollRangeToVisible(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?)

  /// Returns the visible ordering from `fromDocument` to `toDocument`. If your document identifiers
  /// are index paths, for example, this would yield the same result as `-[NSIndexPath compare:]`.
  @available(iOS 16.0, *)
  func compareOrder(fromDocument: __UITextSearchDocumentIdentifier, toDocument: __UITextSearchDocumentIdentifier) -> ComparisonResult
}
extension UITextView {
  @available(iOS 15.0, *)
  var interactionState: Any
}
@available(swift, obsoleted: 3, renamed: "UITextView.textDidBeginEditingNotification")
let UITextViewTextDidBeginEditingNotification: NSNotification.Name
extension UITextView {
  class let textDidBeginEditingNotification: NSNotification.Name
  class let textDidChangeNotification: NSNotification.Name
  class let textDidEndEditingNotification: NSNotification.Name
}
@available(swift, obsoleted: 3, renamed: "UITextView.textDidChangeNotification")
let UITextViewTextDidChangeNotification: NSNotification.Name
@available(swift, obsoleted: 3, renamed: "UITextView.textDidEndEditingNotification")
let UITextViewTextDidEndEditingNotification: NSNotification.Name
