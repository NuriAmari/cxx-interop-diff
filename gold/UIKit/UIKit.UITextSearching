@_exported import Foundation

typealias __UITextSearchDocumentIdentifier = NSCopying & NSObjectProtocol
@available(iOS 16.0, *)
@_nonSendable(_assumed) enum UITextSearchFoundTextStyle : Int, @unchecked Sendable {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int

  /// No style.
  case normal

  /// No style.
  @available(swift, obsoleted: 3, renamed: "normal")
  static var Normal: UITextSearchFoundTextStyle { get }

  /// "Found" style. Used to indicate matches that have been found, but not currently highlighted.
  case found

  /// "Found" style. Used to indicate matches that have been found, but not currently highlighted.
  @available(swift, obsoleted: 3, renamed: "found")
  static var Found: UITextSearchFoundTextStyle { get }

  /// Highlighted style, used to indicate a match that is found and currently highlighted.
  case highlighted

  /// Highlighted style, used to indicate a match that is found and currently highlighted.
  @available(swift, obsoleted: 3, renamed: "highlighted")
  static var Highlighted: UITextSearchFoundTextStyle { get }
}
@available(iOS 16.0, *)
@MainActor protocol __UITextSearchAggregator : NSObjectProtocol {

  /// Returns all currently reported found ranges via @c foundRange:forSearchString:.
  var allFoundRanges: NSOrderedSet { get }

  /// Call this method when a range of text is found in your document.
  ///
  /// @param range    The range of text that was found.
  /// @param string   The query string that was used to locate this range of text.
  /// @param document (Optional) A developer-defined document identifier, later provided when this range
  ///                 needs to be styled.
  func found(_ range: UITextRange, forSearch string: String, inDocument document: __UITextSearchDocumentIdentifier?)

  /// Call this method when a range of text is found in your document.
  ///
  /// @param range    The range of text that was found.
  /// @param string   The query string that was used to locate this range of text.
  /// @param document (Optional) A developer-defined document identifier, later provided when this range
  ///                 needs to be styled.
  @available(swift, obsoleted: 3, renamed: "found(_:forSearch:inDocument:)")
  func foundRange(_ range: UITextRange, forSearchString string: String, inDocument document: __UITextSearchDocumentIdentifier?)

  /// Call this method when a found @c range is no longer in @c document . This will cause the system find
  /// panel to update it's current state, and if the range provided is the currently highlighted range, will advance
  /// to the next found result.
  ///
  /// @param range    The range that is now invalid.
  /// @param document (Optional) If multiple documents are used, the document identifier for the range provided.
  func invalidateFound(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?)

  /// Call this method when a found @c range is no longer in @c document . This will cause the system find
  /// panel to update it's current state, and if the range provided is the currently highlighted range, will advance
  /// to the next found result.
  ///
  /// @param range    The range that is now invalid.
  /// @param document (Optional) If multiple documents are used, the document identifier for the range provided.
  @available(swift, obsoleted: 3, renamed: "invalidateFound(_:inDocument:)")
  func invalidateFoundRange(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?)

  /// Call this method to invalidate all currently shown ranges. This will cause the system find panel to update
  /// it's current state, and may trigger a new search using `performTextSearchWithQueryString:` immediately after.
  func invalidate()

  /// Call this method after all documents have been searched.
  func finishedSearching()
}
@available(iOS 16.0, *)
@MainActor protocol __UITextSearching : NSObjectProtocol {

  /// Overlap from UITextInput: Returns the currently selected text range, if applicable. Nil otherwise.
  var selectedTextRange: UITextRange? { get }

  /// Provide a comparison result comparing developer-provided @c fromRange to @c toRange . This is used by
  /// the system find panel to know which @c UITextRange to highlight next when the user taps the "next" or "previous"
  /// result buttons.
  ///
  /// @param foundRange    Developer-provided range to compare from.
  /// @param toRange  Developer-provided range to compare to.
  /// @param document If multiple documents are used, a document identifier will be provided here. Ranges are only
  ///                compared between other ranges of the same document.
  func compareFound(_ foundRange: UITextRange, to toRange: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?) -> ComparisonResult

  /// Provide a comparison result comparing developer-provided @c fromRange to @c toRange . This is used by
  /// the system find panel to know which @c UITextRange to highlight next when the user taps the "next" or "previous"
  /// result buttons.
  ///
  /// @param foundRange    Developer-provided range to compare from.
  /// @param toRange  Developer-provided range to compare to.
  /// @param document If multiple documents are used, a document identifier will be provided here. Ranges are only
  ///                compared between other ranges of the same document.
  @available(swift, obsoleted: 3, renamed: "compareFound(_:to:inDocument:)")
  func compareFoundRange(_ foundRange: UITextRange, toRange: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?) -> ComparisonResult

  /// Perform a text search (across all available searchable documents) using @c string. When results are found,
  /// provide the results to @c aggregator.
  ///
  /// @param string     The query string to search for
  /// @param options    Search options provided by the user.
  /// @param aggregator When results are found, provide them to the aggregator. The aggregator is thread-safe,
  ///                   so you may send it messages on other threads.
  func performTextSearch(withQueryString string: String, using options: UITextSearchOptions, resultAggregator aggregator: __UITextSearchAggregator)

  /// Perform a text search (across all available searchable documents) using @c string. When results are found,
  /// provide the results to @c aggregator.
  ///
  /// @param string     The query string to search for
  /// @param options    Search options provided by the user.
  /// @param aggregator When results are found, provide them to the aggregator. The aggregator is thread-safe,
  ///                   so you may send it messages on other threads.
  @available(swift, obsoleted: 3, renamed: "performTextSearch(withQueryString:using:resultAggregator:)")
  func performTextSearchWithQueryString(_ string: String, usingOptions options: UITextSearchOptions, resultAggregator aggregator: __UITextSearchAggregator)

  /// Given a found @c range , decorate this text appropriately using the provided @c style type.
  ///
  /// @param range    The range of text to decorate.
  /// @param document If multiple documents are used, the relevant document identifier is provided here.
  ///                 Otherwise nil.
  /// @param style    A style hint for how to decorate the text. This is ultimately up to the developer, but developers are
  ///               encouraged to match the system's appearance (i.e., UITextView) as close as possible. 
  func decorateFound(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, using style: UITextSearchFoundTextStyle)

  /// Given a found @c range , decorate this text appropriately using the provided @c style type.
  ///
  /// @param range    The range of text to decorate.
  /// @param document If multiple documents are used, the relevant document identifier is provided here.
  ///                 Otherwise nil.
  /// @param style    A style hint for how to decorate the text. This is ultimately up to the developer, but developers are
  ///               encouraged to match the system's appearance (i.e., UITextView) as close as possible. 
  @available(swift, obsoleted: 3, renamed: "decorateFound(_:inDocument:using:)")
  func decorateFoundTextRange(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, usingStyle style: UITextSearchFoundTextStyle)

  /// Called when the current search session has changed or ended, with the expectation that all decorations
  /// applied via @c decorateFoundTextRange:usingStyle: are cleared.
  func clearAllDecoratedFoundText()

  /// Return YES if your searchable item also supports replacement. If this method is unimplemented, it is
  /// assumed that text replacement is not supported.
  optional var supportsTextReplacement: Bool { get }

  /// Optionally return NO to disallow the replacement of a particular result @c range . This will disable the "replace"
  /// button in the UI. If this method is unimplemented, it is assumed that all results are replaceable.
  ///
  /// @param range    Range to replace.
  /// @param document If multiple documents are used, the document from which range originates.
  /// @param replacementText  Text that the user intends to replace with.
  optional func shouldReplaceFoundText(in range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, withText replacementText: String) -> Bool

  /// Optionally return NO to disallow the replacement of a particular result @c range . This will disable the "replace"
  /// button in the UI. If this method is unimplemented, it is assumed that all results are replaceable.
  ///
  /// @param range    Range to replace.
  /// @param document If multiple documents are used, the document from which range originates.
  /// @param replacementText  Text that the user intends to replace with.
  @available(swift, obsoleted: 3, renamed: "shouldReplaceFoundText(in:inDocument:withText:)")
  optional func shouldReplaceFoundTextInRange(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, withText replacementText: String) -> Bool

  /// If you return YES for `-supportsTextReplacement`, this method will be called whenever the user intends to
  /// replace a range of text.
  ///
  /// @param range            The range of text requesting to be replaced.
  /// @param document         If multiple search documents are used, the relevant document identifier is provided
  ///                    here. Otherwise nil.
  /// @param replacementText  The replacement string.
  optional func replaceFoundText(in range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, withText replacementText: String)

  /// If you return YES for `-supportsTextReplacement`, this method will be called whenever the user intends to
  /// replace a range of text.
  ///
  /// @param range            The range of text requesting to be replaced.
  /// @param document         If multiple search documents are used, the relevant document identifier is provided
  ///                    here. Otherwise nil.
  /// @param replacementText  The replacement string.
  @available(swift, obsoleted: 3, renamed: "replaceFoundText(in:inDocument:withText:)")
  optional func replaceFoundTextInRange(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?, withText replacementText: String)

  /// When replacing all occurrences at once, this method is called instead of the one above.
  ///
  /// @param queryString             The search term to replace.
  /// @param options                      Search options provided by the find panel UI.
  /// @param replacementText    The string to replace it with.
  optional func replaceAllOccurrences(ofQueryString queryString: String, using options: UITextSearchOptions, withText replacementText: String)

  /// When replacing all occurrences at once, this method is called instead of the one above.
  ///
  /// @param queryString             The search term to replace.
  /// @param options                      Search options provided by the find panel UI.
  /// @param replacementText    The string to replace it with.
  @available(swift, obsoleted: 3, renamed: "replaceAllOccurrences(ofQueryString:using:withText:)")
  optional func replaceAllOccurrencesOfQueryString(_ queryString: String, usingOptions options: UITextSearchOptions, withText replacementText: String)

  /// Called when the highlighted search result is about to change to @c range .
  optional func willHighlightFound(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?)

  /// Called when the highlighted search result is about to change to @c range .
  @available(swift, obsoleted: 3, renamed: "willHighlightFound(_:inDocument:)")
  optional func willHighlightFoundTextRange(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?)

  /// If scrolling is supported, implement this to know when the document should be scrolled to a particular
  /// search result.
  ///
  /// @param range    The text range to scroll to.
  /// @param document (Optional) If multiple documents are used, the document identifier to scroll to.
  optional func scrollRangeToVisible(_ range: UITextRange, inDocument document: __UITextSearchDocumentIdentifier?)

  /// Returns the current search document, if applicable. Nil otherwise.
  optional var selectedTextSearchDocument: __UITextSearchDocumentIdentifier? { get }

  /// Returns the visible ordering from `fromDocument` to `toDocument`. If your document identifiers
  /// are index paths, for example, this would yield the same result as `-[NSIndexPath compare:]`.
  optional func compareOrder(fromDocument: __UITextSearchDocumentIdentifier, toDocument: __UITextSearchDocumentIdentifier) -> ComparisonResult

  /// Returns the visible ordering from `fromDocument` to `toDocument`. If your document identifiers
  /// are index paths, for example, this would yield the same result as `-[NSIndexPath compare:]`.
  @available(swift, obsoleted: 3, renamed: "compareOrder(fromDocument:toDocument:)")
  optional func compareOrderFromDocument(_ fromDocument: __UITextSearchDocumentIdentifier, toDocument: __UITextSearchDocumentIdentifier) -> ComparisonResult
}
