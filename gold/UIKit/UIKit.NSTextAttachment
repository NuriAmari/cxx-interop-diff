@_exported import Foundation

@available(iOS 7.0, *)
@available(swift, obsoleted: 4.2, renamed: "NSTextAttachment.character")
var NSAttachmentCharacter: Int { get }
extension NSTextAttachment {
  @available(iOS 7.0, *)
  class var character: Int { get }
}
protocol NSTextAttachmentContainer : NSObjectProtocol {
  @available(iOS 7.0, *)
  func image(forBounds imageBounds: CGRect, textContainer: NSTextContainer?, characterIndex charIndex: Int) -> UIImage?
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "image(forBounds:textContainer:characterIndex:)")
  func imageForBounds(_ imageBounds: CGRect, textContainer: NSTextContainer?, characterIndex charIndex: Int) -> UIImage?
  @available(iOS 7.0, *)
  func attachmentBounds(for textContainer: NSTextContainer?, proposedLineFragment lineFrag: CGRect, glyphPosition position: CGPoint, characterIndex charIndex: Int) -> CGRect
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "attachmentBounds(for:proposedLineFragment:glyphPosition:characterIndex:)")
  func attachmentBoundsForTextContainer(_ textContainer: NSTextContainer?, proposedLineFragment lineFrag: CGRect, glyphPosition position: CGPoint, characterIndex charIndex: Int) -> CGRect
}
protocol NSTextAttachmentLayout : NSObjectProtocol {
  @available(iOS 15.0, *)
  func image(for bounds: CGRect, attributes: [NSAttributedString.Key : Any] = [:], location: NSTextLocation, textContainer: NSTextContainer?) -> UIImage?
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "image(for:attributes:location:textContainer:)")
  func imageForBounds(_ bounds: CGRect, attributes: [NSAttributedString.Key : Any] = [:], location: NSTextLocation, textContainer: NSTextContainer?) -> UIImage?
  @available(iOS 15.0, *)
  func attachmentBounds(for attributes: [NSAttributedString.Key : Any], location: NSTextLocation, textContainer: NSTextContainer?, proposedLineFragment: CGRect, position: CGPoint) -> CGRect
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "attachmentBounds(for:location:textContainer:proposedLineFragment:position:)")
  func attachmentBoundsForAttributes(_ attributes: [NSAttributedString.Key : Any] = [:], location: NSTextLocation, textContainer: NSTextContainer?, proposedLineFragment: CGRect, position: CGPoint) -> CGRect
  @available(iOS 15.0, *)
  func viewProvider(for parentView: UIView?, location: NSTextLocation, textContainer: NSTextContainer?) -> NSTextAttachmentViewProvider?
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "viewProvider(for:location:textContainer:)")
  func viewProviderForParentView(_ parentView: UIView?, location: NSTextLocation, textContainer: NSTextContainer?) -> NSTextAttachmentViewProvider?
}
@available(iOS 7.0, *)
@_nonSendable(_assumed) class NSTextAttachment : NSObject, NSTextAttachmentLayout, NSTextAttachmentContainer, NSSecureCoding {

  /**************************** Initialization ****************************/
  @available(iOS 7.0, *)
  init(data contentData: Data?, ofType uti: String?)

  /**************************** Content properties ****************************/
  @available(iOS 7.0, *)
  var contents: Data?
  @available(iOS 7.0, *)
  var fileType: String?

  /**************************** Rendering/layout properties ****************************/
  @available(iOS 7.0, *)
  var image: UIImage?
  @available(iOS 7.0, *)
  var bounds: CGRect

  /**************************** Non-image contents properties ****************************/
  var fileWrapper: FileWrapper?
  @available(iOS 15.0, *)
  var lineLayoutPadding: CGFloat
  @available(iOS 15.0, *)
  class func textAttachmentViewProviderClass(forFileType fileType: String) -> AnyClass?
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "textAttachmentViewProviderClass(forFileType:)")
  class func textAttachmentViewProviderClassForFileType(_ fileType: String) -> AnyClass?
  @available(iOS 15.0, *)
  class func registerViewProviderClass(_ textAttachmentViewProviderClass: AnyClass, forFileType fileType: String)
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "registerViewProviderClass(_:forFileType:)")
  class func registerTextAttachmentViewProviderClass(_ textAttachmentViewProviderClass: AnyClass, forFileType fileType: String)
  @available(iOS 15.0, *)
  var allowsTextAttachmentView: Bool
  @available(iOS 15.0, *)
  var usesTextAttachmentView: Bool { get }
  convenience init()
  @available(iOS 7.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 15.0, *)
  func image(for bounds: CGRect, attributes: [NSAttributedString.Key : Any] = [:], location: NSTextLocation, textContainer: NSTextContainer?) -> UIImage?
  @available(iOS 15.0, *)
  func attachmentBounds(for attributes: [NSAttributedString.Key : Any], location: NSTextLocation, textContainer: NSTextContainer?, proposedLineFragment: CGRect, position: CGPoint) -> CGRect
  @available(iOS 15.0, *)
  func viewProvider(for parentView: UIView?, location: NSTextLocation, textContainer: NSTextContainer?) -> NSTextAttachmentViewProvider?
  @available(iOS 7.0, *)
  func image(forBounds imageBounds: CGRect, textContainer: NSTextContainer?, characterIndex charIndex: Int) -> UIImage?
  @available(iOS 7.0, *)
  func attachmentBounds(for textContainer: NSTextContainer?, proposedLineFragment lineFrag: CGRect, glyphPosition position: CGPoint, characterIndex charIndex: Int) -> CGRect
  @available(iOS 7.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

@available(*, unavailable)
extension NSTextAttachment : @unchecked Sendable {
}
extension NSAttributedString {
  @available(iOS 7.0, *)
  /*not inherited*/ init(attachment: NSTextAttachment)
  @available(iOS 7.0, *)
  @available(*, unavailable, renamed: "init(attachment:)", message: "Not available in Swift")
  class func attributedStringWithAttachment(_ attachment: NSTextAttachment) -> NSAttributedString
}
@available(iOS 15.0, *)
@_nonSendable(_assumed) class NSTextAttachmentViewProvider : NSObject {
  init(textAttachment: NSTextAttachment, parentView: UIView?, textLayoutManager: NSTextLayoutManager?, location: NSTextLocation)
  @available(*, unavailable)
  convenience init()
  @available(*, unavailable)
  class func new() -> Self
  weak var textAttachment: @sil_weak NSTextAttachment? { get }
  weak var textLayoutManager: @sil_weak NSTextLayoutManager? { get }
  var location: NSTextLocation { get }
  var view: UIView?
  func loadView()
  var tracksTextAttachmentViewBounds: Bool
  func attachmentBounds(for attributes: [NSAttributedString.Key : Any], location: NSTextLocation, textContainer: NSTextContainer?, proposedLineFragment: CGRect, position: CGPoint) -> CGRect
  @available(swift, obsoleted: 3, renamed: "attachmentBounds(for:location:textContainer:proposedLineFragment:position:)")
  func attachmentBoundsForAttributes(_ attributes: [NSAttributedString.Key : Any] = [:], location: NSTextLocation, textContainer: NSTextContainer?, proposedLineFragment: CGRect, position: CGPoint) -> CGRect
}

@available(*, unavailable)
extension NSTextAttachmentViewProvider : @unchecked Sendable {
}
