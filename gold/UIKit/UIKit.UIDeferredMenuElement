@_exported import Foundation

@available(iOS 14.0, *)
@MainActor @_nonSendable(_assumed) class UIDeferredMenuElement : UIMenuElement {

  /**
   * @abstract Returns a placeholder menu element that is replaced with the result of the block's
   *           completion handler. A loading UI takes the place of the element in the menu
   *           until it is fulfilled. While the element may be stored and re-used across menus, its block is
   *           called only once, when the element is first encountered in a menu.
   *
   * @param elementProvider  Called by the system to request the deferred menu items when the containing menu is presented.
   *                         Call this block's completion handler when the menu items are available.
   */
  convenience init(_ elementProvider: @escaping (@escaping ([UIMenuElement]) -> Void) -> Void)

  /**
   * @abstract Returns a placeholder menu element that is replaced with the result of the block's
   *           completion handler. A loading UI takes the place of the element in the menu
   *           until it is fulfilled. While the element may be stored and re-used across menus, its block is
   *           called only once, when the element is first encountered in a menu.
   *
   * @param elementProvider  Called by the system to request the deferred menu items when the containing menu is presented.
   *                         Call this block's completion handler when the menu items are available.
   */
  @available(swift, obsoleted: 3, renamed: "init(_:)")
  convenience init(provider elementProvider: @escaping (@escaping ([UIMenuElement]) -> Void) -> Void)

  /**
   * @abstract Returns a placeholder menu element that is replaced with the result of the block's
   *           completion handler. A loading UI takes the place of the element in the menu
   *           until it is fulfilled. While the element may be stored and re-used across menus, its block is
   *           called only once, when the element is first encountered in a menu.
   *
   * @param elementProvider  Called by the system to request the deferred menu items when the containing menu is presented.
   *                         Call this block's completion handler when the menu items are available.
   */
  @available(*, unavailable, renamed: "init(_:)", message: "Not available in Swift")
  class func elementWithProvider(_ elementProvider: @escaping (@escaping ([UIMenuElement]) -> Void) -> Void) -> Self

  /**
   * @abstract Returns a placeholder menu element that is replaced with the result of the block's
   *           completion handler. A loading UI takes the place of the element in the menu
   *           until it is fulfilled. Elements created using this initializer are "uncached",
   *           so their @c elementProvider block is called every time the element is displayed.
   *
   * @param elementProvider  Called by the system to request the deferred menu items when the containing menu is presented.
   *                         Call this block's completion handler when the menu items are available.
   */
  @available(iOS 15.0, *)
  class func uncached(_ elementProvider: @escaping (@escaping ([UIMenuElement]) -> Void) -> Void) -> Self

  /**
   * @abstract Returns a placeholder menu element that is replaced with the result of the block's
   *           completion handler. A loading UI takes the place of the element in the menu
   *           until it is fulfilled. Elements created using this initializer are "uncached",
   *           so their @c elementProvider block is called every time the element is displayed.
   *
   * @param elementProvider  Called by the system to request the deferred menu items when the containing menu is presented.
   *                         Call this block's completion handler when the menu items are available.
   */
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "uncached(_:)")
  convenience init(uncachedProvider elementProvider: @escaping (@escaping ([UIMenuElement]) -> Void) -> Void)

  /**
   * @abstract Returns a placeholder menu element that is replaced with the result of the block's
   *           completion handler. A loading UI takes the place of the element in the menu
   *           until it is fulfilled. Elements created using this initializer are "uncached",
   *           so their @c elementProvider block is called every time the element is displayed.
   *
   * @param elementProvider  Called by the system to request the deferred menu items when the containing menu is presented.
   *                         Call this block's completion handler when the menu items are available.
   */
  @available(iOS 15.0, *)
  @available(*, unavailable, renamed: "uncached(_:)", message: "Not available in Swift")
  class func elementWithUncachedProvider(_ elementProvider: @escaping (@escaping ([UIMenuElement]) -> Void) -> Void) -> Self
  init?(coder: NSCoder)
  @available(*, unavailable)
  convenience init()
}
