@_exported import Foundation

@available(swift, obsoleted: 3, renamed: "UIScreen.didConnectNotification")
@available(iOS, introduced: 3.2, deprecated: 16.0, message: "Use UISceneDelegate or related notifications to be informed of connecting scenes from other screens")
let UIScreenDidConnectNotification: NSNotification.Name
extension UIScreen {
  @available(iOS, introduced: 3.2, deprecated: 16.0, message: "Use UISceneDelegate or related notifications to be informed of connecting scenes from other screens")
  class let didConnectNotification: NSNotification.Name
  @available(iOS, introduced: 3.2, deprecated: 16.0, message: "Use UISceneDelegate or related notifications to be informed of disconnecting scenes from other screens")
  class let didDisconnectNotification: NSNotification.Name
  @available(iOS 3.2, *)
  class let modeDidChangeNotification: NSNotification.Name
  @available(iOS 5.0, *)
  class let brightnessDidChangeNotification: NSNotification.Name
  @available(iOS 11.0, *)
  class let capturedDidChangeNotification: NSNotification.Name
  @available(iOS 16.0, *)
  class let referenceDisplayModeStatusDidChangeNotification: NSNotification.Name
  @_nonSendable(_assumed) enum OverscanCompensation : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case scale
    @available(swift, obsoleted: 3, renamed: "scale")
    static var Scale: UIScreen.OverscanCompensation { get }
    case insetBounds
    @available(swift, obsoleted: 3, renamed: "insetBounds")
    static var InsetBounds: UIScreen.OverscanCompensation { get }
    @available(iOS 9.0, *)
    case none
    @available(iOS 9.0, *)
    @available(swift, obsoleted: 3, renamed: "none")
    static var None: UIScreen.OverscanCompensation { get }
    @available(iOS, introduced: 5.0, deprecated: 9.0, renamed: "UIScreen.OverscanCompensation.none")
    static var insetApplicationFrame: UIScreen.OverscanCompensation { get }
  }
  @available(iOS 16.0, *)
  @_nonSendable(_assumed) enum ReferenceDisplayModeStatus : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case notSupported
    @available(swift, obsoleted: 3, renamed: "notSupported")
    static var NotSupported: UIScreen.ReferenceDisplayModeStatus { get }
    case notEnabled
    @available(swift, obsoleted: 3, renamed: "notEnabled")
    static var NotEnabled: UIScreen.ReferenceDisplayModeStatus { get }
    case limited
    @available(swift, obsoleted: 3, renamed: "limited")
    static var Limited: UIScreen.ReferenceDisplayModeStatus { get }
    case enabled
    @available(swift, obsoleted: 3, renamed: "enabled")
    static var Enabled: UIScreen.ReferenceDisplayModeStatus { get }
  }
}
@available(swift, obsoleted: 3, renamed: "UIScreen.didDisconnectNotification")
@available(iOS, introduced: 3.2, deprecated: 16.0, message: "Use UISceneDelegate or related notifications to be informed of disconnecting scenes from other screens")
let UIScreenDidDisconnectNotification: NSNotification.Name
@available(iOS 3.2, *)
@available(swift, obsoleted: 3, renamed: "UIScreen.modeDidChangeNotification")
let UIScreenModeDidChangeNotification: NSNotification.Name
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "UIScreen.brightnessDidChangeNotification")
let UIScreenBrightnessDidChangeNotification: NSNotification.Name
@available(iOS 11.0, *)
@available(swift, obsoleted: 3, renamed: "UIScreen.capturedDidChangeNotification")
let UIScreenCapturedDidChangeNotification: NSNotification.Name
@available(iOS 16.0, *)
@available(swift, obsoleted: 3, renamed: "UIScreen.referenceDisplayModeStatusDidChangeNotification")
let UIScreenReferenceDisplayModeStatusDidChangeNotification: NSNotification.Name
@available(swift, obsoleted: 4.2, renamed: "UIScreen.OverscanCompensation")
typealias UIScreenOverscanCompensation = UIScreen.OverscanCompensation
@available(iOS 16.0, *)
@available(swift, obsoleted: 3, renamed: "UIScreen.ReferenceDisplayModeStatus")
typealias UIScreenReferenceDisplayModeStatus = UIScreen.ReferenceDisplayModeStatus
@available(iOS 2.0, *)
@MainActor @_nonSendable(_assumed) class UIScreen : NSObject, UITraitEnvironment {
  @available(iOS, introduced: 3.2, deprecated: 16.0, message: "Use UIApplication.shared.openSessions to find open sessions with scenes from other screens")
  class var screens: [UIScreen] { get }
  @available(iOS, introduced: 2.0, deprecated: 100000, message: "Use a UIScreen instance found through context instead: i.e, view.window.windowScene.screen")
  class var main: UIScreen { get }
  @available(swift, obsoleted: 3, renamed: "main")
  @available(iOS, introduced: 2.0, deprecated: 100000, message: "Use a UIScreen instance found through context instead: i.e, view.window.windowScene.screen")
  class var mainScreen: UIScreen { get }
  var bounds: CGRect { get }
  @available(iOS 4.0, *)
  var scale: CGFloat { get }
  @available(iOS 3.2, *)
  var availableModes: [UIScreenMode] { get }
  @available(iOS 4.3, *)
  var preferredMode: UIScreenMode? { get }
  @available(iOS 3.2, *)
  var currentMode: UIScreenMode?
  @available(iOS 5.0, *)
  var overscanCompensation: UIScreen.OverscanCompensation
  @available(iOS 9.0, *)
  var overscanCompensationInsets: UIEdgeInsets { get }
  @available(iOS 4.3, *)
  var mirrored: UIScreen? { get }
  @available(iOS 4.3, *)
  @available(swift, obsoleted: 3, renamed: "mirrored")
  var mirroredScreen: UIScreen? { get }
  @available(iOS 11.0, *)
  var isCaptured: Bool { get }
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "isCaptured")
  var captured: Bool { get }
  @available(iOS 5.0, *)
  var brightness: CGFloat
  @available(iOS 5.0, *)
  var wantsSoftwareDimming: Bool
  @available(iOS 8.0, *)
  var coordinateSpace: UICoordinateSpace { get }
  @available(iOS 8.0, *)
  var fixedCoordinateSpace: UICoordinateSpace { get }
  @available(iOS 8.0, *)
  var nativeBounds: CGRect { get }
  @available(iOS 8.0, *)
  var nativeScale: CGFloat { get }
  @available(iOS 4.0, *)
  func displayLink(withTarget target: Any, selector sel: Selector) -> CADisplayLink?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "displayLink(withTarget:selector:)")
  func displayLinkWithTarget(_ target: Any, selector sel: Selector) -> CADisplayLink?
  @available(iOS 10.3, *)
  var maximumFramesPerSecond: Int { get }
  @available(iOS 13.0, *)
  var calibratedLatency: CFTimeInterval { get }
  @available(iOS 16.0, *)
  var referenceDisplayModeStatus: UIScreen.ReferenceDisplayModeStatus { get }
  @available(iOS 16.0, *)
  var currentEDRHeadroom: CGFloat { get }
  @available(iOS 16.0, *)
  var potentialEDRHeadroom: CGFloat { get }
  @available(iOS, introduced: 10.0, deprecated: 15.0, message: "Use -[UIWindowScene focusSystem].focusedItem instead")
  weak var focusedItem: @sil_weak UIFocusItem? { get }
  @available(iOS, introduced: 9.0, deprecated: 15.0, message: "Use -[UIWindowScene focusSystem].focusedItem instead")
  weak var focusedView: @sil_weak UIView? { get }
  @available(iOS, introduced: 9.0, deprecated: 15.0, message: "Use -[UIWindowScene focusSystem] != nil instead")
  var supportsFocus: Bool { get }
  @available(iOS, introduced: 2.0, deprecated: 9.0)
  var applicationFrame: CGRect { get }
  init()
  @available(iOS 8.0, *)
  var traitCollection: UITraitCollection { get }

  /** To be overridden as needed to provide custom behavior when the environment's traits change. */
  @available(iOS 8.0, *)
  func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?)
}
extension UIScreen {
  @available(iOS 7.0, *)
  func snapshotView(afterScreenUpdates afterUpdates: Bool) -> UIView
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "snapshotView(afterScreenUpdates:)")
  func snapshotViewAfterScreenUpdates(_ afterUpdates: Bool) -> UIView
}
