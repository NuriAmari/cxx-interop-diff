@_exported import CoreFoundation

@available(*, unavailable, message: "Not available in Swift")
typealias NSRegularExpressionOptions = Int
@available(iOS 4.0, *)
class NSRegularExpression : NSObject, NSCopying, NSSecureCoding {
  @available(*, unavailable, message: "superseded by import of -[NSRegularExpression initWithPattern:options:error:]")
  /*not inherited*/ init(pattern: String, options: Int) throws
  @available(*, unavailable, renamed: "init(pattern:options:)", message: "Not available in Swift")
  class func regularExpressionWithPattern(_ pattern: String, options: Int) throws -> NSRegularExpression
  init(pattern: String, options: Int) throws
  var pattern: String { get }
  var options: Int { get }
  var numberOfCaptureGroups: Int { get }
  class func escapedPattern(for string: String) -> String
  @available(swift, obsoleted: 3, renamed: "escapedPattern(for:)")
  class func escapedPatternForString(_ string: String) -> String
  convenience init()
  @available(iOS 4.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 4.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 4.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}
@available(*, unavailable, message: "Not available in Swift")
typealias NSMatchingOptions = Int
@available(*, unavailable, message: "Not available in Swift")
typealias NSMatchingFlags = Int
extension NSRegularExpression {
  func enumerateMatches(in string: String, options: Int, range: NSRange, using block: (NSTextCheckingResult?, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(swift, obsoleted: 3, renamed: "enumerateMatches(in:options:range:using:)")
  func enumerateMatchesInString(_ string: String, options: Int, range: NSRange, usingBlock block: (NSTextCheckingResult?, Int, UnsafeMutablePointer<ObjCBool>) -> Void)
  func matches(in string: String, options: Int, range: NSRange) -> [NSTextCheckingResult]
  @available(swift, obsoleted: 3, renamed: "matches(in:options:range:)")
  func matchesInString(_ string: String, options: Int, range: NSRange) -> [NSTextCheckingResult]
  func numberOfMatches(in string: String, options: Int, range: NSRange) -> Int
  @available(swift, obsoleted: 3, renamed: "numberOfMatches(in:options:range:)")
  func numberOfMatchesInString(_ string: String, options: Int, range: NSRange) -> Int
  func firstMatch(in string: String, options: Int, range: NSRange) -> NSTextCheckingResult?
  @available(swift, obsoleted: 3, renamed: "firstMatch(in:options:range:)")
  func firstMatchInString(_ string: String, options: Int, range: NSRange) -> NSTextCheckingResult?
  func rangeOfFirstMatch(in string: String, options: Int, range: NSRange) -> NSRange
  @available(swift, obsoleted: 3, renamed: "rangeOfFirstMatch(in:options:range:)")
  func rangeOfFirstMatchInString(_ string: String, options: Int, range: NSRange) -> NSRange
}
extension NSRegularExpression {
  func stringByReplacingMatches(in string: String, options: Int, range: NSRange, withTemplate templ: String) -> String
  @available(swift, obsoleted: 3, renamed: "stringByReplacingMatches(in:options:range:withTemplate:)")
  func stringByReplacingMatchesInString(_ string: String, options: Int, range: NSRange, withTemplate templ: String) -> String
  func replaceMatches(in string: NSMutableString, options: Int, range: NSRange, withTemplate templ: String) -> Int
  @available(swift, obsoleted: 3, renamed: "replaceMatches(in:options:range:withTemplate:)")
  func replaceMatchesInString(_ string: NSMutableString, options: Int, range: NSRange, withTemplate templ: String) -> Int
  func replacementString(for result: NSTextCheckingResult, in string: String, offset: Int, template templ: String) -> String
  @available(swift, obsoleted: 3, renamed: "replacementString(for:in:offset:template:)")
  func replacementStringForResult(_ result: NSTextCheckingResult, inString string: String, offset: Int, template templ: String) -> String
  class func escapedTemplate(for string: String) -> String
  @available(swift, obsoleted: 3, renamed: "escapedTemplate(for:)")
  class func escapedTemplateForString(_ string: String) -> String
}
@available(iOS 4.0, *)
class NSDataDetector : NSRegularExpression {
  @available(*, unavailable, message: "superseded by import of -[NSDataDetector initWithTypes:error:]")
  /*not inherited*/ init(types checkingTypes: NSTextCheckingTypes) throws
  @available(*, unavailable, renamed: "init(types:)", message: "Not available in Swift")
  class func dataDetectorWithTypes(_ checkingTypes: NSTextCheckingTypes) throws -> NSDataDetector
  init(types checkingTypes: NSTextCheckingTypes) throws
  var checkingTypes: NSTextCheckingTypes { get }
  convenience init(pattern: String, options: Int) throws
  convenience init()
  init?(coder: NSCoder)
}
