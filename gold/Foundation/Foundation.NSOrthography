@_exported import CoreFoundation

@available(iOS 4.0, *)
@_nonSendable(_assumed) class NSOrthography : NSObject, NSCopying, NSSecureCoding {
  var dominantScript: String { get }
  var languageMap: [String : [String]] { get }
  @available(iOS 4.0, *)
  init(dominantScript script: String, languageMap map: [String : [String]])
  init?(coder: NSCoder)
  convenience init()
  @available(iOS 4.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 4.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 4.0, *)
  func encode(with coder: NSCoder)
}

@available(*, unavailable)
extension NSOrthography : @unchecked Sendable {
}
extension NSOrthography {
  @available(iOS 4.0, *)
  func languages(forScript script: String) -> [String]?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "languages(forScript:)")
  func languagesForScript(_ script: String) -> [String]?
  @available(iOS 4.0, *)
  func dominantLanguage(forScript script: String) -> String?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "dominantLanguage(forScript:)")
  func dominantLanguageForScript(_ script: String) -> String?
  @available(iOS 4.0, *)
  var dominantLanguage: String { get }
  @available(iOS 4.0, *)
  var allScripts: [String] { get }
  @available(iOS 4.0, *)
  var allLanguages: [String] { get }
  @available(iOS 11.0, *)
  class func defaultOrthography(forLanguage language: String) -> Self
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "defaultOrthography(forLanguage:)")
  class func defaultOrthographyForLanguage(_ language: String) -> Self
}
extension NSOrthography {
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(dominantScript:languageMap:)", message: "Not available in Swift")
  class func orthographyWithDominantScript(_ script: String, languageMap map: [String : [String]]) -> Self
}
