@_exported import CoreFoundation

@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSSystemClockDidChange")
let NSSystemClockDidChangeNotification: NSNotification.Name
extension NSNotification.Name {
  @available(iOS 4.0, *)
  static let NSSystemClockDidChange: NSNotification.Name
}
@available(swift, obsoleted: 3, renamed: "TimeInterval")
typealias NSTimeInterval = TimeInterval
typealias TimeInterval = Double
var NSTimeIntervalSince1970: Double { get }
@_nonSendable(_assumed) class NSDate : NSObject, NSCopying, NSSecureCoding, @unchecked Sendable {
  var timeIntervalSinceReferenceDate: TimeInterval { get }
  init()
  init(timeIntervalSinceReferenceDate ti: TimeInterval)
  init?(coder: NSCoder)
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
}

extension NSDate : _CustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "NSDate.customPlaygroundQuickLook will be removed in a future Swift version")
  var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension NSDate : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}
extension NSDate {
  func timeIntervalSince(_ anotherDate: Date) -> TimeInterval
  @available(swift, obsoleted: 3, renamed: "timeIntervalSince(_:)")
  func timeIntervalSinceDate(_ anotherDate: Date) -> TimeInterval
  var timeIntervalSinceNow: TimeInterval { get }
  var timeIntervalSince1970: TimeInterval { get }
  @available(iOS, unavailable, introduced: 2.0, deprecated: 4.0, message: "Use dateByAddingTimeInterval instead")
  func addTimeInterval(_ seconds: TimeInterval) -> Any
  @available(iOS 2.0, *)
  func addingTimeInterval(_ ti: TimeInterval) -> Self
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "addingTimeInterval(_:)")
  func dateByAddingTimeInterval(_ ti: TimeInterval) -> Self
  func earlierDate(_ anotherDate: Date) -> Date
  func laterDate(_ anotherDate: Date) -> Date
  func compare(_ other: Date) -> ComparisonResult
  func isEqual(to otherDate: Date) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToDate(_ otherDate: Date) -> Bool
  var description: String { get }
  func description(with locale: Any?) -> String
  @available(swift, obsoleted: 3, renamed: "description(with:)")
  func descriptionWithLocale(_ locale: Any?) -> String
  class var timeIntervalSinceReferenceDate: TimeInterval { get }
}
extension NSDate {
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func date() -> Self
  @available(*, unavailable, message: "superseded by import of -[NSDate(NSDateCreation) initWithTimeIntervalSinceNow:]")
  convenience init(timeIntervalSinceNow secs: TimeInterval)
  @available(*, unavailable, renamed: "init(timeIntervalSinceNow:)", message: "Not available in Swift")
  class func dateWithTimeIntervalSinceNow(_ secs: TimeInterval) -> Self
  @available(*, unavailable, renamed: "init(timeIntervalSinceReferenceDate:)", message: "Not available in Swift")
  class func dateWithTimeIntervalSinceReferenceDate(_ ti: TimeInterval) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSDate(NSDateCreation) initWithTimeIntervalSince1970:]")
  convenience init(timeIntervalSince1970 secs: TimeInterval)
  @available(*, unavailable, renamed: "init(timeIntervalSince1970:)", message: "Not available in Swift")
  class func dateWithTimeIntervalSince1970(_ secs: TimeInterval) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSDate(NSDateCreation) initWithTimeInterval:sinceDate:]")
  convenience init(timeInterval secsToBeAdded: TimeInterval, since date: Date)
  @available(swift, obsoleted: 3, renamed: "init(timeInterval:since:)")
  convenience init(timeInterval secsToBeAdded: TimeInterval, sinceDate date: Date)
  @available(*, unavailable, renamed: "init(timeInterval:since:)", message: "Not available in Swift")
  class func dateWithTimeInterval(_ secsToBeAdded: TimeInterval, sinceDate date: Date) -> Self
  class var distantFuture: Date { get }
  class var distantPast: Date { get }
  @available(iOS 13.0, *)
  class var now: Date { get }
  convenience init(timeIntervalSinceNow secs: TimeInterval)
  convenience init(timeIntervalSince1970 secs: TimeInterval)
  convenience init(timeInterval secsToBeAdded: TimeInterval, since date: Date)
  @available(swift, obsoleted: 3, renamed: "init(timeInterval:since:)")
  convenience init(timeInterval secsToBeAdded: TimeInterval, sinceDate date: Date)
}
