@_exported import CoreFoundation

class NSIndexPath : NSObject, NSCopying, NSSecureCoding {
  @available(*, unavailable, message: "superseded by import of -[NSIndexPath initWithIndex:]")
  convenience init(index: Int)
  @available(*, unavailable, renamed: "init(index:)", message: "Not available in Swift")
  class func indexPathWithIndex(_ index: Int) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSIndexPath initWithIndexes:length:]")
  convenience init(indexes: UnsafePointer<Int>?, length: Int)
  @available(*, unavailable, renamed: "init(indexes:length:)", message: "Not available in Swift")
  class func indexPathWithIndexes(_ indexes: UnsafePointer<Int>?, length: Int) -> Self
  init(indexes: UnsafePointer<Int>?, length: Int)
  convenience init(index: Int)
  func adding(_ index: Int) -> IndexPath
  @available(swift, obsoleted: 3, renamed: "adding(_:)")
  func indexPathByAddingIndex(_ index: Int) -> IndexPath
  func removingLastIndex() -> IndexPath
  @available(swift, obsoleted: 3, renamed: "removingLastIndex()")
  func indexPathByRemovingLastIndex() -> IndexPath
  func index(atPosition position: Int) -> Int
  @available(swift, obsoleted: 3, renamed: "index(atPosition:)")
  func indexAtPosition(_ position: Int) -> Int
  var length: Int { get }

  /**
   @abstract Copies the indexes stored in this index path from the positions specified by positionRange into indexes.
   @param indexes Buffer of at least as many NSUIntegers as specified by the length of positionRange. On return, this memory will hold the index path's indexes.
   @param positionRange A range of valid positions within this index path.  If the location plus the length of positionRange is greater than the length of this index path, this method raises an NSRangeException.
   @discussion
      It is the developerâ€™s responsibility to allocate the memory for the C array.
   */
  @available(iOS 7.0, *)
  func getIndexes(_ indexes: UnsafeMutablePointer<Int>, range positionRange: NSRange)
  func compare(_ otherObject: IndexPath) -> ComparisonResult
  convenience init()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

extension NSIndexPath : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}
extension NSIndexPath {

  /// This method is unsafe because it could potentially cause buffer overruns. You should use -getIndexes:range: instead. 
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func getIndexes(_ indexes: UnsafeMutablePointer<Int>)
}
