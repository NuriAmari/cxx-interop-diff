@_exported import CoreFoundation


/**
    @enum NSURLRequestCachePolicy

    @discussion The NSURLRequestCachePolicy enum defines constants that
    can be used to specify the type of interactions that take place with
    the caching system when the URL loading system processes a request.
    Specifically, these constants cover interactions that have to do
    with whether already-existing cache data is returned to satisfy a
    URL load request.

    @constant NSURLRequestUseProtocolCachePolicy Specifies that the
    caching logic defined in the protocol implementation, if any, is
    used for a particular URL load request. This is the default policy
    for URL load requests.

    @constant NSURLRequestReloadIgnoringLocalCacheData Specifies that the
    data for the URL load should be loaded from the origin source. No
    existing local cache data, regardless of its freshness or validity,
    should be used to satisfy a URL load request.

    @constant NSURLRequestReloadIgnoringLocalAndRemoteCacheData Specifies that
    not only should the local cache data be ignored, but that proxies and
    other intermediates should be instructed to disregard their caches
    so far as the protocol allows.

    @constant NSURLRequestReloadIgnoringCacheData Older name for
    NSURLRequestReloadIgnoringLocalCacheData.

    @constant NSURLRequestReturnCacheDataElseLoad Specifies that the
    existing cache data should be used to satisfy a URL load request,
    regardless of its age or expiration date. However, if there is no
    existing data in the cache corresponding to a URL load request,
    the URL is loaded from the origin source.

    @constant NSURLRequestReturnCacheDataDontLoad Specifies that the
    existing cache data should be used to satisfy a URL load request,
    regardless of its age or expiration date. However, if there is no
    existing data in the cache corresponding to a URL load request, no
    attempt is made to load the URL from the origin source, and the
    load is considered to have failed. This constant specifies a
    behavior that is similar to an "offline" mode.

    @constant NSURLRequestReloadRevalidatingCacheData Specifies that
    the existing cache data may be used provided the origin source
    confirms its validity, otherwise the URL is loaded from the
    origin source.
*/
@available(swift, obsoleted: 3, renamed: "NSURLRequest.CachePolicy")
typealias NSURLRequestCachePolicy = NSURLRequest.CachePolicy
extension NSURLRequest {

  /**
      @enum NSURLRequestCachePolicy
  
      @discussion The NSURLRequestCachePolicy enum defines constants that
      can be used to specify the type of interactions that take place with
      the caching system when the URL loading system processes a request.
      Specifically, these constants cover interactions that have to do
      with whether already-existing cache data is returned to satisfy a
      URL load request.
  
      @constant NSURLRequestUseProtocolCachePolicy Specifies that the
      caching logic defined in the protocol implementation, if any, is
      used for a particular URL load request. This is the default policy
      for URL load requests.
  
      @constant NSURLRequestReloadIgnoringLocalCacheData Specifies that the
      data for the URL load should be loaded from the origin source. No
      existing local cache data, regardless of its freshness or validity,
      should be used to satisfy a URL load request.
  
      @constant NSURLRequestReloadIgnoringLocalAndRemoteCacheData Specifies that
      not only should the local cache data be ignored, but that proxies and
      other intermediates should be instructed to disregard their caches
      so far as the protocol allows.
  
      @constant NSURLRequestReloadIgnoringCacheData Older name for
      NSURLRequestReloadIgnoringLocalCacheData.
  
      @constant NSURLRequestReturnCacheDataElseLoad Specifies that the
      existing cache data should be used to satisfy a URL load request,
      regardless of its age or expiration date. However, if there is no
      existing data in the cache corresponding to a URL load request,
      the URL is loaded from the origin source.
  
      @constant NSURLRequestReturnCacheDataDontLoad Specifies that the
      existing cache data should be used to satisfy a URL load request,
      regardless of its age or expiration date. However, if there is no
      existing data in the cache corresponding to a URL load request, no
      attempt is made to load the URL from the origin source, and the
      load is considered to have failed. This constant specifies a
      behavior that is similar to an "offline" mode.
  
      @constant NSURLRequestReloadRevalidatingCacheData Specifies that
      the existing cache data may be used provided the origin source
      confirms its validity, otherwise the URL is loaded from the
      origin source.
  */
  enum CachePolicy : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case useProtocolCachePolicy
    @available(swift, obsoleted: 3, renamed: "useProtocolCachePolicy")
    static var UseProtocolCachePolicy: NSURLRequest.CachePolicy { get }
    case reloadIgnoringLocalCacheData
    @available(swift, obsoleted: 3, renamed: "reloadIgnoringLocalCacheData")
    static var ReloadIgnoringLocalCacheData: NSURLRequest.CachePolicy { get }
    case reloadIgnoringLocalAndRemoteCacheData
    @available(swift, obsoleted: 3, renamed: "reloadIgnoringLocalAndRemoteCacheData")
    static var ReloadIgnoringLocalAndRemoteCacheData: NSURLRequest.CachePolicy { get }
    static var reloadIgnoringCacheData: NSURLRequest.CachePolicy { get }
    case returnCacheDataElseLoad
    @available(swift, obsoleted: 3, renamed: "returnCacheDataElseLoad")
    static var ReturnCacheDataElseLoad: NSURLRequest.CachePolicy { get }
    case returnCacheDataDontLoad
    @available(swift, obsoleted: 3, renamed: "returnCacheDataDontLoad")
    static var ReturnCacheDataDontLoad: NSURLRequest.CachePolicy { get }
    case reloadRevalidatingCacheData
    @available(swift, obsoleted: 3, renamed: "reloadRevalidatingCacheData")
    static var ReloadRevalidatingCacheData: NSURLRequest.CachePolicy { get }
  }

  /**
   @enum NSURLRequestNetworkServiceType
   
   @discussion The NSURLRequestNetworkServiceType enum defines constants that
   can be used to specify the service type to associate with this request.  The
   service type is used to provide the networking layers a hint of the purpose 
   of the request.
   
   @constant NSURLNetworkServiceTypeDefault Is the default value for an NSURLRequest
   when created.  This value should be left unchanged for the vast majority of requests.
   
   @constant NSURLNetworkServiceTypeVoIP Specifies that the request is for voice over IP
   control traffic.
   
   @constant NSURLNetworkServiceTypeVideo Specifies that the request is for video
   traffic.
  
   @constant NSURLNetworkServiceTypeBackground Specifies that the request is for background
   traffic (such as a file download).
  
   @constant NSURLNetworkServiceTypeVoice Specifies that the request is for voice data.
  
   @constant NSURLNetworkServiceTypeResponsiveData Specifies that the request is for responsive (time sensitive) data.
  
   @constant NSURLNetworkServiceTypeAVStreaming Specifies that the request is streaming audio/video data.
  
   @constant NSURLNetworkServiceTypeResponsiveAV Specifies that the request is for responsive (time sensitive) audio/video data.
  
   @constant NSURLNetworkServiceTypeCallSignaling Specifies that the request is for call signaling.
  */
  enum NetworkServiceType : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case `default`
    @available(swift, obsoleted: 3, renamed: "default")
    static var NSURLNetworkServiceTypeDefault: NSURLRequest.NetworkServiceType { get }
    @available(iOS, introduced: 4.0, deprecated: 13.0, message: "Use PushKit for VoIP control purposes")
    case voip
    @available(iOS, introduced: 4.0, deprecated: 13.0, message: "Use PushKit for VoIP control purposes")
    @available(swift, obsoleted: 3, renamed: "voip")
    static var NSURLNetworkServiceTypeVoIP: NSURLRequest.NetworkServiceType { get }
    case video
    @available(swift, obsoleted: 3, renamed: "video")
    static var NSURLNetworkServiceTypeVideo: NSURLRequest.NetworkServiceType { get }
    case background
    @available(swift, obsoleted: 3, renamed: "background")
    static var NSURLNetworkServiceTypeBackground: NSURLRequest.NetworkServiceType { get }
    case voice
    @available(swift, obsoleted: 3, renamed: "voice")
    static var NSURLNetworkServiceTypeVoice: NSURLRequest.NetworkServiceType { get }
    case responsiveData
    @available(swift, obsoleted: 3, renamed: "responsiveData")
    static var NSURLNetworkServiceTypeResponsiveData: NSURLRequest.NetworkServiceType { get }
    @available(iOS 7.0, *)
    case avStreaming
    @available(iOS 7.0, *)
    @available(swift, obsoleted: 3, renamed: "avStreaming")
    static var NSURLNetworkServiceTypeAVStreaming: NSURLRequest.NetworkServiceType { get }
    @available(iOS 7.0, *)
    case responsiveAV
    @available(iOS 7.0, *)
    @available(swift, obsoleted: 3, renamed: "responsiveAV")
    static var NSURLNetworkServiceTypeResponsiveAV: NSURLRequest.NetworkServiceType { get }
    @available(iOS 10.0, *)
    case callSignaling
    @available(iOS 10.0, *)
    @available(swift, obsoleted: 4.2, renamed: "callSignaling")
    static var networkServiceTypeCallSignaling: NSURLRequest.NetworkServiceType { get }
    @available(iOS 10.0, *)
    @available(swift, obsoleted: 3, renamed: "callSignaling")
    static var NSURLNetworkServiceTypeCallSignaling: NSURLRequest.NetworkServiceType { get }
  }

  /**
   @enum NSURLRequestAttribution
  
   @discussion The NSURLRequestAttribution enum is used to indicate whether the
   user or developer specified the URL.
  
   @constant NSURLRequestAttributionDeveloper Indicates that the URL was specified
   by the developer. This is the default value for an NSURLRequest when created.
  
   @constant NSURLRequestAttributionUser Indicates that the URL was specified by
   the user.
  */
  @available(iOS 15.0, *)
  enum Attribution : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case developer
    @available(swift, obsoleted: 3, renamed: "developer")
    static var Developer: NSURLRequest.Attribution { get }
    case user
    @available(swift, obsoleted: 3, renamed: "user")
    static var User: NSURLRequest.Attribution { get }
  }
}

/**
 @enum NSURLRequestNetworkServiceType
 
 @discussion The NSURLRequestNetworkServiceType enum defines constants that
 can be used to specify the service type to associate with this request.  The
 service type is used to provide the networking layers a hint of the purpose 
 of the request.
 
 @constant NSURLNetworkServiceTypeDefault Is the default value for an NSURLRequest
 when created.  This value should be left unchanged for the vast majority of requests.
 
 @constant NSURLNetworkServiceTypeVoIP Specifies that the request is for voice over IP
 control traffic.
 
 @constant NSURLNetworkServiceTypeVideo Specifies that the request is for video
 traffic.

 @constant NSURLNetworkServiceTypeBackground Specifies that the request is for background
 traffic (such as a file download).

 @constant NSURLNetworkServiceTypeVoice Specifies that the request is for voice data.

 @constant NSURLNetworkServiceTypeResponsiveData Specifies that the request is for responsive (time sensitive) data.

 @constant NSURLNetworkServiceTypeAVStreaming Specifies that the request is streaming audio/video data.

 @constant NSURLNetworkServiceTypeResponsiveAV Specifies that the request is for responsive (time sensitive) audio/video data.

 @constant NSURLNetworkServiceTypeCallSignaling Specifies that the request is for call signaling.
*/
@available(swift, obsoleted: 3, renamed: "NSURLRequest.NetworkServiceType")
typealias NSURLRequestNetworkServiceType = NSURLRequest.NetworkServiceType

/**
 @enum NSURLRequestAttribution

 @discussion The NSURLRequestAttribution enum is used to indicate whether the
 user or developer specified the URL.

 @constant NSURLRequestAttributionDeveloper Indicates that the URL was specified
 by the developer. This is the default value for an NSURLRequest when created.

 @constant NSURLRequestAttributionUser Indicates that the URL was specified by
 the user.
*/
@available(iOS 15.0, *)
@available(swift, obsoleted: 3, renamed: "NSURLRequest.Attribution")
typealias NSURLRequestAttribution = NSURLRequest.Attribution

/**
    @class NSURLRequest
    
    @abstract An NSURLRequest object represents a URL load request in a
    manner independent of protocol and URL scheme.
    
    @discussion NSURLRequest encapsulates two basic data elements about
    a URL load request:
    <ul>
    <li>The URL to load.
    <li>The policy to use when consulting the URL content cache made
    available by the implementation.
    </ul>
    In addition, NSURLRequest is designed to be extended to support
    protocol-specific data by adding categories to access a property
    object provided in an interface targeted at protocol implementors.
    <ul>
    <li>Protocol implementors should direct their attention to the
    NSURLRequestExtensibility category on NSURLRequest for more
    information on how to provide extensions on NSURLRequest to
    support protocol-specific request information.
    <li>Clients of this API who wish to create NSURLRequest objects to
    load URL content should consult the protocol-specific NSURLRequest
    categories that are available. The NSHTTPURLRequest category on
    NSURLRequest is an example.
    </ul>
    <p>
    Objects of this class are used to create NSURLConnection instances,
    which can are used to perform the load of a URL, or as input to the
    NSURLConnection class method which performs synchronous loads.
*/
@available(iOS 2.0, *)
class NSURLRequest : NSObject, NSSecureCoding, NSCopying, NSMutableCopying {

  /** 
      @method requestWithURL:
      @abstract Allocates and initializes an NSURLRequest with the given
      URL.
      @discussion Default values are used for cache policy
      (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
      seconds).
      @param URL The URL for the request.
      @result A newly-created and autoreleased NSURLRequest instance.
  */
  @available(*, unavailable, message: "superseded by import of -[NSURLRequest initWithURL:]")
  convenience init(url URL: URL)

  /** 
      @method requestWithURL:
      @abstract Allocates and initializes an NSURLRequest with the given
      URL.
      @discussion Default values are used for cache policy
      (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
      seconds).
      @param URL The URL for the request.
      @result A newly-created and autoreleased NSURLRequest instance.
  */
  @available(swift, obsoleted: 3, renamed: "init(url:)")
  convenience init(URL: URL)

  /** 
      @method requestWithURL:
      @abstract Allocates and initializes an NSURLRequest with the given
      URL.
      @discussion Default values are used for cache policy
      (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
      seconds).
      @param URL The URL for the request.
      @result A newly-created and autoreleased NSURLRequest instance.
  */
  @available(*, unavailable, renamed: "init(url:)", message: "Not available in Swift")
  class func requestWithURL(_ URL: URL) -> Self

  /**
      @property supportsSecureCoding
      @abstract Indicates that NSURLRequest implements the NSSecureCoding protocol.
      @result A BOOL value set to YES.
  */
  class var supportsSecureCoding: Bool { get }

  /**
      @method requestWithURL:cachePolicy:timeoutInterval:
      @abstract Allocates and initializes a NSURLRequest with the given
      URL and cache policy.
      @param URL The URL for the request. 
      @param cachePolicy The cache policy for the request. 
      @param timeoutInterval The timeout interval for the request. See the
      commentary for the <tt>timeoutInterval</tt> for more information on
      timeout intervals.
      @result A newly-created and autoreleased NSURLRequest instance. 
  */
  @available(*, unavailable, message: "superseded by import of -[NSURLRequest initWithURL:cachePolicy:timeoutInterval:]")
  convenience init(url URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval)

  /**
      @method requestWithURL:cachePolicy:timeoutInterval:
      @abstract Allocates and initializes a NSURLRequest with the given
      URL and cache policy.
      @param URL The URL for the request. 
      @param cachePolicy The cache policy for the request. 
      @param timeoutInterval The timeout interval for the request. See the
      commentary for the <tt>timeoutInterval</tt> for more information on
      timeout intervals.
      @result A newly-created and autoreleased NSURLRequest instance. 
  */
  @available(swift, obsoleted: 3, renamed: "init(url:cachePolicy:timeoutInterval:)")
  convenience init(URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval)

  /**
      @method requestWithURL:cachePolicy:timeoutInterval:
      @abstract Allocates and initializes a NSURLRequest with the given
      URL and cache policy.
      @param URL The URL for the request. 
      @param cachePolicy The cache policy for the request. 
      @param timeoutInterval The timeout interval for the request. See the
      commentary for the <tt>timeoutInterval</tt> for more information on
      timeout intervals.
      @result A newly-created and autoreleased NSURLRequest instance. 
  */
  @available(*, unavailable, renamed: "init(url:cachePolicy:timeoutInterval:)", message: "Not available in Swift")
  class func requestWithURL(_ URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval) -> Self

  /** 
      @method initWithURL:
      @abstract Initializes an NSURLRequest with the given URL. 
      @discussion Default values are used for cache policy
      (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
      seconds).
      @param URL The URL for the request. 
      @result An initialized NSURLRequest. 
  */
  convenience init(url URL: URL)

  /** 
      @method initWithURL:
      @abstract Initializes an NSURLRequest with the given URL. 
      @discussion Default values are used for cache policy
      (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
      seconds).
      @param URL The URL for the request. 
      @result An initialized NSURLRequest. 
  */
  @available(swift, obsoleted: 3, renamed: "init(url:)")
  convenience init(URL: URL)

  /** 
      @method initWithURL:
      @abstract Initializes an NSURLRequest with the given URL and
      cache policy.
      @discussion This is the designated initializer for the 
      NSURLRequest class.
      @param URL The URL for the request. 
      @param cachePolicy The cache policy for the request. 
      @param timeoutInterval The timeout interval for the request. See the
      commentary for the <tt>timeoutInterval</tt> for more information on
      timeout intervals.
      @result An initialized NSURLRequest. 
  */
  init(url URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval)

  /** 
      @method initWithURL:
      @abstract Initializes an NSURLRequest with the given URL and
      cache policy.
      @discussion This is the designated initializer for the 
      NSURLRequest class.
      @param URL The URL for the request. 
      @param cachePolicy The cache policy for the request. 
      @param timeoutInterval The timeout interval for the request. See the
      commentary for the <tt>timeoutInterval</tt> for more information on
      timeout intervals.
      @result An initialized NSURLRequest. 
  */
  @available(swift, obsoleted: 3, renamed: "init(url:cachePolicy:timeoutInterval:)")
  init(URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval)

  /** 
      @abstract Returns the URL of the receiver. 
      @result The URL of the receiver. 
  */
  var url: URL? { get }

  /** 
      @abstract Returns the URL of the receiver. 
      @result The URL of the receiver. 
  */
  @available(swift, obsoleted: 3, renamed: "url")
  var URL: URL? { get }

  /** 
      @abstract Returns the cache policy of the receiver.
      @result The cache policy of the receiver. 
  */
  var cachePolicy: NSURLRequest.CachePolicy { get }

  /** 
      @abstract Returns the timeout interval of the receiver.
      @discussion The timeout interval specifies the limit on the idle
      interval alloted to a request in the process of loading. The "idle
      interval" is defined as the period of time that has passed since the
      last instance of load activity occurred for a request that is in the
      process of loading. Hence, when an instance of load activity occurs
      (e.g. bytes are received from the network for a request), the idle
      interval for a request is reset to 0. If the idle interval ever
      becomes greater than or equal to the timeout interval, the request
      is considered to have timed out. This timeout interval is measured
      in seconds.
      @result The timeout interval of the receiver. 
  */
  var timeoutInterval: TimeInterval { get }

  /**
      @abstract The main document URL associated with this load.
      @discussion This URL is used for the cookie "same domain as main
      document" policy, and attributing the request as a sub-resource
      of a user-specified URL. There may also be other future uses.
      See setMainDocumentURL:
      @result The main document URL.
  */
  var mainDocumentURL: URL? { get }

  /**
   @abstract Returns the NSURLRequestNetworkServiceType associated with this request.
   @discussion  This will return NSURLNetworkServiceTypeDefault for requests that have
   not explicitly set a networkServiceType (using the setNetworkServiceType method).
   @result The NSURLRequestNetworkServiceType associated with this request.
   */
  @available(iOS 4.0, *)
  var networkServiceType: NSURLRequest.NetworkServiceType { get }

  /**
   @abstract returns whether a connection created with this request is allowed to use
   the built in cellular radios (if present).
   @result YES if the receiver is allowed to use the built in cellular radios to
   satify the request, NO otherwise.
   */
  @available(iOS 6.0, *)
  var allowsCellularAccess: Bool { get }

  /**
   @abstract returns whether a connection created with this request is allowed to use
   network interfaces which have been marked as expensive.
   @result YES if the receiver is allowed to use an interface marked as expensive to
   satify the request, NO otherwise.
   */
  @available(iOS 13.0, *)
  var allowsExpensiveNetworkAccess: Bool { get }

  /**
   @abstract returns whether a connection created with this request is allowed to use
   network interfaces which have been marked as constrained.
   @result YES if the receiver is allowed to use an interface marked as constrained to
   satify the request, NO otherwise.
   */
  @available(iOS 13.0, *)
  var allowsConstrainedNetworkAccess: Bool { get }

  /**
   @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
   racing without HTTP/3 service discovery.
   @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
   The default may be YES in a future OS update.
   */
  @available(iOS 14.5, *)
  var assumesHTTP3Capable: Bool { get }

  /**
   @abstract Returns the NSURLRequestAttribution associated with this request.
   @discussion This will return NSURLRequestAttributionDeveloper for requests that
   have not explicitly set an attribution.
   @result The NSURLRequestAttribution associated with this request.
   */
  @available(iOS 15.0, *)
  var attribution: NSURLRequest.Attribution { get }
  convenience init()
  @available(iOS 2.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
  @available(iOS 2.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 2.0, *)
  func mutableCopy(with zone: NSZone? = nil) -> Any
}

extension NSURLRequest : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

/** 
    @class NSMutableURLRequest
    
    @abstract An NSMutableURLRequest object represents a mutable URL load
    request in a manner independent of protocol and URL scheme.
    
    @discussion This specialization of NSURLRequest is provided to aid
    developers who may find it more convenient to mutate a single request
    object for a series of URL loads instead of creating an immutable
    NSURLRequest for each load. This programming model is supported by
    the following contract stipulation between NSMutableURLRequest and 
    NSURLConnection: NSURLConnection makes a deep copy of each 
    NSMutableURLRequest object passed to one of its initializers.    
    <p>NSMutableURLRequest is designed to be extended to support
    protocol-specific data by adding categories to access a property
    object provided in an interface targeted at protocol implementors.
    <ul>
    <li>Protocol implementors should direct their attention to the
    NSMutableURLRequestExtensibility category on
    NSMutableURLRequest for more information on how to provide
    extensions on NSMutableURLRequest to support protocol-specific
    request information.
    <li>Clients of this API who wish to create NSMutableURLRequest
    objects to load URL content should consult the protocol-specific
    NSMutableURLRequest categories that are available. The
    NSMutableHTTPURLRequest category on NSMutableURLRequest is an
    example.
    </ul>
*/
@available(iOS 2.0, *)
class NSMutableURLRequest : NSURLRequest {

  /** 
      @abstract The URL of the receiver.
  */
  var url: URL?

  /** 
      @abstract The URL of the receiver.
  */
  @available(swift, obsoleted: 3, renamed: "url")
  var URL: URL?

  /** 
      @abstract The cache policy of the receiver.
  */
  var cachePolicy: NSURLRequest.CachePolicy

  /** 
      @abstract Sets the timeout interval of the receiver.
      @discussion The timeout interval specifies the limit on the idle
      interval allotted to a request in the process of loading. The "idle
      interval" is defined as the period of time that has passed since the
      last instance of load activity occurred for a request that is in the
      process of loading. Hence, when an instance of load activity occurs
      (e.g. bytes are received from the network for a request), the idle
      interval for a request is reset to 0. If the idle interval ever
      becomes greater than or equal to the timeout interval, the request
      is considered to have timed out. This timeout interval is measured
      in seconds.
  */
  var timeoutInterval: TimeInterval

  /**
      @abstract Sets the main document URL
      @discussion The caller should pass the URL for an appropriate main
      document, if known. For example, when loading a web page, the URL
      of the main html document for the top-level frame should be
      passed.  This main document is used to implement the cookie "only
      from same domain as main document" policy, attributing this request
      as a sub-resource of a user-specified URL, and possibly other things
      in the future.
  */
  var mainDocumentURL: URL?

  /**
   @abstract Sets the NSURLRequestNetworkServiceType to associate with this request
   @discussion This method is used to provide the network layers with a hint as to the purpose
   of the request.  Most clients should not need to use this method.
   */
  @available(iOS 4.0, *)
  var networkServiceType: NSURLRequest.NetworkServiceType

  /**
   @abstract sets whether a connection created with this request is allowed to use
   the built in cellular radios (if present). 
   @discussion NO if the receiver should not be allowed to use the built in
   cellular radios to satisfy the request, YES otherwise.  The default is YES.
   */
  @available(iOS 6.0, *)
  var allowsCellularAccess: Bool

  /**
   @abstract sets whether a connection created with this request is allowed to use
   network interfaces which have been marked as expensive.
   @discussion NO if the receiver should not be allowed to use an interface marked as expensive to
   satify the request, YES otherwise.
   */
  @available(iOS 13.0, *)
  var allowsExpensiveNetworkAccess: Bool

  /**
   @abstract sets whether a connection created with this request is allowed to use
   network interfaces which have been marked as constrained.
   @discussion NO if the receiver should not be allowed to use an interface marked as constrained to
   satify the request, YES otherwise.
   */
  @available(iOS 13.0, *)
  var allowsConstrainedNetworkAccess: Bool

  /**
   @abstract returns whether we assume that server supports HTTP/3. Enables QUIC
   racing without HTTP/3 service discovery.
   @result YES if server endpoint is known to support HTTP/3. Defaults to NO.
   The default may be YES in a future OS update.
   */
  @available(iOS 14.5, *)
  var assumesHTTP3Capable: Bool

  /**
   @abstract Sets the NSURLRequestAttribution to associate with this request.
   @discussion Set to NSURLRequestAttributionUser if the URL was specified by the
   user. Defaults to NSURLRequestAttributionDeveloper.
   */
  @available(iOS 15.0, *)
  var attribution: NSURLRequest.Attribution

  /** 
      @method requestWithURL:
      @abstract Allocates and initializes an NSURLRequest with the given
      URL.
      @discussion Default values are used for cache policy
      (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
      seconds).
      @param URL The URL for the request.
      @result A newly-created and autoreleased NSURLRequest instance.
  */
  @available(*, unavailable, message: "superseded by import of -[NSURLRequest initWithURL:]")
  convenience init(url URL: URL)

  /**
      @method requestWithURL:cachePolicy:timeoutInterval:
      @abstract Allocates and initializes a NSURLRequest with the given
      URL and cache policy.
      @param URL The URL for the request. 
      @param cachePolicy The cache policy for the request. 
      @param timeoutInterval The timeout interval for the request. See the
      commentary for the <tt>timeoutInterval</tt> for more information on
      timeout intervals.
      @result A newly-created and autoreleased NSURLRequest instance. 
  */
  @available(*, unavailable, message: "superseded by import of -[NSURLRequest initWithURL:cachePolicy:timeoutInterval:]")
  convenience init(url URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval)

  /** 
      @method initWithURL:
      @abstract Initializes an NSURLRequest with the given URL. 
      @discussion Default values are used for cache policy
      (NSURLRequestUseProtocolCachePolicy) and timeout interval (60
      seconds).
      @param URL The URL for the request. 
      @result An initialized NSURLRequest. 
  */
  convenience init(url URL: URL)

  /** 
      @method initWithURL:
      @abstract Initializes an NSURLRequest with the given URL and
      cache policy.
      @discussion This is the designated initializer for the 
      NSURLRequest class.
      @param URL The URL for the request. 
      @param cachePolicy The cache policy for the request. 
      @param timeoutInterval The timeout interval for the request. See the
      commentary for the <tt>timeoutInterval</tt> for more information on
      timeout intervals.
      @result An initialized NSURLRequest. 
  */
  init(url URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval)
  convenience init()
  init?(coder: NSCoder)
}

/**
    @category NSURLRequest(NSHTTPURLRequest) 
    The NSHTTPURLRequest on NSURLRequest provides methods for accessing
    information specific to HTTP protocol requests.
*/
extension NSURLRequest {

  /**
      @abstract Returns the HTTP request method of the receiver. 
      @result the HTTP request method of the receiver. 
  */
  var httpMethod: String? { get }

  /**
      @abstract Returns the HTTP request method of the receiver. 
      @result the HTTP request method of the receiver. 
  */
  @available(swift, obsoleted: 3, renamed: "httpMethod")
  var HTTPMethod: String? { get }

  /**
      @abstract Returns a dictionary containing all the HTTP header fields
      of the receiver.
      @result a dictionary containing all the HTTP header fields of the
      receiver.
  */
  var allHTTPHeaderFields: [String : String]? { get }

  /** 
      @method valueForHTTPHeaderField:
      @abstract Returns the value which corresponds to the given header
      field. Note that, in keeping with the HTTP RFC, HTTP header field
      names are case-insensitive.
      @param field the header field name to use for the lookup
      (case-insensitive).
      @result the value associated with the given header field, or nil if
      there is no value associated with the given header field.
  */
  func value(forHTTPHeaderField field: String) -> String?

  /** 
      @method valueForHTTPHeaderField:
      @abstract Returns the value which corresponds to the given header
      field. Note that, in keeping with the HTTP RFC, HTTP header field
      names are case-insensitive.
      @param field the header field name to use for the lookup
      (case-insensitive).
      @result the value associated with the given header field, or nil if
      there is no value associated with the given header field.
  */
  @available(swift, obsoleted: 3, renamed: "value(forHTTPHeaderField:)")
  func valueForHTTPHeaderField(_ field: String) -> String?

  /**
      @abstract Returns the request body data of the receiver. 
      @discussion This data is sent as the message body of the request, as
      in done in an HTTP POST request.
      @result The request body data of the receiver. 
  */
  var httpBody: Data? { get }

  /**
      @abstract Returns the request body data of the receiver. 
      @discussion This data is sent as the message body of the request, as
      in done in an HTTP POST request.
      @result The request body data of the receiver. 
  */
  @available(swift, obsoleted: 3, renamed: "httpBody")
  var HTTPBody: Data? { get }

  /**
      @abstract Returns the request body stream of the receiver
      if any has been set
      @discussion The stream is returned for examination only; it is
      not safe for the caller to manipulate the stream in any way.  Also
      note that the HTTPBodyStream and HTTPBody are mutually exclusive - only
      one can be set on a given request.  Also note that the body stream is
      preserved across copies, but is LOST when the request is coded via the 
      NSCoding protocol
      @result The request body stream of the receiver.
  */
  var httpBodyStream: InputStream? { get }

  /**
      @abstract Returns the request body stream of the receiver
      if any has been set
      @discussion The stream is returned for examination only; it is
      not safe for the caller to manipulate the stream in any way.  Also
      note that the HTTPBodyStream and HTTPBody are mutually exclusive - only
      one can be set on a given request.  Also note that the body stream is
      preserved across copies, but is LOST when the request is coded via the 
      NSCoding protocol
      @result The request body stream of the receiver.
  */
  @available(swift, obsoleted: 3, renamed: "httpBodyStream")
  var HTTPBodyStream: InputStream? { get }

  /**
      @abstract Determine whether default cookie handling will happen for 
      this request.
      @discussion NOTE: This value is not used prior to 10.3
      @result YES if cookies will be sent with and set for this request; 
      otherwise NO.
  */
  var httpShouldHandleCookies: Bool { get }

  /**
      @abstract Determine whether default cookie handling will happen for 
      this request.
      @discussion NOTE: This value is not used prior to 10.3
      @result YES if cookies will be sent with and set for this request; 
      otherwise NO.
  */
  @available(swift, obsoleted: 3, renamed: "httpShouldHandleCookies")
  var HTTPShouldHandleCookies: Bool { get }

  /**
   @abstract Reports whether the receiver is not expected to wait for the
   previous response before transmitting.
   @result YES if the receiver should transmit before the previous response
   is received.  NO if the receiver should wait for the previous response
   before transmitting.
   */
  @available(iOS 4.0, *)
  var httpShouldUsePipelining: Bool { get }

  /**
   @abstract Reports whether the receiver is not expected to wait for the
   previous response before transmitting.
   @result YES if the receiver should transmit before the previous response
   is received.  NO if the receiver should wait for the previous response
   before transmitting.
   */
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "httpShouldUsePipelining")
  var HTTPShouldUsePipelining: Bool { get }
}

/**
    @category NSMutableURLRequest(NSMutableHTTPURLRequest) 
    The NSMutableHTTPURLRequest on NSMutableURLRequest provides methods
    for configuring information specific to HTTP protocol requests.
*/
extension NSMutableURLRequest {

  /**
      @abstract Sets the HTTP request method of the receiver. 
  */
  var httpMethod: String

  /**
      @abstract Sets the HTTP request method of the receiver. 
  */
  @available(swift, obsoleted: 3, renamed: "httpMethod")
  var HTTPMethod: String

  /**
      @abstract Sets the HTTP header fields of the receiver to the given
      dictionary.
      @discussion This method replaces all header fields that may have
      existed before this method call. 
      <p>Since HTTP header fields must be string values, each object and
      key in the dictionary passed to this method must answer YES when
      sent an <tt>-isKindOfClass:[NSString class]</tt> message. If either
      the key or value for a key-value pair answers NO when sent this
      message, the key-value pair is skipped.
  */
  var allHTTPHeaderFields: [String : String]?

  /** 
      @method setValue:forHTTPHeaderField:
      @abstract Sets the value of the given HTTP header field.
      @discussion If a value was previously set for the given header
      field, that value is replaced with the given value. Note that, in
      keeping with the HTTP RFC, HTTP header field names are
      case-insensitive.
      @param value the header field value. 
      @param field the header field name (case-insensitive). 
  */
  func setValue(_ value: String?, forHTTPHeaderField field: String)

  /** 
      @method addValue:forHTTPHeaderField:
      @abstract Adds an HTTP header field in the current header
      dictionary.
      @discussion This method provides a way to add values to header
      fields incrementally. If a value was previously set for the given
      header field, the given value is appended to the previously-existing
      value. The appropriate field delimiter, a comma in the case of HTTP,
      is added by the implementation, and should not be added to the given
      value by the caller. Note that, in keeping with the HTTP RFC, HTTP
      header field names are case-insensitive.
      @param value the header field value. 
      @param field the header field name (case-insensitive). 
  */
  func addValue(_ value: String, forHTTPHeaderField field: String)

  /**
      @abstract Sets the request body data of the receiver.
      @discussion This data is sent as the message body of the request, as
      in done in an HTTP POST request.
  */
  var httpBody: Data?

  /**
      @abstract Sets the request body data of the receiver.
      @discussion This data is sent as the message body of the request, as
      in done in an HTTP POST request.
  */
  @available(swift, obsoleted: 3, renamed: "httpBody")
  var HTTPBody: Data?

  /**
      @abstract Sets the request body to be the contents of the given stream. 
      @discussion The provided stream should be unopened; the request will take
      over the stream's delegate.  The entire stream's contents will be 
      transmitted as the HTTP body of the request.  Note that the body stream
      and the body data (set by setHTTPBody:, above) are mutually exclusive 
      - setting one will clear the other.
  */
  var httpBodyStream: InputStream?

  /**
      @abstract Sets the request body to be the contents of the given stream. 
      @discussion The provided stream should be unopened; the request will take
      over the stream's delegate.  The entire stream's contents will be 
      transmitted as the HTTP body of the request.  Note that the body stream
      and the body data (set by setHTTPBody:, above) are mutually exclusive 
      - setting one will clear the other.
  */
  @available(swift, obsoleted: 3, renamed: "httpBodyStream")
  var HTTPBodyStream: InputStream?

  /**
      @abstract Decide whether default cookie handling will happen for 
      this request (YES if cookies should be sent with and set for this request;
      otherwise NO).
      @discussion The default is YES - in other words, cookies are sent from and 
      stored to the cookie manager by default.
      NOTE: In releases prior to 10.3, this value is ignored
  */
  var httpShouldHandleCookies: Bool

  /**
      @abstract Decide whether default cookie handling will happen for 
      this request (YES if cookies should be sent with and set for this request;
      otherwise NO).
      @discussion The default is YES - in other words, cookies are sent from and 
      stored to the cookie manager by default.
      NOTE: In releases prior to 10.3, this value is ignored
  */
  @available(swift, obsoleted: 3, renamed: "httpShouldHandleCookies")
  var HTTPShouldHandleCookies: Bool

  /**
   @abstract Sets whether the request should not wait for the previous response 
   before transmitting (YES if the receiver should transmit before the previous response is
   received.  NO to wait for the previous response before transmitting)
   @discussion Calling this method with a YES value does not guarantee HTTP 
   pipelining behavior.  This method may have no effect if an HTTP proxy is
   configured, or if the HTTP request uses an unsafe request method (e.g., POST
   requests will not pipeline).  Pipelining behavior also may not begin until
   the second request on a given TCP connection.  There may be other situations
   where pipelining does not occur even though YES was set.
   HTTP 1.1 allows the client to send multiple requests to the server without
   waiting for a response.  Though HTTP 1.1 requires support for pipelining,
   some servers report themselves as being HTTP 1.1 but do not support
   pipelining (disconnecting, sending resources misordered, omitting part of
   a resource, etc.).
   */
  @available(iOS 4.0, *)
  var httpShouldUsePipelining: Bool

  /**
   @abstract Sets whether the request should not wait for the previous response 
   before transmitting (YES if the receiver should transmit before the previous response is
   received.  NO to wait for the previous response before transmitting)
   @discussion Calling this method with a YES value does not guarantee HTTP 
   pipelining behavior.  This method may have no effect if an HTTP proxy is
   configured, or if the HTTP request uses an unsafe request method (e.g., POST
   requests will not pipeline).  Pipelining behavior also may not begin until
   the second request on a given TCP connection.  There may be other situations
   where pipelining does not occur even though YES was set.
   HTTP 1.1 allows the client to send multiple requests to the server without
   waiting for a response.  Though HTTP 1.1 requires support for pipelining,
   some servers report themselves as being HTTP 1.1 but do not support
   pipelining (disconnecting, sending resources misordered, omitting part of
   a resource, etc.).
   */
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "httpShouldUsePipelining")
  var HTTPShouldUsePipelining: Bool
}
