@_exported import CoreFoundation

@_nonSendable(_assumed) class NSTimeZone : NSObject, NSCopying, NSSecureCoding, @unchecked Sendable {
  var name: String { get }
  var data: Data { get }
  func secondsFromGMT(for aDate: Date) -> Int
  @available(swift, obsoleted: 3, renamed: "secondsFromGMT(for:)")
  func secondsFromGMTForDate(_ aDate: Date) -> Int
  func abbreviation(for aDate: Date) -> String?
  @available(swift, obsoleted: 3, renamed: "abbreviation(for:)")
  func abbreviationForDate(_ aDate: Date) -> String?
  func isDaylightSavingTime(for aDate: Date) -> Bool
  @available(swift, obsoleted: 3, renamed: "isDaylightSavingTime(for:)")
  func isDaylightSavingTimeForDate(_ aDate: Date) -> Bool
  @available(iOS 2.0, *)
  func daylightSavingTimeOffset(for aDate: Date) -> TimeInterval
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "daylightSavingTimeOffset(for:)")
  func daylightSavingTimeOffsetForDate(_ aDate: Date) -> TimeInterval
  @available(iOS 2.0, *)
  func nextDaylightSavingTimeTransition(after aDate: Date) -> Date?
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "nextDaylightSavingTimeTransition(after:)")
  func nextDaylightSavingTimeTransitionAfterDate(_ aDate: Date) -> Date?
  init()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

extension NSTimeZone : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}
extension NSTimeZone {
  class var system: TimeZone { get }
  @available(swift, obsoleted: 3, renamed: "system")
  class var systemTimeZone: TimeZone { get }
  class func resetSystemTimeZone()
  class var `default`: TimeZone
  @available(swift, obsoleted: 3, renamed: "default")
  class var defaultTimeZone: TimeZone
  class var local: TimeZone { get }
  @available(swift, obsoleted: 3, renamed: "local")
  class var localTimeZone: TimeZone { get }
  class var knownTimeZoneNames: [String] { get }
  @available(iOS 4.0, *)
  class var abbreviationDictionary: [String : String]
  @available(iOS 4.0, *)
  class var timeZoneDataVersion: String { get }
  var secondsFromGMT: Int { get }
  var abbreviation: String? { get }
  var isDaylightSavingTime: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isDaylightSavingTime")
  var daylightSavingTime: Bool { get }
  @available(iOS 2.0, *)
  var daylightSavingTimeOffset: TimeInterval { get }
  @available(iOS 2.0, *)
  var nextDaylightSavingTimeTransition: Date? { get }
  var description: String { get }
  func isEqual(to aTimeZone: TimeZone) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToTimeZone(_ aTimeZone: TimeZone) -> Bool
  @available(iOS 2.0, *)
  func localizedName(_ style: NSTimeZone.NameStyle, locale: Locale?) -> String?
}
@available(swift, obsoleted: 3, renamed: "NSTimeZone.NameStyle")
typealias NSTimeZoneNameStyle = NSTimeZone.NameStyle
extension NSTimeZone {
  @_nonSendable(_assumed) enum NameStyle : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case standard
    @available(swift, obsoleted: 3, renamed: "standard")
    static var Standard: NSTimeZone.NameStyle { get }
    case shortStandard
    @available(swift, obsoleted: 3, renamed: "shortStandard")
    static var ShortStandard: NSTimeZone.NameStyle { get }
    case daylightSaving
    @available(swift, obsoleted: 3, renamed: "daylightSaving")
    static var DaylightSaving: NSTimeZone.NameStyle { get }
    case shortDaylightSaving
    @available(swift, obsoleted: 3, renamed: "shortDaylightSaving")
    static var ShortDaylightSaving: NSTimeZone.NameStyle { get }
    case generic
    @available(swift, obsoleted: 3, renamed: "generic")
    static var Generic: NSTimeZone.NameStyle { get }
    case shortGeneric
    @available(swift, obsoleted: 3, renamed: "shortGeneric")
    static var ShortGeneric: NSTimeZone.NameStyle { get }
  }
}
extension NSTimeZone {
  @available(*, unavailable, message: "superseded by import of -[NSTimeZone(NSTimeZoneCreation) initWithName:]")
  convenience init?(name tzName: String)
  @available(*, unavailable, renamed: "init(name:)", message: "Not available in Swift")
  class func timeZoneWithName(_ tzName: String) -> Self?
  @available(*, unavailable, message: "superseded by import of -[NSTimeZone(NSTimeZoneCreation) initWithName:data:]")
  convenience init?(name tzName: String, data aData: Data?)
  @available(*, unavailable, renamed: "init(name:data:)", message: "Not available in Swift")
  class func timeZoneWithName(_ tzName: String, data aData: Data?) -> Self?
  init?(name tzName: String)
  init?(name tzName: String, data aData: Data?)
  convenience init(forSecondsFromGMT seconds: Int)
  @available(*, unavailable, renamed: "init(forSecondsFromGMT:)", message: "Not available in Swift")
  class func timeZoneForSecondsFromGMT(_ seconds: Int) -> Self
  convenience init?(abbreviation: String)
  @available(*, unavailable, renamed: "init(abbreviation:)", message: "Not available in Swift")
  class func timeZoneWithAbbreviation(_ abbreviation: String) -> Self?
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSSystemTimeZoneDidChange")
let NSSystemTimeZoneDidChangeNotification: NSNotification.Name
extension NSNotification.Name {
  @available(iOS 2.0, *)
  static let NSSystemTimeZoneDidChange: NSNotification.Name
}
