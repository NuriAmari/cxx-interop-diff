@_exported import CoreFoundation


/****************	Immutable Dictionary	****************/
@_nonSendable(_assumed) class NSDictionary : NSObject, NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration {
  var count: Int { get }
  func object(forKey aKey: Any) -> Any?
  @available(swift, obsoleted: 3, renamed: "object(forKey:)")
  func objectForKey(_ aKey: Any) -> Any?
  func keyEnumerator() -> NSEnumerator
  init()
  init(objects: UnsafePointer<AnyObject>?, forKeys keys: UnsafePointer<NSCopying>?, count cnt: Int)
  init?(coder: NSCoder)
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func mutableCopy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  func countByEnumerating(with state: UnsafeMutablePointer<NSFastEnumerationState>, objects buffer: AutoreleasingUnsafeMutablePointer<AnyObject?>, count len: Int) -> Int
}

extension NSDictionary : ExpressibleByDictionaryLiteral {
  required convenience init(dictionaryLiteral elements: (Any, Any)...)
  typealias Key = Any
  typealias Value = Any
}

extension NSDictionary : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

extension NSDictionary : Sequence {
  final class Iterator : IteratorProtocol {
    final func next() -> (key: Any, value: Any)?
    typealias Element = (key: Any, value: Any)
  }
  @objc dynamic subscript(key: Any) -> Any? { get }
  /// Return an *iterator* over the elements of this *sequence*.
  ///
  /// - Complexity: O(1).
  func makeIterator() -> NSDictionary.Iterator
  /// A value less than or equal to the number of elements in the collection.
  ///
  /// - Complexity: O(1).
  @_alwaysEmitIntoClient @nonobjc var underestimatedCount: Int { get }
  typealias Element = (key: Any, value: Any)
}

extension NSDictionary {
  /// Initializes a newly allocated dictionary and adds to it objects from
  /// another given dictionary.
  ///
  /// - Returns: An initialized dictionary--which might be different
  ///   than the original receiver--containing the keys and values
  ///   found in `otherDictionary`.
  @objc(__swiftInitWithDictionary_NSDictionary:) dynamic convenience init(dictionary otherDictionary: __shared NSDictionary)
}

extension NSDictionary : CustomReflectable {
  var customMirror: Mirror { get }
}

@available(*, unavailable)
extension NSDictionary : @unchecked Sendable {
}

@available(iOS, unavailable, introduced: 7)
@available(*, unavailable)
extension NSDictionary.Iterator : @unchecked Sendable {
}
extension NSDictionary {
  var allKeys: [Any] { get }
  func allKeys(for anObject: Any) -> [Any]
  @available(swift, obsoleted: 3, renamed: "allKeys(for:)")
  func allKeysForObject(_ anObject: Any) -> [Any]
  var allValues: [Any] { get }
  var description: String { get }
  var descriptionInStringsFileFormat: String { get }
  func description(withLocale locale: Any?) -> String
  @available(swift, obsoleted: 3, renamed: "description(withLocale:)")
  func descriptionWithLocale(_ locale: Any?) -> String
  func description(withLocale locale: Any?, indent level: Int) -> String
  @available(swift, obsoleted: 3, renamed: "description(withLocale:indent:)")
  func descriptionWithLocale(_ locale: Any?, indent level: Int) -> String
  func isEqual(to otherDictionary: [AnyHashable : Any]) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToDictionary(_ otherDictionary: [AnyHashable : Any]) -> Bool
  func objectEnumerator() -> NSEnumerator
  func objects(forKeys keys: [Any], notFoundMarker marker: Any) -> [Any]
  @available(swift, obsoleted: 3, renamed: "objects(forKeys:notFoundMarker:)")
  func objectsForKeys(_ keys: [Any], notFoundMarker marker: Any) -> [Any]
  @available(iOS 11.0, *)
  func write(to url: URL) throws
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "write(to:)")
  func writeToURL(_ url: URL) throws
  func keysSortedByValue(using comparator: Selector) -> [Any]
  @available(swift, obsoleted: 3, renamed: "keysSortedByValue(using:)")
  func keysSortedByValueUsingSelector(_ comparator: Selector) -> [Any]
  @available(iOS 5.0, *)
  @available(*, unavailable, message: "Use 'allKeys' and/or 'allValues' instead")
  func getObjects(_ objects: AutoreleasingUnsafeMutablePointer<AnyObject>?, andKeys keys: AutoreleasingUnsafeMutablePointer<AnyObject>?, count: Int)
  subscript(key: NSCopying) -> Any? { get }
  @available(iOS 6.0, *)
  @available(*, unavailable, message: "use subscripting")
  func objectForKeyedSubscript(_ key: NSCopying) -> Any?
  @available(iOS 4.0, *)
  func enumerateKeysAndObjects(_ block: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateKeysAndObjects(_:)")
  func enumerateKeysAndObjectsUsingBlock(_ block: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func enumerateKeysAndObjects(options opts: NSEnumerationOptions = [], using block: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateKeysAndObjects(options:using:)")
  func enumerateKeysAndObjectsWithOptions(_ opts: NSEnumerationOptions = [], usingBlock block: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func keysSortedByValue(comparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "keysSortedByValue(comparator:)")
  func keysSortedByValueUsingComparator(_ cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  func keysSortedByValue(options opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "keysSortedByValue(options:usingComparator:)")
  func keysSortedByValueWithOptions(_ opts: NSSortOptions = [], usingComparator cmptr: (Any, Any) -> ComparisonResult) -> [Any]
  @available(iOS 4.0, *)
  func keysOfEntries(passingTest predicate: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "keysOfEntries(passingTest:)")
  func keysOfEntriesPassingTest(_ predicate: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
  @available(iOS 4.0, *)
  func keysOfEntries(options opts: NSEnumerationOptions = [], passingTest predicate: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "keysOfEntries(options:passingTest:)")
  func keysOfEntriesWithOptions(_ opts: NSEnumerationOptions = [], passingTest predicate: (Any, Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
}
extension NSDictionary {

  /// This method is unsafe because it could potentially cause buffer overruns. You should use -getObjects:andKeys:count:
  @available(*, unavailable, message: "Use 'allKeys' and/or 'allValues' instead")
  @available(iOS, introduced: 2.0, deprecated: 11.0, message: "Use -getObjects:andKeys:count: instead")
  func getObjects(_ objects: AutoreleasingUnsafeMutablePointer<AnyObject>?, andKeys keys: AutoreleasingUnsafeMutablePointer<AnyObject>?)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  @available(*, unavailable, message: "superseded by import of -[NSDictionary(NSDeprecated) initWithContentsOfFile:]")
  /*not inherited*/ init?(contentsOfFile path: String)
  @available(*, unavailable, renamed: "init(contentsOfFile:)", message: "Not available in Swift")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  class func dictionaryWithContentsOfFile(_ path: String) -> [AnyHashable : Any]?
  @available(iOS, introduced: 2.0, deprecated: 100000)
  @available(*, unavailable, message: "superseded by import of -[NSDictionary(NSDeprecated) initWithContentsOfURL:]")
  /*not inherited*/ init?(contentsOf url: URL)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  /*not inherited*/ init?(contentsOfURL url: URL)
  @available(*, unavailable, renamed: "init(contentsOf:)", message: "Not available in Swift")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  class func dictionaryWithContentsOfURL(_ url: URL) -> [AnyHashable : Any]?
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOfFile path: String)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOf url: URL)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOfURL url: URL)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func write(toFile path: String, atomically useAuxiliaryFile: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(toFile:atomically:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func writeToFile(_ path: String, atomically useAuxiliaryFile: Bool) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func write(to url: URL, atomically: Bool) -> Bool
  @available(swift, obsoleted: 3, renamed: "write(to:atomically:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func writeToURL(_ url: URL, atomically: Bool) -> Bool
}
extension NSDictionary {
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func dictionary() -> Self
  convenience init(object: Any, forKey key: NSCopying)
  @available(*, unavailable, renamed: "init(object:forKey:)", message: "Not available in Swift")
  class func dictionaryWithObject(_ object: Any, forKey key: NSCopying) -> Self
  @available(*, unavailable, renamed: "init(objects:forKeys:count:)", message: "Not available in Swift")
  class func dictionaryWithObjects(_ objects: UnsafePointer<AnyObject>?, forKeys keys: UnsafePointer<NSCopying>?, count cnt: Int) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSDictionary(NSDictionaryCreation) initWithDictionary:]")
  convenience init(dictionary dict: [AnyHashable : Any])
  @available(*, unavailable, renamed: "init(dictionary:)", message: "Not available in Swift")
  class func dictionaryWithDictionary(_ dict: [AnyHashable : Any]) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSDictionary(NSDictionaryCreation) initWithObjects:forKeys:]")
  convenience init(objects: [Any], forKeys keys: [NSCopying])
  @available(*, unavailable, renamed: "init(objects:forKeys:)", message: "Not available in Swift")
  class func dictionaryWithObjects(_ objects: [Any], forKeys keys: [NSCopying]) -> Self
  convenience init(dictionary otherDictionary: [AnyHashable : Any])
  convenience init(dictionary otherDictionary: [AnyHashable : Any], copyItems flag: Bool)
  convenience init(objects: [Any], forKeys keys: [NSCopying])
  @available(iOS 11.0, *)
  convenience init(contentsOf url: URL, error: ()) throws
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:error:)")
  convenience init(contentsOfURL url: URL, error: ()) throws
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:error:)")
  @available(*, unavailable, message: "Use initializer instead")
  /*not inherited*/ init(contentsOfURL url: URL, error: ()) throws
  @available(iOS 11.0, *)
  @available(*, unavailable, renamed: "init(contentsOf:error:)", message: "Not available in Swift")
  @available(*, unavailable, message: "Use initializer instead")
  class func dictionaryWithContentsOfURL(_ url: URL, error: ()) throws -> [String : Any]
}

/****************	Mutable Dictionary	****************/
@_nonSendable(_assumed) class NSMutableDictionary : NSDictionary {
  func removeObject(forKey aKey: Any)
  @available(swift, obsoleted: 3, renamed: "removeObject(forKey:)")
  func removeObjectForKey(_ aKey: Any)
  func setObject(_ anObject: Any, forKey aKey: NSCopying)
  init()
  init(capacity numItems: Int)
  init?(coder: NSCoder)
  convenience init(objects: UnsafePointer<AnyObject>?, forKeys keys: UnsafePointer<NSCopying>?, count cnt: Int)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOfFile path: String)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  convenience init?(contentsOf url: URL)
  convenience init(object: Any, forKey key: NSCopying)
  @available(*, unavailable, message: "superseded by import of -[NSDictionary(NSDictionaryCreation) initWithDictionary:]")
  convenience init(dictionary dict: [AnyHashable : Any])
  @available(*, unavailable, message: "superseded by import of -[NSDictionary(NSDictionaryCreation) initWithObjects:forKeys:]")
  convenience init(objects: [Any], forKeys keys: [NSCopying])
  convenience init(dictionary otherDictionary: [AnyHashable : Any])
  convenience init(dictionary otherDictionary: [AnyHashable : Any], copyItems flag: Bool)
  convenience init(objects: [Any], forKeys keys: [NSCopying])
  @available(iOS 11.0, *)
  convenience init(contentsOf url: URL, error: ()) throws
}

extension NSMutableDictionary {
  @objc override dynamic subscript(key: Any) -> Any?
}

@available(*, unavailable)
extension NSMutableDictionary : @unchecked Sendable {
}
extension NSMutableDictionary {
  func addEntries(from otherDictionary: [AnyHashable : Any])
  @available(swift, obsoleted: 3, renamed: "addEntries(from:)")
  func addEntriesFromDictionary(_ otherDictionary: [AnyHashable : Any])
  func removeAllObjects()
  func removeObjects(forKeys keyArray: [Any])
  @available(swift, obsoleted: 3, renamed: "removeObjects(forKeys:)")
  func removeObjectsForKeys(_ keyArray: [Any])
  func setDictionary(_ otherDictionary: [AnyHashable : Any])
  subscript(key: NSCopying) -> Any?
  @available(iOS 6.0, *)
  @available(*, unavailable, message: "use subscripting")
  func setObject(_ obj: Any?, forKeyedSubscript key: NSCopying)
}
extension NSMutableDictionary {
  @available(*, unavailable, renamed: "init(capacity:)", message: "Not available in Swift")
  class func dictionaryWithCapacity(_ numItems: Int) -> Self
  @available(*, unavailable, renamed: "init(contentsOfFile:)", message: "Not available in Swift")
  class func dictionaryWithContentsOfFile(_ path: String) -> NSMutableDictionary?
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  /*not inherited*/ init?(contentsOfURL url: URL)
  @available(*, unavailable, renamed: "init(contentsOf:)", message: "Not available in Swift")
  class func dictionaryWithContentsOfURL(_ url: URL) -> NSMutableDictionary?
  @available(swift, obsoleted: 3, renamed: "init(contentsOf:)")
  convenience init?(contentsOfURL url: URL)
}
extension NSDictionary {
  @available(iOS 6.0, *)
  class func sharedKeySet(forKeys keys: [NSCopying]) -> Any
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "sharedKeySet(forKeys:)")
  class func sharedKeySetForKeys(_ keys: [NSCopying]) -> Any
}
extension NSMutableDictionary {
  @available(iOS 6.0, *)
  /*not inherited*/ init(sharedKeySet keyset: Any)
  @available(iOS 6.0, *)
  @available(*, unavailable, renamed: "init(sharedKeySet:)", message: "Not available in Swift")
  class func dictionaryWithSharedKeySet(_ keyset: Any) -> NSMutableDictionary
}
extension NSDictionary : NSFastEnumeration {
  @available(swift, obsoleted: 3, renamed: "countByEnumerating(with:objects:count:)")
  func countByEnumeratingWithState(_ state: UnsafeMutablePointer<NSFastEnumerationState>, objects buffer: AutoreleasingUnsafeMutablePointer<AnyObject?>, count len: Int) -> Int
}
