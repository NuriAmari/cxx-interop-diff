@_exported import CoreFoundation

typealias NSErrorDomain = NSString
let NSCocoaErrorDomain: String
let NSPOSIXErrorDomain: String
let NSOSStatusErrorDomain: String
let NSMachErrorDomain: String
@available(swift, obsoleted: 3, renamed: "NSError.UserInfoKey")
typealias NSErrorUserInfoKey = NSError.UserInfoKey
extension NSError {
  typealias UserInfoKey = NSString
}
let NSUnderlyingErrorKey: String
@available(iOS 14.5, *)
let NSMultipleUnderlyingErrorsKey: String
let NSLocalizedDescriptionKey: String
let NSLocalizedFailureReasonErrorKey: String
let NSLocalizedRecoverySuggestionErrorKey: String
let NSLocalizedRecoveryOptionsErrorKey: String
let NSRecoveryAttempterErrorKey: String
let NSHelpAnchorErrorKey: String
@available(iOS 2.0, *)
let NSDebugDescriptionErrorKey: String
@available(iOS 11.0, *)
let NSLocalizedFailureErrorKey: String
let NSStringEncodingErrorKey: String
let NSURLErrorKey: String
let NSFilePathErrorKey: String
@_nonSendable(_assumed) class NSError : NSObject, NSCopying, NSSecureCoding, @unchecked Sendable {
  init(domain: String, code: Int, userInfo dict: [String : Any]? = nil)
  @available(*, unavailable, renamed: "init(domain:code:userInfo:)", message: "Not available in Swift")
  @available(*, unavailable, message: "Not available in Swift")
  class func errorWithDomain(_ domain: String, code: Int, userInfo dict: [String : Any]? = nil) -> Self
  var domain: String { get }
  var code: Int { get }
  var userInfo: [String : Any] { get }
  var localizedDescription: String { get }
  var localizedFailureReason: String? { get }
  var localizedRecoverySuggestion: String? { get }
  var localizedRecoveryOptions: [String]? { get }
  var recoveryAttempter: Any? { get }
  var helpAnchor: String? { get }
  @available(iOS 14.5, *)
  var underlyingErrors: [Error] { get }
  @available(iOS 9.0, *)
  class func setUserInfoValueProvider(forDomain errorDomain: String, provider: (@Sendable (Error, String) -> Any?)? = nil)
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "setUserInfoValueProvider(forDomain:provider:)")
  class func setUserInfoValueProviderForDomain(_ errorDomain: String, provider: (@Sendable (Error, String) -> Any?)? = nil)
  @available(iOS 9.0, *)
  class func userInfoValueProvider(forDomain errorDomain: String) -> ((Error, String) -> Any?)?
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "userInfoValueProvider(forDomain:)")
  class func userInfoValueProviderForDomain(_ errorDomain: String) -> ((Error, String) -> Any?)?
  convenience init()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

extension NSError : Error {
  @nonobjc var _domain: String { get }
  @nonobjc var _code: Int { get }
  @nonobjc var _userInfo: AnyObject? { get }
  /// The "embedded" NSError is itself.
  @nonobjc func _getEmbeddedNSError() -> AnyObject?
}
extension NSObject {
  class func attemptRecovery(fromError error: Error, optionIndex recoveryOptionIndex: Int, delegate: Any?, didRecoverSelector: Selector?, contextInfo: UnsafeMutableRawPointer?)
  func attemptRecovery(fromError error: Error, optionIndex recoveryOptionIndex: Int, delegate: Any?, didRecoverSelector: Selector?, contextInfo: UnsafeMutableRawPointer?)
  @available(swift, obsoleted: 3, renamed: "attemptRecovery(fromError:optionIndex:delegate:didRecoverSelector:contextInfo:)")
  class func attemptRecoveryFromError(_ error: Error, optionIndex recoveryOptionIndex: Int, delegate: Any?, didRecoverSelector: Selector?, contextInfo: UnsafeMutableRawPointer?)
  @available(swift, obsoleted: 3, renamed: "attemptRecovery(fromError:optionIndex:delegate:didRecoverSelector:contextInfo:)")
  func attemptRecoveryFromError(_ error: Error, optionIndex recoveryOptionIndex: Int, delegate: Any?, didRecoverSelector: Selector?, contextInfo: UnsafeMutableRawPointer?)
  class func attemptRecovery(fromError error: Error, optionIndex recoveryOptionIndex: Int) -> Bool
  func attemptRecovery(fromError error: Error, optionIndex recoveryOptionIndex: Int) -> Bool
  @available(swift, obsoleted: 3, renamed: "attemptRecovery(fromError:optionIndex:)")
  class func attemptRecoveryFromError(_ error: Error, optionIndex recoveryOptionIndex: Int) -> Bool
  @available(swift, obsoleted: 3, renamed: "attemptRecovery(fromError:optionIndex:)")
  func attemptRecoveryFromError(_ error: Error, optionIndex recoveryOptionIndex: Int) -> Bool
}
