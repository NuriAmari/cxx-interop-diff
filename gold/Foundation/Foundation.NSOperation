@_exported import CoreFoundation

@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "Operation")
typealias NSOperation = Operation
@available(iOS 2.0, *)
@_nonSendable(_assumed) class Operation : NSObject {
  func start()
  func main()
  var isCancelled: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isCancelled")
  var cancelled: Bool { get }
  func cancel()
  var isExecuting: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isExecuting")
  var executing: Bool { get }
  var isFinished: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isFinished")
  var finished: Bool { get }
  var isConcurrent: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isConcurrent")
  var concurrent: Bool { get }
  @available(iOS 7.0, *)
  var isAsynchronous: Bool { get }
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "isAsynchronous")
  var asynchronous: Bool { get }
  var isReady: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isReady")
  var ready: Bool { get }
  func addDependency(_ op: Operation)
  func removeDependency(_ op: Operation)
  var dependencies: [Operation] { get }
  var queuePriority: Operation.QueuePriority
  @available(iOS 4.0, *)
  var completionBlock: (() -> Void)?
  @available(iOS 4.0, *)
  @_unavailableFromAsync(message: "Use completionBlock or a dependent Operation instead") func waitUntilFinished()
  @available(iOS, introduced: 4.0, deprecated: 8.0, message: "Not supported")
  var threadPriority: Double
  @available(iOS 8.0, *)
  var qualityOfService: QualityOfService
  @available(iOS 8.0, *)
  var name: String?
  init()
}

@available(*, unavailable)
extension Operation : @unchecked Sendable {
}
@available(swift, obsoleted: 3, renamed: "Operation.QueuePriority")
typealias NSOperationQueuePriority = Operation.QueuePriority
extension Operation {
  @_nonSendable(_assumed) enum QueuePriority : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case veryLow
    @available(swift, obsoleted: 3, renamed: "veryLow")
    static var VeryLow: Operation.QueuePriority { get }
    case low
    @available(swift, obsoleted: 3, renamed: "low")
    static var Low: Operation.QueuePriority { get }
    case normal
    @available(swift, obsoleted: 3, renamed: "normal")
    static var Normal: Operation.QueuePriority { get }
    case high
    @available(swift, obsoleted: 3, renamed: "high")
    static var High: Operation.QueuePriority { get }
    case veryHigh
    @available(swift, obsoleted: 3, renamed: "veryHigh")
    static var VeryHigh: Operation.QueuePriority { get }
  }
}
@available(iOS 4.0, *)
@_nonSendable(_assumed) class BlockOperation : Operation {
  convenience init(block: @escaping () -> Void)
  @available(*, unavailable, renamed: "init(block:)", message: "Not available in Swift")
  class func blockOperationWithBlock(_ block: @escaping () -> Void) -> Self
  func addExecutionBlock(_ block: @escaping () -> Void)
  var executionBlocks: [@convention(block) () -> Void] { get }
  init()
}

@available(*, unavailable)
extension BlockOperation : @unchecked Sendable {
}
@available(iOS 4.0, *)
@available(swift, obsoleted: 3, renamed: "BlockOperation")
typealias NSBlockOperation = BlockOperation
@available(iOS 2.0, *)
@available(*, unavailable, message: "NSInvocation and related APIs not available")
@_nonSendable(_assumed) class NSInvocationOperation : Operation {
  convenience init?(target: Any, selector sel: Selector, object arg: Any?)
  init(invocation inv: NSInvocation)
  var invocation: NSInvocation { get }
  var result: Any? { get }
  convenience init()
}

@available(*, unavailable)
extension NSInvocationOperation : @unchecked Sendable {
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "NSExceptionName.invocationOperationVoidResultException")
let NSInvocationOperationVoidResultException: NSExceptionName
extension NSExceptionName {
  @available(iOS 2.0, *)
  static let invocationOperationVoidResultException: NSExceptionName
  @available(iOS 2.0, *)
  static let invocationOperationCancelledException: NSExceptionName
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "NSExceptionName.invocationOperationCancelledException")
let NSInvocationOperationCancelledException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "OperationQueue.defaultMaxConcurrentOperationCount")
let NSOperationQueueDefaultMaxConcurrentOperationCount: Int
extension OperationQueue {
  class let defaultMaxConcurrentOperationCount: Int
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "OperationQueue")
typealias NSOperationQueue = OperationQueue
@available(iOS 2.0, *)
@_nonSendable(_assumed) class OperationQueue : NSObject, ProgressReporting {

  /// @property progress
  /// @discussion     The `progress` property represents a total progress of the operations executed in the queue. By default NSOperationQueue
  /// does not report progress until the `totalUnitCount` of the progress is set. When the `totalUnitCount` property of the progress is set the
  /// queue then opts into participating in progress reporting. When enabled, each operation will contribute 1 unit of completion to the
  /// overall progress of the queue for operations that are finished by the end of main (operations that override start and do not invoke super
  /// will not contribute to progress). Special attention to race conditions should be made when updating the `totalUnitCount` of the progress
  /// as well as care should be taken to avoid 'backwards progress'. For example; when a NSOperationQueue's progress is 5/10, representing 50%
  /// completed, and there are 90 more operations about to be added and the `totalUnitCount` that would then make the progress report as 5/100
  /// which represents 5%. In this example it would mean that any progress bar would jump from displaying 50% back to 5%, which might not be
  /// desirable. In the cases where the `totalUnitCount` needs to be adjusted it is suggested to do this for thread-safety in a barrier by
  /// using the `addBarrierBlock:` API. This ensures that no un-expected execution state occurs adjusting into a potentially backwards moving
  /// progress scenario.
  ///
  /// @example
  /// NSOperationQueue *queue = [[NSOperationQueue alloc] init];
  /// queue.progress.totalUnitCount = 10;
  @available(iOS 13.0, *)
  var progress: Progress { get }
  func addOperation(_ op: Operation)
  @available(iOS 4.0, *)
  @_unavailableFromAsync(message: "Use addBarrierBlock or a dependent Operations instead") func addOperations(_ ops: [Operation], waitUntilFinished wait: Bool)
  @available(iOS 4.0, *)
  func addOperation(_ block: @escaping () -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "addOperation(_:)")
  func addOperationWithBlock(_ block: @escaping () -> Void)

  /// @method addBarrierBlock:
  /// @param barrier      A block to execute
  /// @discussion         The `addBarrierBlock:` method executes the block when the NSOperationQueue has finished all enqueued operations and
  /// prevents any subsequent operations to be executed until the barrier has been completed. This acts similarly to the
  /// `dispatch_barrier_async` function.
  @available(iOS 13.0, *)
  func addBarrierBlock(_ barrier: @escaping () -> Void)
  var maxConcurrentOperationCount: Int
  var isSuspended: Bool
  @available(swift, obsoleted: 3, renamed: "isSuspended")
  var suspended: Bool
  @available(iOS 4.0, *)
  var name: String?
  @available(iOS 8.0, *)
  var qualityOfService: QualityOfService
  @available(iOS 8.0, *)
  unowned(unsafe) var underlyingQueue: @sil_unmanaged DispatchQueue?
  func cancelAllOperations()
  @_unavailableFromAsync(message: "Use addBarrierBlock or a dependent Operations instead") func waitUntilAllOperationsAreFinished()
  @available(iOS 4.0, *)
  class var current: OperationQueue? { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "current")
  class var currentQueue: OperationQueue? { get }
  @available(iOS 4.0, *)
  class var main: OperationQueue { get }
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "main")
  class var mainQueue: OperationQueue { get }
  init()
}

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension OperationQueue : Scheduler {
  /// The scheduler time type used by the operation queue.
  struct SchedulerTimeType : Strideable, Codable, Hashable, Sendable {
    /// The date represented by this type.
    var date: Date
    /// Initializes a operation queue scheduler time with the given date.
    ///
    /// - Parameter date: The date to represent.
    init(_ date: Date)
    /// Returns the distance to another operation queue scheduler time.
    ///
    /// - Parameter other: Another operation queue time.
    /// - Returns: The time interval between this time and the provided time.
    func distance(to other: OperationQueue.SchedulerTimeType) -> OperationQueue.SchedulerTimeType.Stride
    /// Returns a operation queue scheduler time calculated by advancing this instance’s time by the given interval.
    ///
    /// - Parameter n: A time interval to advance.
    /// - Returns: A operation queue time advanced by the given interval from this instance’s time.
    func advanced(by n: OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType
    /// The interval by which operation queue times advance.
    struct Stride : ExpressibleByFloatLiteral, Comparable, SignedNumeric, Codable, SchedulerTimeIntervalConvertible, Sendable {
      typealias FloatLiteralType = TimeInterval
      typealias IntegerLiteralType = TimeInterval
      typealias Magnitude = TimeInterval
      /// The value of this time interval in seconds.
      var magnitude: TimeInterval
      /// The value of this time interval in seconds.
      var timeInterval: TimeInterval { get }
      init(integerLiteral value: TimeInterval)
      init(floatLiteral value: TimeInterval)
      init(_ timeInterval: TimeInterval)
      init?<T>(exactly source: T) where T : BinaryInteger
      static func < (lhs: OperationQueue.SchedulerTimeType.Stride, rhs: OperationQueue.SchedulerTimeType.Stride) -> Bool
      static func * (lhs: OperationQueue.SchedulerTimeType.Stride, rhs: OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride
      static func + (lhs: OperationQueue.SchedulerTimeType.Stride, rhs: OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride
      static func - (lhs: OperationQueue.SchedulerTimeType.Stride, rhs: OperationQueue.SchedulerTimeType.Stride) -> OperationQueue.SchedulerTimeType.Stride
      static func *= (lhs: inout OperationQueue.SchedulerTimeType.Stride, rhs: OperationQueue.SchedulerTimeType.Stride)
      static func += (lhs: inout OperationQueue.SchedulerTimeType.Stride, rhs: OperationQueue.SchedulerTimeType.Stride)
      static func -= (lhs: inout OperationQueue.SchedulerTimeType.Stride, rhs: OperationQueue.SchedulerTimeType.Stride)
      static func seconds(_ s: Int) -> OperationQueue.SchedulerTimeType.Stride
      static func seconds(_ s: Double) -> OperationQueue.SchedulerTimeType.Stride
      static func milliseconds(_ ms: Int) -> OperationQueue.SchedulerTimeType.Stride
      static func microseconds(_ us: Int) -> OperationQueue.SchedulerTimeType.Stride
      static func nanoseconds(_ ns: Int) -> OperationQueue.SchedulerTimeType.Stride
      static func == (a: OperationQueue.SchedulerTimeType.Stride, b: OperationQueue.SchedulerTimeType.Stride) -> Bool
      func encode(to encoder: Encoder) throws
      init(from decoder: Decoder) throws
    }
    func hash(into hasher: inout Hasher)
    func encode(to encoder: Encoder) throws
    var hashValue: Int { get }
    init(from decoder: Decoder) throws
  }
  /// Options that affect the operation of the operation queue scheduler.
  struct SchedulerOptions : Sendable {
  }
  func schedule(options: OperationQueue.SchedulerOptions?, _ action: @escaping () -> Void)
  func schedule(after date: OperationQueue.SchedulerTimeType, tolerance: OperationQueue.SchedulerTimeType.Stride, options: OperationQueue.SchedulerOptions?, _ action: @escaping () -> Void)
  func schedule(after date: OperationQueue.SchedulerTimeType, interval: OperationQueue.SchedulerTimeType.Stride, tolerance: OperationQueue.SchedulerTimeType.Stride, options: OperationQueue.SchedulerOptions?, _ action: @escaping () -> Void) -> Cancellable
  var now: OperationQueue.SchedulerTimeType { get }
  var minimumTolerance: OperationQueue.SchedulerTimeType.Stride { get }
}

@available(*, unavailable)
extension OperationQueue : @unchecked Sendable {
}
extension OperationQueue {
  @available(iOS, introduced: 2.0, deprecated: 100000, message: "access to operations is inherently a race condition, it should not be used. For barrier style behaviors please use addBarrierBlock: instead")
  var operations: [Operation] { get }
  @available(iOS, introduced: 4.0, deprecated: 100000)
  var operationCount: Int { get }
}
