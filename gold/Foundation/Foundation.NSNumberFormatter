@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "NumberFormatter.Behavior")
typealias NSNumberFormatterBehavior = NumberFormatter.Behavior
extension NumberFormatter {
  enum Behavior : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case `default`
    @available(swift, obsoleted: 3, renamed: "default")
    static var BehaviorDefault: NumberFormatter.Behavior { get }
    case behavior10_4
    @available(swift, obsoleted: 3, renamed: "behavior10_4")
    static var Behavior10_4: NumberFormatter.Behavior { get }
  }
  enum Style : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case none
    @available(swift, obsoleted: 3, renamed: "none")
    static var NSNumberFormatterNoStyle: NumberFormatter.Style { get }
    case decimal
    @available(swift, obsoleted: 3, renamed: "decimal")
    static var NSNumberFormatterDecimalStyle: NumberFormatter.Style { get }
    case currency
    @available(swift, obsoleted: 3, renamed: "currency")
    static var NSNumberFormatterCurrencyStyle: NumberFormatter.Style { get }
    case percent
    @available(swift, obsoleted: 3, renamed: "percent")
    static var NSNumberFormatterPercentStyle: NumberFormatter.Style { get }
    case scientific
    @available(swift, obsoleted: 3, renamed: "scientific")
    static var NSNumberFormatterScientificStyle: NumberFormatter.Style { get }
    case spellOut
    @available(swift, obsoleted: 3, renamed: "spellOut")
    static var NSNumberFormatterSpellOutStyle: NumberFormatter.Style { get }
    @available(iOS 9.0, *)
    case ordinal
    @available(iOS 9.0, *)
    @available(swift, obsoleted: 3, renamed: "ordinal")
    static var NSNumberFormatterOrdinalStyle: NumberFormatter.Style { get }
    @available(iOS 9.0, *)
    case currencyISOCode
    @available(iOS 9.0, *)
    @available(swift, obsoleted: 3, renamed: "currencyISOCode")
    static var NSNumberFormatterCurrencyISOCodeStyle: NumberFormatter.Style { get }
    @available(iOS 9.0, *)
    case currencyPlural
    @available(iOS 9.0, *)
    @available(swift, obsoleted: 3, renamed: "currencyPlural")
    static var NSNumberFormatterCurrencyPluralStyle: NumberFormatter.Style { get }
    @available(iOS 9.0, *)
    case currencyAccounting
    @available(iOS 9.0, *)
    @available(swift, obsoleted: 3, renamed: "currencyAccounting")
    static var NSNumberFormatterCurrencyAccountingStyle: NumberFormatter.Style { get }
  }
  enum PadPosition : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case beforePrefix
    @available(swift, obsoleted: 3, renamed: "beforePrefix")
    static var BeforePrefix: NumberFormatter.PadPosition { get }
    case afterPrefix
    @available(swift, obsoleted: 3, renamed: "afterPrefix")
    static var AfterPrefix: NumberFormatter.PadPosition { get }
    case beforeSuffix
    @available(swift, obsoleted: 3, renamed: "beforeSuffix")
    static var BeforeSuffix: NumberFormatter.PadPosition { get }
    case afterSuffix
    @available(swift, obsoleted: 3, renamed: "afterSuffix")
    static var AfterSuffix: NumberFormatter.PadPosition { get }
  }
  enum RoundingMode : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case ceiling
    @available(swift, obsoleted: 3, renamed: "ceiling")
    static var NSNumberFormatterRoundCeiling: NumberFormatter.RoundingMode { get }
    case floor
    @available(swift, obsoleted: 3, renamed: "floor")
    static var NSNumberFormatterRoundFloor: NumberFormatter.RoundingMode { get }
    case down
    @available(swift, obsoleted: 3, renamed: "down")
    static var NSNumberFormatterRoundDown: NumberFormatter.RoundingMode { get }
    case up
    @available(swift, obsoleted: 3, renamed: "up")
    static var NSNumberFormatterRoundUp: NumberFormatter.RoundingMode { get }
    case halfEven
    @available(swift, obsoleted: 3, renamed: "halfEven")
    static var NSNumberFormatterRoundHalfEven: NumberFormatter.RoundingMode { get }
    case halfDown
    @available(swift, obsoleted: 3, renamed: "halfDown")
    static var NSNumberFormatterRoundHalfDown: NumberFormatter.RoundingMode { get }
    case halfUp
    @available(swift, obsoleted: 3, renamed: "halfUp")
    static var NSNumberFormatterRoundHalfUp: NumberFormatter.RoundingMode { get }
  }
}
@available(swift, obsoleted: 3, renamed: "NumberFormatter")
typealias NSNumberFormatter = NumberFormatter
class NumberFormatter : Formatter {
  @available(iOS 8.0, *)
  var formattingContext: Formatter.Context
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, for string: String, range rangep: UnsafeMutablePointer<NSRange>?) throws
  @available(swift, obsoleted: 3, renamed: "getObjectValue(_:for:range:)")
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, forString string: String, range rangep: UnsafeMutablePointer<NSRange>?) throws
  func string(from number: NSNumber) -> String?
  @available(swift, obsoleted: 3, renamed: "string(from:)")
  func stringFromNumber(_ number: NSNumber) -> String?
  func number(from string: String) -> NSNumber?
  @available(swift, obsoleted: 3, renamed: "number(from:)")
  func numberFromString(_ string: String) -> NSNumber?
  @available(iOS 4.0, *)
  class func localizedString(from num: NSNumber, number nstyle: NumberFormatter.Style) -> String
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(from:number:)")
  class func localizedStringFromNumber(_ num: NSNumber, numberStyle nstyle: NumberFormatter.Style) -> String
  class func defaultFormatterBehavior() -> NumberFormatter.Behavior
  class func setDefaultFormatterBehavior(_ behavior: NumberFormatter.Behavior)
  var numberStyle: NumberFormatter.Style
  var locale: Locale!
  var generatesDecimalNumbers: Bool
  var formatterBehavior: NumberFormatter.Behavior
  var negativeFormat: String!
  var textAttributesForNegativeValues: [String : Any]?
  var positiveFormat: String!
  var textAttributesForPositiveValues: [String : Any]?
  var allowsFloats: Bool
  var decimalSeparator: String!
  var alwaysShowsDecimalSeparator: Bool
  var currencyDecimalSeparator: String!
  var usesGroupingSeparator: Bool
  var groupingSeparator: String!
  var zeroSymbol: String?
  var textAttributesForZero: [String : Any]?
  var nilSymbol: String
  var textAttributesForNil: [String : Any]?
  var notANumberSymbol: String!
  var textAttributesForNotANumber: [String : Any]?
  var positiveInfinitySymbol: String
  var textAttributesForPositiveInfinity: [String : Any]?
  var negativeInfinitySymbol: String
  var textAttributesForNegativeInfinity: [String : Any]?
  var positivePrefix: String!
  var positiveSuffix: String!
  var negativePrefix: String!
  var negativeSuffix: String!
  var currencyCode: String!
  var currencySymbol: String!
  var internationalCurrencySymbol: String!
  var percentSymbol: String!
  var perMillSymbol: String!
  var minusSign: String!
  var plusSign: String!
  var exponentSymbol: String!
  var groupingSize: Int
  var secondaryGroupingSize: Int
  @NSCopying var multiplier: NSNumber?
  var formatWidth: Int
  var paddingCharacter: String!
  var paddingPosition: NumberFormatter.PadPosition
  var roundingMode: NumberFormatter.RoundingMode
  @NSCopying var roundingIncrement: NSNumber!
  var minimumIntegerDigits: Int
  var maximumIntegerDigits: Int
  var minimumFractionDigits: Int
  var maximumFractionDigits: Int
  @NSCopying var minimum: NSNumber?
  @NSCopying var maximum: NSNumber?
  @available(iOS 2.0, *)
  var currencyGroupingSeparator: String!
  @available(iOS 2.0, *)
  var isLenient: Bool
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "isLenient")
  var lenient: Bool
  @available(iOS 2.0, *)
  var usesSignificantDigits: Bool
  @available(iOS 2.0, *)
  var minimumSignificantDigits: Int
  @available(iOS 2.0, *)
  var maximumSignificantDigits: Int
  @available(iOS 2.0, *)
  var isPartialStringValidationEnabled: Bool
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "isPartialStringValidationEnabled")
  var partialStringValidationEnabled: Bool
  init()
  init?(coder: NSCoder)
}
@available(swift, obsoleted: 3, renamed: "NumberFormatter.Style")
typealias NSNumberFormatterStyle = NumberFormatter.Style
@available(swift, obsoleted: 3, renamed: "NumberFormatter.PadPosition")
typealias NSNumberFormatterPadPosition = NumberFormatter.PadPosition
@available(swift, obsoleted: 3, renamed: "NumberFormatter.RoundingMode")
typealias NSNumberFormatterRoundingMode = NumberFormatter.RoundingMode
