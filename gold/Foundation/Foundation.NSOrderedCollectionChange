@_exported import CoreFoundation

@available(iOS 13.0, *)
enum NSCollectionChangeType : Int, @unchecked Sendable {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case insert
  @available(swift, obsoleted: 3, renamed: "insert")
  static var Insert: NSCollectionChangeType { get }
  case remove
  @available(swift, obsoleted: 3, renamed: "remove")
  static var Remove: NSCollectionChangeType { get }
}
@available(iOS 13.0, *)
class NSOrderedCollectionChange : NSObject {
  @available(*, unavailable, message: "superseded by import of -[NSOrderedCollectionChange initWithObject:type:index:]")
  /*not inherited*/ init(object anObject: Any?, type: NSCollectionChangeType, index: Int)
  @available(*, unavailable, renamed: "init(object:type:index:)", message: "Not available in Swift")
  class func changeWithObject(_ anObject: Any?, type: NSCollectionChangeType, index: Int) -> NSOrderedCollectionChange
  @available(*, unavailable, message: "superseded by import of -[NSOrderedCollectionChange initWithObject:type:index:associatedIndex:]")
  /*not inherited*/ init(object anObject: Any?, type: NSCollectionChangeType, index: Int, associatedIndex: Int)
  @available(*, unavailable, renamed: "init(object:type:index:associatedIndex:)", message: "Not available in Swift")
  class func changeWithObject(_ anObject: Any?, type: NSCollectionChangeType, index: Int, associatedIndex: Int) -> NSOrderedCollectionChange
  var object: Any? { get }
  var changeType: NSCollectionChangeType { get }
  var index: Int { get }
  var associatedIndex: Int { get }
  @available(iOS, unavailable)
  convenience init()
  convenience init(object anObject: Any?, type: NSCollectionChangeType, index: Int)
  init(object anObject: Any?, type: NSCollectionChangeType, index: Int, associatedIndex: Int)
}
