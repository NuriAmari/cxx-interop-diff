@_exported import CoreFoundation

var NSOpenStepUnicodeReservedBase: Int { get }
@_nonSendable(_assumed) class NSCharacterSet : NSObject, NSCopying, NSMutableCopying, NSSecureCoding {
  class var controlCharacters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "controlCharacters")
  class var controlCharacterSet: CharacterSet { get }
  class var whitespaces: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "whitespaces")
  class var whitespaceCharacterSet: CharacterSet { get }
  class var whitespacesAndNewlines: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "whitespacesAndNewlines")
  class var whitespaceAndNewlineCharacterSet: CharacterSet { get }
  class var decimalDigits: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "decimalDigits")
  class var decimalDigitCharacterSet: CharacterSet { get }
  class var letters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "letters")
  class var letterCharacterSet: CharacterSet { get }
  class var lowercaseLetters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "lowercaseLetters")
  class var lowercaseLetterCharacterSet: CharacterSet { get }
  class var uppercaseLetters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "uppercaseLetters")
  class var uppercaseLetterCharacterSet: CharacterSet { get }
  class var nonBaseCharacters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "nonBaseCharacters")
  class var nonBaseCharacterSet: CharacterSet { get }
  class var alphanumerics: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "alphanumerics")
  class var alphanumericCharacterSet: CharacterSet { get }
  class var decomposables: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "decomposables")
  class var decomposableCharacterSet: CharacterSet { get }
  class var illegalCharacters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "illegalCharacters")
  class var illegalCharacterSet: CharacterSet { get }
  class var punctuationCharacters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "punctuationCharacters")
  class var punctuationCharacterSet: CharacterSet { get }
  class var capitalizedLetters: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "capitalizedLetters")
  class var capitalizedLetterCharacterSet: CharacterSet { get }
  class var symbols: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "symbols")
  class var symbolCharacterSet: CharacterSet { get }
  @available(iOS 2.0, *)
  class var newlines: CharacterSet { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "newlines")
  class var newlineCharacterSet: CharacterSet { get }
  /*not inherited*/ init(range aRange: NSRange)
  @available(*, unavailable, renamed: "init(range:)", message: "Not available in Swift")
  class func characterSetWithRange(_ aRange: NSRange) -> CharacterSet
  /*not inherited*/ init(charactersIn aString: String)
  @available(swift, obsoleted: 3, renamed: "init(charactersIn:)")
  /*not inherited*/ init(charactersInString aString: String)
  @available(*, unavailable, renamed: "init(charactersIn:)", message: "Not available in Swift")
  class func characterSetWithCharactersInString(_ aString: String) -> CharacterSet
  /*not inherited*/ init(bitmapRepresentation data: Data)
  @available(*, unavailable, renamed: "init(bitmapRepresentation:)", message: "Not available in Swift")
  class func characterSetWithBitmapRepresentation(_ data: Data) -> CharacterSet
  /*not inherited*/ init?(contentsOfFile fName: String)
  @available(*, unavailable, renamed: "init(contentsOfFile:)", message: "Not available in Swift")
  class func characterSetWithContentsOfFile(_ fName: String) -> CharacterSet?
  init(coder: NSCoder)
  func characterIsMember(_ aCharacter: unichar) -> Bool
  var bitmapRepresentation: Data { get }
  var inverted: CharacterSet { get }
  @available(swift, obsoleted: 3, renamed: "inverted")
  var invertedSet: CharacterSet { get }
  func longCharacterIsMember(_ theLongChar: UTF32Char) -> Bool
  func isSuperset(of theOtherSet: CharacterSet) -> Bool
  @available(swift, obsoleted: 3, renamed: "isSuperset(of:)")
  func isSupersetOfSet(_ theOtherSet: CharacterSet) -> Bool
  func hasMemberInPlane(_ thePlane: UInt8) -> Bool
  convenience init()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func mutableCopy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
}

extension NSCharacterSet : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

@available(*, unavailable)
extension NSCharacterSet : @unchecked Sendable {
}
@_nonSendable(_assumed) class NSMutableCharacterSet : NSCharacterSet, NSCopying, NSMutableCopying, NSSecureCoding {
  func addCharacters(in aRange: NSRange)
  @available(swift, obsoleted: 3, renamed: "addCharacters(in:)")
  func addCharactersInRange(_ aRange: NSRange)
  func removeCharacters(in aRange: NSRange)
  @available(swift, obsoleted: 3, renamed: "removeCharacters(in:)")
  func removeCharactersInRange(_ aRange: NSRange)
  func addCharacters(in aString: String)
  @available(swift, obsoleted: 3, renamed: "addCharacters(in:)")
  func addCharactersInString(_ aString: String)
  func removeCharacters(in aString: String)
  @available(swift, obsoleted: 3, renamed: "removeCharacters(in:)")
  func removeCharactersInString(_ aString: String)
  func formUnion(with otherSet: CharacterSet)
  @available(swift, obsoleted: 3, renamed: "formUnion(with:)")
  func formUnionWithCharacterSet(_ otherSet: CharacterSet)
  func formIntersection(with otherSet: CharacterSet)
  @available(swift, obsoleted: 3, renamed: "formIntersection(with:)")
  func formIntersectionWithCharacterSet(_ otherSet: CharacterSet)
  func invert()
  class func control() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "control()")
  class func controlCharacterSet() -> NSMutableCharacterSet
  class func whitespace() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "whitespace()")
  class func whitespaceCharacterSet() -> NSMutableCharacterSet
  class func whitespaceAndNewline() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "whitespaceAndNewline()")
  class func whitespaceAndNewlineCharacterSet() -> NSMutableCharacterSet
  class func decimalDigit() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "decimalDigit()")
  class func decimalDigitCharacterSet() -> NSMutableCharacterSet
  class func letter() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "letter()")
  class func letterCharacterSet() -> NSMutableCharacterSet
  class func lowercaseLetter() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "lowercaseLetter()")
  class func lowercaseLetterCharacterSet() -> NSMutableCharacterSet
  class func uppercaseLetter() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "uppercaseLetter()")
  class func uppercaseLetterCharacterSet() -> NSMutableCharacterSet
  class func nonBase() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "nonBase()")
  class func nonBaseCharacterSet() -> NSMutableCharacterSet
  class func alphanumeric() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "alphanumeric()")
  class func alphanumericCharacterSet() -> NSMutableCharacterSet
  class func decomposable() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "decomposable()")
  class func decomposableCharacterSet() -> NSMutableCharacterSet
  class func illegal() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "illegal()")
  class func illegalCharacterSet() -> NSMutableCharacterSet
  class func punctuation() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "punctuation()")
  class func punctuationCharacterSet() -> NSMutableCharacterSet
  class func capitalizedLetter() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "capitalizedLetter()")
  class func capitalizedLetterCharacterSet() -> NSMutableCharacterSet
  class func symbol() -> NSMutableCharacterSet
  @available(swift, obsoleted: 3, renamed: "symbol()")
  class func symbolCharacterSet() -> NSMutableCharacterSet
  @available(iOS 2.0, *)
  class func newline() -> NSMutableCharacterSet
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "newline()")
  class func newlineCharacterSet() -> NSMutableCharacterSet
  /*not inherited*/ init(range aRange: NSRange)
  @available(*, unavailable, renamed: "init(range:)", message: "Not available in Swift")
  class func characterSetWithRange(_ aRange: NSRange) -> NSMutableCharacterSet
  /*not inherited*/ init(charactersIn aString: String)
  @available(swift, obsoleted: 3, renamed: "init(charactersIn:)")
  /*not inherited*/ init(charactersInString aString: String)
  @available(*, unavailable, renamed: "init(charactersIn:)", message: "Not available in Swift")
  class func characterSetWithCharactersInString(_ aString: String) -> NSMutableCharacterSet
  /*not inherited*/ init(bitmapRepresentation data: Data)
  @available(*, unavailable, renamed: "init(bitmapRepresentation:)", message: "Not available in Swift")
  class func characterSetWithBitmapRepresentation(_ data: Data) -> NSMutableCharacterSet
  /*not inherited*/ init?(contentsOfFile fName: String)
  @available(*, unavailable, renamed: "init(contentsOfFile:)", message: "Not available in Swift")
  class func characterSetWithContentsOfFile(_ fName: String) -> NSMutableCharacterSet?
  init(coder: NSCoder)
  convenience init()
}

@available(*, unavailable)
extension NSMutableCharacterSet : @unchecked Sendable {
}
