@_exported import CoreFoundation


/**
   @const NSURLProtectionSpaceHTTP
   @abstract The protocol for HTTP
*/
@available(iOS 2.0, *)
let NSURLProtectionSpaceHTTP: String

/**
   @const NSURLProtectionSpaceHTTPS
   @abstract The protocol for HTTPS
*/
@available(iOS 2.0, *)
let NSURLProtectionSpaceHTTPS: String

/**
   @const NSURLProtectionSpaceFTP
   @abstract The protocol for FTP
*/
@available(iOS 2.0, *)
let NSURLProtectionSpaceFTP: String

/**
    @const NSURLProtectionSpaceHTTPProxy
    @abstract The proxy type for http proxies
*/
@available(iOS 2.0, *)
let NSURLProtectionSpaceHTTPProxy: String

/**
    @const NSURLProtectionSpaceHTTPSProxy
    @abstract The proxy type for https proxies
*/
@available(iOS 2.0, *)
let NSURLProtectionSpaceHTTPSProxy: String

/**
    @const NSURLProtectionSpaceFTPProxy
    @abstract The proxy type for ftp proxies
*/
@available(iOS 2.0, *)
let NSURLProtectionSpaceFTPProxy: String

/**
    @const NSURLProtectionSpaceSOCKSProxy
    @abstract The proxy type for SOCKS proxies
*/
@available(iOS 2.0, *)
let NSURLProtectionSpaceSOCKSProxy: String

/**
    @const NSURLAuthenticationMethodDefault
    @abstract The default authentication method for a protocol
*/
@available(iOS 2.0, *)
let NSURLAuthenticationMethodDefault: String

/**
    @const NSURLAuthenticationMethodHTTPBasic
    @abstract HTTP basic authentication. Equivalent to
    NSURLAuthenticationMethodDefault for http.
*/
@available(iOS 2.0, *)
let NSURLAuthenticationMethodHTTPBasic: String

/**
    @const NSURLAuthenticationMethodHTTPDigest
    @abstract HTTP digest authentication.
*/
@available(iOS 2.0, *)
let NSURLAuthenticationMethodHTTPDigest: String

/**
    @const NSURLAuthenticationMethodHTMLForm
    @abstract HTML form authentication. Applies to any protocol.
*/
@available(iOS 2.0, *)
let NSURLAuthenticationMethodHTMLForm: String

/**
   @const NSURLAuthenticationMethodNTLM
   @abstract NTLM authentication.
*/
@available(iOS 2.0, *)
let NSURLAuthenticationMethodNTLM: String

/**
   @const NSURLAuthenticationMethodNegotiate
   @abstract Negotiate authentication.
*/
@available(iOS 2.0, *)
let NSURLAuthenticationMethodNegotiate: String

/**
    @const NSURLAuthenticationMethodClientCertificate
    @abstract SSL Client certificate.  Applies to any protocol.
 */
@available(iOS 3.0, *)
let NSURLAuthenticationMethodClientCertificate: String

/**
    @const NSURLAuthenticationMethodServerTrust
    @abstract SecTrustRef validation required.  Applies to any protocol.
 */
@available(iOS 3.0, *)
let NSURLAuthenticationMethodServerTrust: String

/**
    @class NSURLProtectionSpace
    @discussion This class represents a protection space requiring authentication.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "URLProtectionSpace")
typealias NSURLProtectionSpace = URLProtectionSpace

/**
    @class NSURLProtectionSpace
    @discussion This class represents a protection space requiring authentication.
*/
@available(iOS 2.0, *)
@_nonSendable(_assumed) class URLProtectionSpace : NSObject, NSSecureCoding, NSCopying, @unchecked Sendable {

  /**
      @method initWithHost:port:protocol:realm:authenticationMethod:
      @abstract Initialize a protection space representing an origin server, or a realm on one
      @param host The hostname of the server
      @param port The port for the server
      @param protocol The protocol for this server - e.g. "http", "ftp", "https"
      @param realm A string indicating a protocol-specific subdivision
      of a single host. For http and https, this maps to the realm
      string in http authentication challenges. For many other protocols
      it is unused.
      @param authenticationMethod The authentication method to use to access this protection space -
      valid values include nil (default method), @"digest" and @"form".
      @result The initialized object.
  */
  init(host: String, port: Int, protocol: String?, realm: String?, authenticationMethod: String?)

  /**
      @method initWithProxyHost:port:type:realm:authenticationMethod:
      @abstract Initialize a protection space representing a proxy server, or a realm on one
      @param host The hostname of the proxy server
      @param port The port for the proxy server
      @param type The type of proxy - e.g. "http", "ftp", "SOCKS"
      @param realm A string indicating a protocol-specific subdivision
      of a single host. For http and https, this maps to the realm
      string in http authentication challenges. For many other protocols
      it is unused.
      @param authenticationMethod The authentication method to use to access this protection space -
      valid values include nil (default method) and @"digest"
      @result The initialized object.
  */
  init(proxyHost host: String, port: Int, type: String?, realm: String?, authenticationMethod: String?)

  /**
      @abstract Get the authentication realm for which the protection space that
      needs authentication
      @discussion This is generally only available for http
      authentication, and may be nil otherwise.
      @result The realm string
  */
  var realm: String? { get }

  /**
      @abstract Determine if the password for this protection space can be sent securely
      @result YES if a secure authentication method or protocol will be used, NO otherwise
  */
  var receivesCredentialSecurely: Bool { get }

  /**
      @abstract Get the proxy host if this is a proxy authentication, or the host from the URL.
      @result The host for this protection space.
  */
  var host: String { get }

  /**
      @abstract Get the proxy port if this is a proxy authentication, or the port from the URL.
      @result The port for this protection space, or 0 if not set.
  */
  var port: Int { get }

  /**
      @abstract Get the type of this protection space, if a proxy
      @result The type string, or nil if not a proxy.
   */
  var proxyType: String? { get }

  /**
      @abstract Get the protocol of this protection space, if not a proxy
      @result The type string, or nil if a proxy.
  */
  var `protocol`: String? { get }

  /**
      @abstract Get the authentication method to be used for this protection space
      @result The authentication method
  */
  var authenticationMethod: String { get }
  func isProxy() -> Bool
  init()
  @available(iOS 2.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 2.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
  @available(iOS 2.0, *)
  func copy(with zone: NSZone? = nil) -> Any
}

/**
    @discussion This category supplies additional information for use when a client certificate is required by the server in order to complete authentication.
 */
extension URLProtectionSpace {

  /**
      @abstract Returns an array of acceptable certificate issuing authorities for client certification authentication. Issuers are identified by their distinguished name and returned as a DER encoded data.
      @result An array of NSData objects.  (Nil if the authenticationMethod is not NSURLAuthenticationMethodClientCertificate)
   */
  @available(iOS 3.0, *)
  var distinguishedNames: [Data]? { get }
}

/**
    @discussion This category supplies additional information for use by the client to evaluate whether to trust a given server during a security handshake.
 */
extension URLProtectionSpace {

  /**
      @abstract Returns a SecTrustRef which represents the state of the servers SSL transaction state
      @result A SecTrustRef from Security.framework.  (Nil if the authenticationMethod is not NSURLAuthenticationMethodServerTrust)
   */
  @available(iOS 3.0, *)
  var serverTrust: SecTrust? { get }
}
