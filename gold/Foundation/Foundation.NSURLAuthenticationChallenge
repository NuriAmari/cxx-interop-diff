@_exported import CoreFoundation


/**  
    @protocol NSURLAuthenticationChallengeSender 
    @discussion This protocol represents the sender of an
    authentication challenge. It has methods to provide a credential,
    to continue without any credential, getting whatever failure
    result would happen in that case, cancel a challenge, perform the default
    action as defined by the system, or reject the currently supplied protection-space
    in the challenge.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "URLAuthenticationChallengeSender")
typealias NSURLAuthenticationChallengeSender = URLAuthenticationChallengeSender

/**  
    @protocol NSURLAuthenticationChallengeSender 
    @discussion This protocol represents the sender of an
    authentication challenge. It has methods to provide a credential,
    to continue without any credential, getting whatever failure
    result would happen in that case, cancel a challenge, perform the default
    action as defined by the system, or reject the currently supplied protection-space
    in the challenge.
*/
@available(iOS 2.0, *)
protocol URLAuthenticationChallengeSender : NSObjectProtocol {

  /**
      @method useCredential:forAuthenticationChallenge:
  */
  func use(_ credential: URLCredential, for challenge: URLAuthenticationChallenge)

  /**
      @method useCredential:forAuthenticationChallenge:
  */
  @available(swift, obsoleted: 3, renamed: "use(_:for:)")
  func useCredential(_ credential: URLCredential, forAuthenticationChallenge challenge: URLAuthenticationChallenge)

  /**
      @method continueWithoutCredentialForAuthenticationChallenge:
  */
  func continueWithoutCredential(for challenge: URLAuthenticationChallenge)

  /**
      @method continueWithoutCredentialForAuthenticationChallenge:
  */
  @available(swift, obsoleted: 3, renamed: "continueWithoutCredential(for:)")
  func continueWithoutCredentialForAuthenticationChallenge(_ challenge: URLAuthenticationChallenge)

  /**
      @method cancelAuthenticationChallenge:
  */
  func cancel(_ challenge: URLAuthenticationChallenge)

  /**
      @method cancelAuthenticationChallenge:
  */
  @available(swift, obsoleted: 3, renamed: "cancel(_:)")
  func cancelAuthenticationChallenge(_ challenge: URLAuthenticationChallenge)

  /**
   @method performDefaultHandlingForAuthenticationChallenge:
   */
  optional func performDefaultHandling(for challenge: URLAuthenticationChallenge)

  /**
   @method performDefaultHandlingForAuthenticationChallenge:
   */
  @available(swift, obsoleted: 3, renamed: "performDefaultHandling(for:)")
  optional func performDefaultHandlingForAuthenticationChallenge(_ challenge: URLAuthenticationChallenge)

  /**
   @method rejectProtectionSpaceAndContinueWithChallenge:
   */
  optional func rejectProtectionSpaceAndContinue(with challenge: URLAuthenticationChallenge)

  /**
   @method rejectProtectionSpaceAndContinueWithChallenge:
   */
  @available(swift, obsoleted: 3, renamed: "rejectProtectionSpaceAndContinue(with:)")
  optional func rejectProtectionSpaceAndContinueWithChallenge(_ challenge: URLAuthenticationChallenge)
}

/**
    @class NSURLAuthenticationChallenge
    @discussion This class represents an authentication challenge. It
    provides all the information about the challenge, and has a method
    to indicate when it's done.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "URLAuthenticationChallenge")
typealias NSURLAuthenticationChallenge = URLAuthenticationChallenge

/**
    @class NSURLAuthenticationChallenge
    @discussion This class represents an authentication challenge. It
    provides all the information about the challenge, and has a method
    to indicate when it's done.
*/
@available(iOS 2.0, *)
@_nonSendable(_assumed) class URLAuthenticationChallenge : NSObject, NSSecureCoding {

  /**
      @method initWithProtectionSpace:proposedCredential:previousFailureCount:failureResponse:error:
      @abstract Initialize an authentication challenge 
      @param space The NSURLProtectionSpace to use
      @param credential The proposed NSURLCredential for this challenge, or nil
      @param previousFailureCount A count of previous failures attempting access.
      @param response The NSURLResponse for the authentication failure, if applicable, else nil
      @param error The NSError for the authentication failure, if applicable, else nil
      @result An authentication challenge initialized with the specified parameters
  */
  init(protectionSpace space: URLProtectionSpace, proposedCredential credential: URLCredential?, previousFailureCount: Int, failureResponse response: URLResponse?, error: Error?, sender: URLAuthenticationChallengeSender)

  /**
      @method initWithAuthenticationChallenge:
      @abstract Initialize an authentication challenge copying all parameters from another one.
      @result A new challenge initialized with the parameters from the passed in challenge
      @discussion This initializer may be useful to subclassers that want to proxy
      one type of authentication challenge to look like another type.
  */
  init(authenticationChallenge challenge: URLAuthenticationChallenge, sender: URLAuthenticationChallengeSender)

  /**
      @abstract Get a description of the protection space that requires authentication
      @result The protection space that needs authentication
  */
  @NSCopying var protectionSpace: URLProtectionSpace { get }

  /**
      @abstract Get the proposed credential for this challenge
      @result The proposed credential
      @discussion proposedCredential may be nil, if there is no default
      credential to use for this challenge (either stored or in the
      URL). If the credential is not nil and returns YES for
      hasPassword, this means the NSURLConnection thinks the credential
      is ready to use as-is. If it returns NO for hasPassword, then the
      credential is not ready to use as-is, but provides a default
      username the client could use when prompting.
  */
  @NSCopying var proposedCredential: URLCredential? { get }

  /**
      @abstract Get count of previous failed authentication attempts
      @result The count of previous failures
  */
  var previousFailureCount: Int { get }

  /**
      @abstract Get the response representing authentication failure.
      @result The failure response or nil
      @discussion If there was a previous authentication failure, and
      this protocol uses responses to indicate authentication failure,
      then this method will return the response. Otherwise it will
      return nil.
  */
  @NSCopying var failureResponse: URLResponse? { get }

  /**
      @abstract Get the error representing authentication failure.
      @discussion If there was a previous authentication failure, and
      this protocol uses errors to indicate authentication failure,
      then this method will return the error. Otherwise it will
      return nil.
  */
  var error: Error? { get }

  /**
      @abstract Get the sender of this challenge
      @result The sender of the challenge
      @discussion The sender is the object you should reply to when done processing the challenge.
  */
  var sender: URLAuthenticationChallengeSender? { get }
  init()
  @available(iOS 2.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 2.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

@available(*, unavailable)
extension URLAuthenticationChallenge : @unchecked Sendable {
}
