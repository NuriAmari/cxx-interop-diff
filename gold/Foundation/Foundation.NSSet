@_exported import CoreFoundation


/****************	Immutable Set	****************/
@_nonSendable(_assumed) class NSSet : NSObject, NSCopying, NSMutableCopying, NSSecureCoding, NSFastEnumeration {
  var count: Int { get }
  func member(_ object: Any) -> Any?
  func objectEnumerator() -> NSEnumerator
  init()
  init(objects: UnsafePointer<AnyObject>?, count cnt: Int)
  init?(coder: NSCoder)
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func mutableCopy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  func countByEnumerating(with state: UnsafeMutablePointer<NSFastEnumerationState>, objects buffer: AutoreleasingUnsafeMutablePointer<AnyObject?>, count len: Int) -> Int
}

extension NSSet : Sequence {
  /// Return an *iterator* over the elements of this *sequence*.
  ///
  /// - Complexity: O(1).
  func makeIterator() -> NSFastEnumerationIterator
  /// A value less than or equal to the number of elements in the collection.
  ///
  /// - Complexity: O(1).
  @_alwaysEmitIntoClient @nonobjc var underestimatedCount: Int { get }
  typealias Element = Any
  typealias Iterator = NSFastEnumerationIterator
}

extension NSSet : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

extension NSSet {
  convenience init(objects elements: Any...)
}

extension NSSet : ExpressibleByArrayLiteral {
  required convenience init(arrayLiteral elements: Any...)
  typealias ArrayLiteralElement = Any
}

extension NSSet {
  /// Initializes a newly allocated set and adds to it objects from
  /// another given set.
  ///
  /// - Returns: An initialized objects set containing the objects from
  ///   `set`. The returned set might be different than the original
  ///   receiver.
  @nonobjc convenience init(set anSet: __shared NSSet)
}

extension NSSet : CustomReflectable {
  var customMirror: Mirror { get }
}

@available(*, unavailable)
extension NSSet : @unchecked Sendable {
}
extension NSSet {
  var allObjects: [Any] { get }
  func anyObject() -> Any?
  func contains(_ anObject: Any) -> Bool
  @available(swift, obsoleted: 3, renamed: "contains(_:)")
  func containsObject(_ anObject: Any) -> Bool
  var description: String { get }
  func description(withLocale locale: Any?) -> String
  @available(swift, obsoleted: 3, renamed: "description(withLocale:)")
  func descriptionWithLocale(_ locale: Any?) -> String
  func intersects(_ otherSet: Set<AnyHashable>) -> Bool
  @available(swift, obsoleted: 3, renamed: "intersects(_:)")
  func intersectsSet(_ otherSet: Set<AnyHashable>) -> Bool
  func isEqual(to otherSet: Set<AnyHashable>) -> Bool
  @available(swift, obsoleted: 3, renamed: "isEqual(to:)")
  func isEqualToSet(_ otherSet: Set<AnyHashable>) -> Bool
  func isSubset(of otherSet: Set<AnyHashable>) -> Bool
  @available(swift, obsoleted: 3, renamed: "isSubset(of:)")
  func isSubsetOfSet(_ otherSet: Set<AnyHashable>) -> Bool
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerform(_ aSelector: Selector)
  @available(swift, obsoleted: 3, renamed: "makeObjectsPerform(_:)")
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerformSelector(_ aSelector: Selector)
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerform(_ aSelector: Selector, with argument: Any?)
  @available(swift, obsoleted: 3, renamed: "makeObjectsPerform(_:with:)")
  @available(*, unavailable, message: "Use enumerateObjectsUsingBlock: or a for loop instead")
  func makeObjectsPerformSelector(_ aSelector: Selector, withObject argument: Any?)
  @available(iOS 2.0, *)
  func adding(_ anObject: Any) -> Set<AnyHashable>
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "adding(_:)")
  func setByAddingObject(_ anObject: Any) -> Set<AnyHashable>
  @available(iOS 2.0, *)
  func addingObjects(from other: Set<AnyHashable>) -> Set<AnyHashable>
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "addingObjects(from:)")
  func setByAddingObjectsFromSet(_ other: Set<AnyHashable>) -> Set<AnyHashable>
  @available(iOS 2.0, *)
  func addingObjects(from other: [Any]) -> Set<AnyHashable>
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "addingObjects(from:)")
  func setByAddingObjectsFromArray(_ other: [Any]) -> Set<AnyHashable>
  @available(iOS 4.0, *)
  func enumerateObjects(_ block: (Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateObjects(_:)")
  func enumerateObjectsUsingBlock(_ block: (Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func enumerateObjects(options opts: NSEnumerationOptions = [], using block: (Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "enumerateObjects(options:using:)")
  func enumerateObjectsWithOptions(_ opts: NSEnumerationOptions = [], usingBlock block: (Any, UnsafeMutablePointer<ObjCBool>) -> Void)
  @available(iOS 4.0, *)
  func objects(passingTest predicate: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "objects(passingTest:)")
  func objectsPassingTest(_ predicate: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
  @available(iOS 4.0, *)
  func objects(options opts: NSEnumerationOptions = [], passingTest predicate: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "objects(options:passingTest:)")
  func objectsWithOptions(_ opts: NSEnumerationOptions = [], passingTest predicate: (Any, UnsafeMutablePointer<ObjCBool>) -> Bool) -> Set<AnyHashable>
}
extension NSSet {
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func set() -> Self
  convenience init(object: Any)
  @available(*, unavailable, renamed: "init(object:)", message: "Not available in Swift")
  class func setWithObject(_ object: Any) -> Self
  convenience init(objects: UnsafePointer<AnyObject>, count cnt: Int)
  @available(*, unavailable, renamed: "init(objects:count:)", message: "Not available in Swift")
  class func setWithObjects(_ objects: UnsafePointer<AnyObject>, count cnt: Int) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSSet(NSSetCreation) initWithSet:]")
  convenience init(set: Set<AnyHashable>)
  @available(*, unavailable, renamed: "init(set:)", message: "Not available in Swift")
  class func setWithSet(_ set: Set<AnyHashable>) -> Self
  @available(*, unavailable, message: "superseded by import of -[NSSet(NSSetCreation) initWithArray:]")
  convenience init(array: [Any])
  @available(*, unavailable, renamed: "init(array:)", message: "Not available in Swift")
  class func setWithArray(_ array: [Any]) -> Self
  convenience init(set: Set<AnyHashable>)
  convenience init(set: Set<AnyHashable>, copyItems flag: Bool)
  convenience init(array: [Any])
}

/****************	Mutable Set	****************/
@_nonSendable(_assumed) class NSMutableSet : NSSet {
  func add(_ object: Any)
  @available(swift, obsoleted: 3, renamed: "add(_:)")
  func addObject(_ object: Any)
  func remove(_ object: Any)
  @available(swift, obsoleted: 3, renamed: "remove(_:)")
  func removeObject(_ object: Any)
  init?(coder: NSCoder)
  init()
  init(capacity numItems: Int)
  convenience init(objects: UnsafePointer<AnyObject>?, count cnt: Int)
  convenience init(object: Any)
  convenience init(objects: UnsafePointer<AnyObject>, count cnt: Int)
  @available(*, unavailable, message: "superseded by import of -[NSSet(NSSetCreation) initWithSet:]")
  convenience init(set: Set<AnyHashable>)
  @available(*, unavailable, message: "superseded by import of -[NSSet(NSSetCreation) initWithArray:]")
  convenience init(array: [Any])
  convenience init(set: Set<AnyHashable>)
  convenience init(set: Set<AnyHashable>, copyItems flag: Bool)
  convenience init(array: [Any])
}

@available(*, unavailable)
extension NSMutableSet : @unchecked Sendable {
}
extension NSMutableSet {
  func addObjects(from array: [Any])
  @available(swift, obsoleted: 3, renamed: "addObjects(from:)")
  func addObjectsFromArray(_ array: [Any])
  func intersect(_ otherSet: Set<AnyHashable>)
  @available(swift, obsoleted: 3, renamed: "intersect(_:)")
  func intersectSet(_ otherSet: Set<AnyHashable>)
  func minus(_ otherSet: Set<AnyHashable>)
  @available(swift, obsoleted: 3, renamed: "minus(_:)")
  func minusSet(_ otherSet: Set<AnyHashable>)
  func removeAllObjects()
  func union(_ otherSet: Set<AnyHashable>)
  @available(swift, obsoleted: 3, renamed: "union(_:)")
  func unionSet(_ otherSet: Set<AnyHashable>)
  func setSet(_ otherSet: Set<AnyHashable>)
}
extension NSMutableSet {
  @available(*, unavailable, renamed: "init(capacity:)", message: "Not available in Swift")
  class func setWithCapacity(_ numItems: Int) -> Self
}

/****************	Counted Set	****************/
@_nonSendable(_assumed) class NSCountedSet : NSMutableSet {
  init(capacity numItems: Int)
  convenience init(array: [Any])
  convenience init(set: Set<AnyHashable>)
  func count(for object: Any) -> Int
  @available(swift, obsoleted: 3, renamed: "count(for:)")
  func countForObject(_ object: Any) -> Int
  func objectEnumerator() -> NSEnumerator
  func add(_ object: Any)
  @available(swift, obsoleted: 3, renamed: "add(_:)")
  func addObject(_ object: Any)
  func remove(_ object: Any)
  @available(swift, obsoleted: 3, renamed: "remove(_:)")
  func removeObject(_ object: Any)
  init?(coder: NSCoder)
  convenience init()
  convenience init(objects: UnsafePointer<AnyObject>?, count cnt: Int)
  convenience init(object: Any)
  convenience init(objects: UnsafePointer<AnyObject>, count cnt: Int)
  convenience init(set: Set<AnyHashable>, copyItems flag: Bool)
}

@available(*, unavailable)
extension NSCountedSet : @unchecked Sendable {
}
