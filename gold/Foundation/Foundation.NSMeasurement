@_exported import CoreFoundation

@available(iOS 10.0, *)
@_nonSendable(_assumed) class NSMeasurement : NSObject, NSCopying, NSSecureCoding {
  @NSCopying var unit: Unit { get }
  var doubleValue: Double { get }
  @available(iOS, unavailable)
  convenience init()
  init(doubleValue: Double, unit: Unit)
  func canBeConverted(to unit: Unit) -> Bool
  @available(swift, obsoleted: 3, renamed: "canBeConverted(to:)")
  func canBeConvertedToUnit(_ unit: Unit) -> Bool
  func converting(to unit: Unit) -> Measurement<Unit>
  @available(swift, obsoleted: 3, renamed: "converting(to:)")
  func measurementByConvertingToUnit(_ unit: Unit) -> Measurement<Unit>
  func adding(_ measurement: Measurement<Unit>) -> Measurement<Unit>
  @available(swift, obsoleted: 3, renamed: "adding(_:)")
  func measurementByAddingMeasurement(_ measurement: Measurement<Unit>) -> Measurement<Unit>
  func subtracting(_ measurement: Measurement<Unit>) -> Measurement<Unit>
  @available(swift, obsoleted: 3, renamed: "subtracting(_:)")
  func measurementBySubtractingMeasurement(_ measurement: Measurement<Unit>) -> Measurement<Unit>
  @available(iOS 10.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 10.0, *)
  func copy(with zone: NSZone? = nil) -> Any
  @available(iOS 10.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}

@available(macOS 10.12, iOS 10.0, watchOS 3.0, tvOS 10.0, *)
extension NSMeasurement : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}

@available(*, unavailable)
extension NSMeasurement : @unchecked Sendable {
}
