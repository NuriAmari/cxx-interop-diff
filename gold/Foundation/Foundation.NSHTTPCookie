@_exported import CoreFoundation

struct HTTPCookiePropertyKey : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(_ rawValue: String)
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey")
typealias NSHTTPCookiePropertyKey = HTTPCookiePropertyKey
struct HTTPCookieStringPolicy : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
  init(rawValue: String)
  var _rawValue: NSString
  var rawValue: String { get }
  typealias RawValue = String
  typealias _ObjectiveCType = NSString
}
@available(swift, obsoleted: 3, renamed: "HTTPCookieStringPolicy")
typealias NSHTTPCookieStringPolicy = HTTPCookieStringPolicy

/**
    @const NSHTTPCookieName
    @discussion Key for cookie name
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.name")
let NSHTTPCookieName: HTTPCookiePropertyKey
extension HTTPCookiePropertyKey {

  /**
      @const NSHTTPCookieName
      @discussion Key for cookie name
  */
  @available(iOS 2.0, *)
  static let name: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieValue
      @discussion Key for cookie value
  */
  @available(iOS 2.0, *)
  static let value: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieOriginURL
      @discussion Key for cookie origin URL
  */
  @available(iOS 2.0, *)
  static let originURL: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieVersion
      @discussion Key for cookie version
  */
  @available(iOS 2.0, *)
  static let version: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieDomain
      @discussion Key for cookie domain
  */
  @available(iOS 2.0, *)
  static let domain: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookiePath
      @discussion Key for cookie path
  */
  @available(iOS 2.0, *)
  static let path: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieSecure
      @discussion Key for cookie secure flag
  */
  @available(iOS 2.0, *)
  static let secure: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieExpires
      @discussion Key for cookie expiration date
  */
  @available(iOS 2.0, *)
  static let expires: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieComment
      @discussion Key for cookie comment text
  */
  @available(iOS 2.0, *)
  static let comment: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieCommentURL
      @discussion Key for cookie comment URL
  */
  @available(iOS 2.0, *)
  static let commentURL: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieDiscard
      @discussion Key for cookie discard (session-only) flag
  */
  @available(iOS 2.0, *)
  static let discard: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookieMaximumAge
      @discussion Key for cookie maximum age (an alternate way of specifying the expiration)
  */
  @available(iOS 2.0, *)
  static let maximumAge: HTTPCookiePropertyKey

  /**
      @const NSHTTPCookiePort
      @discussion Key for cookie ports
  */
  @available(iOS 2.0, *)
  static let port: HTTPCookiePropertyKey

  /**
   @const NSHTTPCookieSameSitePolicy
   @discussion Key for cookie same site
   */
  @available(iOS 13.0, *)
  static let sameSitePolicy: HTTPCookiePropertyKey
}

/**
    @const NSHTTPCookieValue
    @discussion Key for cookie value
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.value")
let NSHTTPCookieValue: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieOriginURL
    @discussion Key for cookie origin URL
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.originURL")
let NSHTTPCookieOriginURL: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieVersion
    @discussion Key for cookie version
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.version")
let NSHTTPCookieVersion: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieDomain
    @discussion Key for cookie domain
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.domain")
let NSHTTPCookieDomain: HTTPCookiePropertyKey

/**
    @const NSHTTPCookiePath
    @discussion Key for cookie path
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.path")
let NSHTTPCookiePath: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieSecure
    @discussion Key for cookie secure flag
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.secure")
let NSHTTPCookieSecure: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieExpires
    @discussion Key for cookie expiration date
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.expires")
let NSHTTPCookieExpires: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieComment
    @discussion Key for cookie comment text
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.comment")
let NSHTTPCookieComment: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieCommentURL
    @discussion Key for cookie comment URL
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.commentURL")
let NSHTTPCookieCommentURL: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieDiscard
    @discussion Key for cookie discard (session-only) flag
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.discard")
let NSHTTPCookieDiscard: HTTPCookiePropertyKey

/**
    @const NSHTTPCookieMaximumAge
    @discussion Key for cookie maximum age (an alternate way of specifying the expiration)
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.maximumAge")
let NSHTTPCookieMaximumAge: HTTPCookiePropertyKey

/**
    @const NSHTTPCookiePort
    @discussion Key for cookie ports
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.port")
let NSHTTPCookiePort: HTTPCookiePropertyKey

/**
 @const NSHTTPCookieSameSitePolicy
 @discussion Key for cookie same site
 */
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookiePropertyKey.sameSitePolicy")
let NSHTTPCookieSameSitePolicy: HTTPCookiePropertyKey

/**
 @const NSHTTPCookieSameSiteLax
 @discussion String constant "lax" to be used as a value for the property key NSHTTPCookieSameSite
 */
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookieStringPolicy.sameSiteLax")
let NSHTTPCookieSameSiteLax: HTTPCookieStringPolicy
extension HTTPCookieStringPolicy {

  /**
   @const NSHTTPCookieSameSiteLax
   @discussion String constant "lax" to be used as a value for the property key NSHTTPCookieSameSite
   */
  @available(iOS 13.0, *)
  static let sameSiteLax: HTTPCookieStringPolicy

  /**
   @const NSHTTPCookieSameSiteStrict
   @discussion String constant "strict" to be used as a value for the property key NSHTTPCookieSameSite
   */
  @available(iOS 13.0, *)
  static let sameSiteStrict: HTTPCookieStringPolicy
}

/**
 @const NSHTTPCookieSameSiteStrict
 @discussion String constant "strict" to be used as a value for the property key NSHTTPCookieSameSite
 */
@available(iOS 13.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookieStringPolicy.sameSiteStrict")
let NSHTTPCookieSameSiteStrict: HTTPCookieStringPolicy

/**
    @class NSHTTPCookie
    @abstract NSHTTPCookie represents an http cookie.
    @discussion A NSHTTPCookie instance represents a single http cookie. It is
    an immutable object initialized from a dictionary that contains
    the various cookie attributes. It has accessors to get the various
    attributes of a cookie.
*/
@available(iOS 2.0, *)
class HTTPCookie : NSObject {

  /**
      @method initWithProperties:
      @abstract Initialize a NSHTTPCookie object with a dictionary of
      parameters
      @param properties The dictionary of properties to be used to
      initialize this cookie.
      @discussion Supported dictionary keys and value types for the
      given dictionary are as follows.
  
      All properties can handle an NSString value, but some can also
      handle other types.
  
      <table border="1" cellspacing="2" cellpadding="4">
      <tr>
          <th>Property key constant</th>
          <th>Type of value</th>
          <th>Required</th>
          <th>Description</th>
      </tr>
      <tr>
          <td>NSHTTPCookieComment</td>
          <td>NSString</td>
          <td>NO</td>
          <td>Comment for the cookie. Only valid for version 1 cookies and
          later. Default is nil.</td>
      </tr>
      <tr>
          <td>NSHTTPCookieCommentURL</td>
          <td>NSURL or NSString</td>
          <td>NO</td>
          <td>Comment URL for the cookie. Only valid for version 1 cookies
          and later. Default is nil.</td>
      </tr>
      <tr>
          <td>NSHTTPCookieDomain</td>
          <td>NSString</td>
          <td>Special, a value for either NSHTTPCookieOriginURL or
          NSHTTPCookieDomain must be specified.</td>
          <td>Domain for the cookie. Inferred from the value for
          NSHTTPCookieOriginURL if not provided.</td>
      </tr>
      <tr>
          <td>NSHTTPCookieDiscard</td>
          <td>NSString</td>
          <td>NO</td>
          <td>A string stating whether the cookie should be discarded at
          the end of the session. String value must be either "TRUE" or
          "FALSE". Default is "FALSE", unless this is cookie is version
          1 or greater and a value for NSHTTPCookieMaximumAge is not
          specified, in which case it is assumed "TRUE".</td>
      </tr>
      <tr>
          <td>NSHTTPCookieExpires</td>
          <td>NSDate or NSString</td>
          <td>NO</td>
          <td>Expiration date for the cookie. Used only for version 0
          cookies. Ignored for version 1 or greater.</td>
      </tr>
      <tr>
          <td>NSHTTPCookieMaximumAge</td>
          <td>NSString</td>
          <td>NO</td>
          <td>A string containing an integer value stating how long in
          seconds the cookie should be kept, at most. Only valid for
          version 1 cookies and later. Default is "0".</td>
      </tr>
      <tr>
          <td>NSHTTPCookieName</td>
          <td>NSString</td>
          <td>YES</td>
          <td>Name of the cookie</td>
      </tr>
      <tr>
          <td>NSHTTPCookieOriginURL</td>
          <td>NSURL or NSString</td>
          <td>Special, a value for either NSHTTPCookieOriginURL or
          NSHTTPCookieDomain must be specified.</td>
          <td>URL that set this cookie. Used as default for other fields
          as noted.</td>
      </tr>
      <tr>
          <td>NSHTTPCookiePath</td>
          <td>NSString</td>
          <td>NO</td>
          <td>Path for the cookie. Inferred from the value for
          NSHTTPCookieOriginURL if not provided. Default is "/".</td>
      </tr>
      <tr>
          <td>NSHTTPCookiePort</td>
          <td>NSString</td>
          <td>NO</td>
          <td>comma-separated integer values specifying the ports for the
          cookie. Only valid for version 1 cookies and later. Default is
          empty string ("").</td>
      </tr>
      <tr>
          <td>NSHTTPCookieSecure</td>
          <td>NSString</td>
          <td>NO</td>
          <td>A string stating whether the cookie should be transmitted
          only over secure channels. String value must be either "TRUE"
          or "FALSE". Default is "FALSE".</td>
      </tr>
      <tr>
          <td>NSHTTPCookieValue</td>
          <td>NSString</td>
          <td>YES</td>
          <td>Value of the cookie</td>
      </tr>
      <tr>
          <td>NSHTTPCookieVersion</td>
          <td>NSString</td>
          <td>NO</td>
          <td>Specifies the version of the cookie. Must be either "0" or
          "1". Default is "0".</td>
      </tr>
      </table>
      <p>
      All other keys are ignored.
      @result An initialized NSHTTPCookie, or nil if the set of
      dictionary keys is invalid, for example because a required key is
      missing, or a recognized key maps to an illegal value.
  */
  init?(properties: [HTTPCookiePropertyKey : Any])

  /**
      @method cookieWithProperties:
      @abstract Allocates and initializes an NSHTTPCookie with the given
      dictionary.
      @discussion See the NSHTTPCookie <tt>-initWithProperties:</tt>
      method for more information on the constraints imposed on the
      dictionary, and for descriptions of the supported keys and values.
      @param properties The dictionary to use to initialize this cookie.
      @result A newly-created and autoreleased NSHTTPCookie instance, or
      nil if the set of dictionary keys is invalid, for example because
      a required key is missing, or a recognized key maps to an illegal
      value.
  */
  @available(*, unavailable, renamed: "init(properties:)", message: "Not available in Swift")
  class func cookieWithProperties(_ properties: [HTTPCookiePropertyKey : Any]) -> HTTPCookie?

  /**
      @method requestHeaderFieldsWithCookies:
      @abstract Return a dictionary of header fields that can be used to add the
      specified cookies to the request.
      @param cookies The cookies to turn into request headers.
      @result An NSDictionary where the keys are header field names, and the values
      are the corresponding header field values.
  */
  class func requestHeaderFields(with cookies: [HTTPCookie]) -> [String : String]

  /**
      @method requestHeaderFieldsWithCookies:
      @abstract Return a dictionary of header fields that can be used to add the
      specified cookies to the request.
      @param cookies The cookies to turn into request headers.
      @result An NSDictionary where the keys are header field names, and the values
      are the corresponding header field values.
  */
  @available(swift, obsoleted: 3, renamed: "requestHeaderFields(with:)")
  class func requestHeaderFieldsWithCookies(_ cookies: [HTTPCookie]) -> [String : String]

  /**
      @method cookiesWithResponseHeaderFields:forURL:
      @abstract Return an array of cookies parsed from the specified response header fields and URL.
      @param headerFields The response header fields to check for cookies.
      @param URL The URL that the cookies came from - relevant to how the cookies are interpeted.
      @result An NSArray of NSHTTPCookie objects
      @discussion This method will ignore irrelevant header fields so
      you can pass a dictionary containing data other than cookie data.
  */
  class func cookies(withResponseHeaderFields headerFields: [String : String], for URL: URL) -> [HTTPCookie]

  /**
      @method cookiesWithResponseHeaderFields:forURL:
      @abstract Return an array of cookies parsed from the specified response header fields and URL.
      @param headerFields The response header fields to check for cookies.
      @param URL The URL that the cookies came from - relevant to how the cookies are interpeted.
      @result An NSArray of NSHTTPCookie objects
      @discussion This method will ignore irrelevant header fields so
      you can pass a dictionary containing data other than cookie data.
  */
  @available(swift, obsoleted: 3, renamed: "cookies(withResponseHeaderFields:for:)")
  class func cookiesWithResponseHeaderFields(_ headerFields: [String : String], forURL URL: URL) -> [HTTPCookie]

  /**
      @abstract Returns a dictionary representation of the receiver.
      @discussion This method returns a dictionary representation of the
      NSHTTPCookie which can be saved and passed to
      <tt>-initWithProperties:</tt> or <tt>+cookieWithProperties:</tt>
      later to reconstitute an equivalent cookie.
      <p>See the NSHTTPCookie <tt>-initWithProperties:</tt> method for
      more information on the constraints imposed on the dictionary, and
      for descriptions of the supported keys and values.
      @result The dictionary representation of the receiver.
  */
  var properties: [HTTPCookiePropertyKey : Any]? { get }

  /**
      @abstract Returns the version of the receiver.
      @discussion Version 0 maps to "old-style" Netscape cookies.
      Version 1 maps to RFC2965 cookies. There may be future versions.
      @result the version of the receiver.
  */
  var version: Int { get }

  /**
      @abstract Returns the name of the receiver.
      @result the name of the receiver.
  */
  var name: String { get }

  /**
      @abstract Returns the value of the receiver.
      @result the value of the receiver.
  */
  var value: String { get }

  /**
      @abstract Returns the expires date of the receiver.
      @result the expires date of the receiver.
      @discussion The expires date is the date when the cookie should be
      deleted. The result will be nil if there is no specific expires
      date. This will be the case only for "session-only" cookies.
      @result The expires date of the receiver.
  */
  var expiresDate: Date? { get }

  /**
      @abstract Returns whether the receiver is session-only.
      @result YES if this receiver should be discarded at the end of the
      session (regardless of expiration date), NO if receiver need not
      be discarded at the end of the session.
  */
  var isSessionOnly: Bool { get }

  /**
      @abstract Returns whether the receiver is session-only.
      @result YES if this receiver should be discarded at the end of the
      session (regardless of expiration date), NO if receiver need not
      be discarded at the end of the session.
  */
  @available(swift, obsoleted: 3, renamed: "isSessionOnly")
  var sessionOnly: Bool { get }

  /**
      @abstract Returns the domain of the receiver.
      @discussion This value specifies URL domain to which the cookie
      should be sent. A domain with a leading dot means the cookie
      should be sent to subdomains as well, assuming certain other
      restrictions are valid. See RFC 2965 for more detail.
      @result The domain of the receiver.
  */
  var domain: String { get }

  /**
      @abstract Returns the path of the receiver.
      @discussion This value specifies the URL path under the cookie's
      domain for which this cookie should be sent. The cookie will also
      be sent for children of that path, so "/" is the most general.
      @result The path of the receiver.
  */
  var path: String { get }

  /**
      @abstract Returns whether the receiver should be sent only over
      secure channels
      @discussion Cookies may be marked secure by a server (or by a javascript).
      Cookies marked as such must only be sent via an encrypted connection to 
      trusted servers (i.e. via SSL or TLS), and should not be delievered to any
      javascript applications to prevent cross-site scripting vulnerabilities.
      @result YES if this cookie should be sent only over secure channels,
      NO otherwise.
  */
  var isSecure: Bool { get }

  /**
      @abstract Returns whether the receiver should be sent only over
      secure channels
      @discussion Cookies may be marked secure by a server (or by a javascript).
      Cookies marked as such must only be sent via an encrypted connection to 
      trusted servers (i.e. via SSL or TLS), and should not be delievered to any
      javascript applications to prevent cross-site scripting vulnerabilities.
      @result YES if this cookie should be sent only over secure channels,
      NO otherwise.
  */
  @available(swift, obsoleted: 3, renamed: "isSecure")
  var secure: Bool { get }

  /**
      @abstract Returns whether the receiver should only be sent to HTTP servers
      per RFC 2965
      @discussion Cookies may be marked as HTTPOnly by a server (or by a javascript).
      Cookies marked as such must only be sent via HTTP Headers in HTTP Requests
      for URL's that match both the path and domain of the respective Cookies.
      Specifically these cookies should not be delivered to any javascript 
      applications to prevent cross-site scripting vulnerabilities.
      @result YES if this cookie should only be sent via HTTP headers,
      NO otherwise.
  */
  var isHTTPOnly: Bool { get }

  /**
      @abstract Returns whether the receiver should only be sent to HTTP servers
      per RFC 2965
      @discussion Cookies may be marked as HTTPOnly by a server (or by a javascript).
      Cookies marked as such must only be sent via HTTP Headers in HTTP Requests
      for URL's that match both the path and domain of the respective Cookies.
      Specifically these cookies should not be delivered to any javascript 
      applications to prevent cross-site scripting vulnerabilities.
      @result YES if this cookie should only be sent via HTTP headers,
      NO otherwise.
  */
  @available(swift, obsoleted: 3, renamed: "isHTTPOnly")
  var HTTPOnly: Bool { get }

  /**
      @abstract Returns the comment of the receiver.
      @discussion This value specifies a string which is suitable for
      presentation to the user explaining the contents and purpose of this
      cookie. It may be nil.
      @result The comment of the receiver, or nil if the receiver has no
      comment.
  */
  var comment: String? { get }

  /**
      @abstract Returns the comment URL of the receiver.
      @discussion This value specifies a URL which is suitable for
      presentation to the user as a link for further information about
      this cookie. It may be nil.
      @result The comment URL of the receiver, or nil if the receiver
      has no comment URL.
  */
  var commentURL: URL? { get }

  /**
      @abstract Returns the list ports to which the receiver should be
      sent.
      @discussion This value specifies an NSArray of NSNumbers
      (containing integers) which specify the only ports to which this
      cookie should be sent.
      @result The list ports to which the receiver should be sent. The
      array may be nil, in which case this cookie can be sent to any
      port.
  */
  var portList: [NSNumber]? { get }

  /**
   @abstract Returns the value of the same site attribute on the cookie.
   @discussion Cookies can be marked with an attribute Strict or Lax.
   Cookies marked with "strict" (NSHTTPCookieSameSiteStrict) are not sent along with cross-site requests.
   Cookies marked with "lax" (NSHTTPCookieSameSiteLax) sent along cross-site requests provided the
   cross-site requests are top-level-requests (one that changes the url in the address bar).
   The attribute value is canonicalized and stored. Any value other than the default (strict and lax) will be ignored.
   @result strict or lax. The result could also be nil, in which case the
   cookie will be sent along with all cross-site requests.
   */
  @available(iOS 13.0, *)
  var sameSitePolicy: HTTPCookieStringPolicy? { get }
  init()
}

/**
    @class NSHTTPCookie
    @abstract NSHTTPCookie represents an http cookie.
    @discussion A NSHTTPCookie instance represents a single http cookie. It is
    an immutable object initialized from a dictionary that contains
    the various cookie attributes. It has accessors to get the various
    attributes of a cookie.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "HTTPCookie")
typealias NSHTTPCookie = HTTPCookie
