@_exported import CoreFoundation

let NSUndoCloseGroupingRunLoopOrdering: Int
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "UndoManager")
typealias NSUndoManager = UndoManager
@available(iOS 3.0, *)
@_nonSendable(_assumed) class UndoManager : NSObject {
  func beginUndoGrouping()
  func endUndoGrouping()
  var groupingLevel: Int { get }
  func disableUndoRegistration()
  func enableUndoRegistration()
  var isUndoRegistrationEnabled: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isUndoRegistrationEnabled")
  var undoRegistrationEnabled: Bool { get }
  var groupsByEvent: Bool
  var levelsOfUndo: Int
  var runLoopModes: [RunLoop.Mode]
  func undo()
  func redo()
  func undoNestedGroup()
  var canUndo: Bool { get }
  var canRedo: Bool { get }
  var isUndoing: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isUndoing")
  var undoing: Bool { get }
  var isRedoing: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isRedoing")
  var redoing: Bool { get }
  func removeAllActions()
  func removeAllActions(withTarget target: Any)
  @available(swift, obsoleted: 3, renamed: "removeAllActions(withTarget:)")
  func removeAllActionsWithTarget(_ target: Any)
  func registerUndo(withTarget target: Any, selector: Selector, object anObject: Any?)
  @available(swift, obsoleted: 3, renamed: "registerUndo(withTarget:selector:object:)")
  func registerUndoWithTarget(_ target: Any, selector: Selector, object anObject: Any?)
  func prepare(withInvocationTarget target: Any) -> Any
  @available(swift, obsoleted: 3, renamed: "prepare(withInvocationTarget:)")
  func prepareWithInvocationTarget(_ target: Any) -> Any

  /** @abstract records single undo operation for the specified target
      @param target non-nil target of the undo operation
      @param undoHandler non-nil block to be executed for the undo operation
      @discussion
        As with other undo operations, this does not strongly retain target. Care should be taken to avoid introducing retain cycles by other references captured by the block.
   */
  @available(iOS 9.0, *)
  func __registerUndoWithTarget(_ target: Any, handler undoHandler: @escaping @Sendable (Any) -> Void)
  @available(iOS 5.0, *)
  func setActionIsDiscardable(_ discardable: Bool)
  @available(iOS 5.0, *)
  var undoActionIsDiscardable: Bool { get }
  @available(iOS 5.0, *)
  var redoActionIsDiscardable: Bool { get }
  var undoActionName: String { get }
  var redoActionName: String { get }
  func setActionName(_ actionName: String)
  var undoMenuItemTitle: String { get }
  var redoMenuItemTitle: String { get }
  func undoMenuTitle(forUndoActionName actionName: String) -> String
  @available(swift, obsoleted: 3, renamed: "undoMenuTitle(forUndoActionName:)")
  func undoMenuTitleForUndoActionName(_ actionName: String) -> String
  func redoMenuTitle(forUndoActionName actionName: String) -> String
  @available(swift, obsoleted: 3, renamed: "redoMenuTitle(forUndoActionName:)")
  func redoMenuTitleForUndoActionName(_ actionName: String) -> String
  init()
}

extension UndoManager {
  @available(macOS 10.11, iOS 9.0, *)
  func registerUndo<TargetType>(withTarget target: TargetType, handler: @escaping (TargetType) -> Void) where TargetType : AnyObject
}

@available(*, unavailable)
extension UndoManager : @unchecked Sendable {
}
@available(iOS 5.0, *)
let NSUndoManagerGroupIsDiscardableKey: String
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerCheckpoint")
let NSUndoManagerCheckpointNotification: NSNotification.Name
extension NSNotification.Name {
  @available(iOS 3.0, *)
  static let NSUndoManagerCheckpoint: NSNotification.Name
  @available(iOS 3.0, *)
  static let NSUndoManagerWillUndoChange: NSNotification.Name
  @available(iOS 3.0, *)
  static let NSUndoManagerWillRedoChange: NSNotification.Name
  @available(iOS 3.0, *)
  static let NSUndoManagerDidUndoChange: NSNotification.Name
  @available(iOS 3.0, *)
  static let NSUndoManagerDidRedoChange: NSNotification.Name
  @available(iOS 3.0, *)
  static let NSUndoManagerDidOpenUndoGroup: NSNotification.Name
  @available(iOS 3.0, *)
  static let NSUndoManagerWillCloseUndoGroup: NSNotification.Name
  @available(iOS 5.0, *)
  static let NSUndoManagerDidCloseUndoGroup: NSNotification.Name
}
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerWillUndoChange")
let NSUndoManagerWillUndoChangeNotification: NSNotification.Name
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerWillRedoChange")
let NSUndoManagerWillRedoChangeNotification: NSNotification.Name
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerDidUndoChange")
let NSUndoManagerDidUndoChangeNotification: NSNotification.Name
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerDidRedoChange")
let NSUndoManagerDidRedoChangeNotification: NSNotification.Name
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerDidOpenUndoGroup")
let NSUndoManagerDidOpenUndoGroupNotification: NSNotification.Name
@available(iOS 3.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerWillCloseUndoGroup")
let NSUndoManagerWillCloseUndoGroupNotification: NSNotification.Name
@available(iOS 5.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSUndoManagerDidCloseUndoGroup")
let NSUndoManagerDidCloseUndoGroupNotification: NSNotification.Name
