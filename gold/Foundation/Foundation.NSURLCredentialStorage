@_exported import CoreFoundation


/**
    @class NSURLCredentialStorage
    @discussion NSURLCredentialStorage implements a singleton object (shared instance) which manages the shared credentials cache. Note: Whereas in Mac OS X any application can access any credential with a persistence of NSURLCredentialPersistencePermanent provided the user gives permission, in iPhone OS an application can access only its own credentials.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "URLCredentialStorage")
typealias NSURLCredentialStorage = URLCredentialStorage

/**
    @class NSURLCredentialStorage
    @discussion NSURLCredentialStorage implements a singleton object (shared instance) which manages the shared credentials cache. Note: Whereas in Mac OS X any application can access any credential with a persistence of NSURLCredentialPersistencePermanent provided the user gives permission, in iPhone OS an application can access only its own credentials.
*/
@available(iOS 2.0, *)
@_nonSendable(_assumed) class URLCredentialStorage : NSObject, @unchecked Sendable {

  /**
      @property sharedCredentialStorage
      @abstract Get the shared singleton authentication storage
      @result the shared authentication storage
  */
  class var shared: URLCredentialStorage { get }

  /**
      @property sharedCredentialStorage
      @abstract Get the shared singleton authentication storage
      @result the shared authentication storage
  */
  @available(swift, obsoleted: 3, renamed: "shared")
  class var sharedCredentialStorage: URLCredentialStorage { get }

  /**
      @method credentialsForProtectionSpace:
      @abstract Get a dictionary mapping usernames to credentials for the specified protection space.
      @param space An NSURLProtectionSpace indicating the protection space for which to get credentials
      @result A dictionary where the keys are usernames and the values are the corresponding NSURLCredentials.
  */
  func credentials(for space: URLProtectionSpace) -> [String : URLCredential]?

  /**
      @method credentialsForProtectionSpace:
      @abstract Get a dictionary mapping usernames to credentials for the specified protection space.
      @param space An NSURLProtectionSpace indicating the protection space for which to get credentials
      @result A dictionary where the keys are usernames and the values are the corresponding NSURLCredentials.
  */
  @available(swift, obsoleted: 3, renamed: "credentials(for:)")
  func credentialsForProtectionSpace(_ space: URLProtectionSpace) -> [String : URLCredential]?

  /**
      @abstract Get a dictionary mapping NSURLProtectionSpaces to dictionaries which map usernames to NSURLCredentials
      @result an NSDictionary where the keys are NSURLProtectionSpaces
      and the values are dictionaries, in which the keys are usernames
      and the values are NSURLCredentials
  */
  var allCredentials: [URLProtectionSpace : [String : URLCredential]] { get }

  /**
      @method setCredential:forProtectionSpace:
      @abstract Add a new credential to the set for the specified protection space or replace an existing one.
      @param credential The credential to set.
      @param space The protection space for which to add it. 
      @discussion Multiple credentials may be set for a given protection space, but each must have
      a distinct user. If a credential with the same user is already set for the protection space,
      the new one will replace it.
  */
  func set(_ credential: URLCredential, for space: URLProtectionSpace)

  /**
      @method setCredential:forProtectionSpace:
      @abstract Add a new credential to the set for the specified protection space or replace an existing one.
      @param credential The credential to set.
      @param space The protection space for which to add it. 
      @discussion Multiple credentials may be set for a given protection space, but each must have
      a distinct user. If a credential with the same user is already set for the protection space,
      the new one will replace it.
  */
  @available(swift, obsoleted: 3, renamed: "set(_:for:)")
  func setCredential(_ credential: URLCredential, forProtectionSpace space: URLProtectionSpace)

  /**
      @method removeCredential:forProtectionSpace:
      @abstract Remove the credential from the set for the specified protection space.
      @param credential The credential to remove.
      @param space The protection space for which a credential should be removed
      @discussion The credential is removed from both persistent and temporary storage. A credential that
      has a persistence policy of NSURLCredentialPersistenceSynchronizable will fail.  
      See removeCredential:forProtectionSpace:options.
  */
  func remove(_ credential: URLCredential, for space: URLProtectionSpace)

  /**
      @method removeCredential:forProtectionSpace:
      @abstract Remove the credential from the set for the specified protection space.
      @param credential The credential to remove.
      @param space The protection space for which a credential should be removed
      @discussion The credential is removed from both persistent and temporary storage. A credential that
      has a persistence policy of NSURLCredentialPersistenceSynchronizable will fail.  
      See removeCredential:forProtectionSpace:options.
  */
  @available(swift, obsoleted: 3, renamed: "remove(_:for:)")
  func removeCredential(_ credential: URLCredential, forProtectionSpace space: URLProtectionSpace)

  /**
   @method removeCredential:forProtectionSpace:options
   @abstract Remove the credential from the set for the specified protection space based on options.
   @param credential The credential to remove.
   @param space The protection space for which a credential should be removed
   @param options A dictionary containing options to consider when removing the credential.  This should
   be used when trying to delete a credential that has the NSURLCredentialPersistenceSynchronizable policy.
   Please note that when NSURLCredential objects that have a NSURLCredentialPersistenceSynchronizable policy
   are removed, the credential will be removed on all devices that contain this credential.
   @discussion The credential is removed from both persistent and temporary storage.
   */
  @available(iOS 7.0, *)
  func remove(_ credential: URLCredential, for space: URLProtectionSpace, options: [String : Any]? = nil)

  /**
   @method removeCredential:forProtectionSpace:options
   @abstract Remove the credential from the set for the specified protection space based on options.
   @param credential The credential to remove.
   @param space The protection space for which a credential should be removed
   @param options A dictionary containing options to consider when removing the credential.  This should
   be used when trying to delete a credential that has the NSURLCredentialPersistenceSynchronizable policy.
   Please note that when NSURLCredential objects that have a NSURLCredentialPersistenceSynchronizable policy
   are removed, the credential will be removed on all devices that contain this credential.
   @discussion The credential is removed from both persistent and temporary storage.
   */
  @available(iOS 7.0, *)
  @available(swift, obsoleted: 3, renamed: "remove(_:for:options:)")
  func removeCredential(_ credential: URLCredential, forProtectionSpace space: URLProtectionSpace, options: [String : Any]? = nil)

  /**
      @method defaultCredentialForProtectionSpace:
      @abstract Get the default credential for the specified protection space.
      @param space The protection space for which to get the default credential.
  */
  func defaultCredential(for space: URLProtectionSpace) -> URLCredential?

  /**
      @method defaultCredentialForProtectionSpace:
      @abstract Get the default credential for the specified protection space.
      @param space The protection space for which to get the default credential.
  */
  @available(swift, obsoleted: 3, renamed: "defaultCredential(for:)")
  func defaultCredentialForProtectionSpace(_ space: URLProtectionSpace) -> URLCredential?

  /**
      @method setDefaultCredential:forProtectionSpace:
      @abstract Set the default credential for the specified protection space.
      @param credential The credential to set as default.
      @param space The protection space for which the credential should be set as default.
      @discussion If the credential is not yet in the set for the protection space, it will be added to it.
  */
  func setDefaultCredential(_ credential: URLCredential, for space: URLProtectionSpace)

  /**
      @method setDefaultCredential:forProtectionSpace:
      @abstract Set the default credential for the specified protection space.
      @param credential The credential to set as default.
      @param space The protection space for which the credential should be set as default.
      @discussion If the credential is not yet in the set for the protection space, it will be added to it.
  */
  @available(swift, obsoleted: 3, renamed: "setDefaultCredential(_:for:)")
  func setDefaultCredential(_ credential: URLCredential, forProtectionSpace space: URLProtectionSpace)
  init()
}
extension URLCredentialStorage {
  @available(iOS 8.0, *)
  func getCredentials(for protectionSpace: URLProtectionSpace, task: URLSessionTask, completionHandler: @escaping @Sendable ([String : URLCredential]?) -> Void)
  @available(iOS 8.0, *)
  func credentials(for protectionSpace: URLProtectionSpace, task: URLSessionTask) async -> [String : URLCredential]?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getCredentials(for:task:completionHandler:)")
  func getCredentialsForProtectionSpace(_ protectionSpace: URLProtectionSpace, task: URLSessionTask, completionHandler: @escaping @Sendable ([String : URLCredential]?) -> Void)
  @available(iOS 8.0, *)
  func set(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, task: URLSessionTask)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "set(_:for:task:)")
  func setCredential(_ credential: URLCredential, forProtectionSpace protectionSpace: URLProtectionSpace, task: URLSessionTask)
  @available(iOS 8.0, *)
  func remove(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, options: [String : Any]? = nil, task: URLSessionTask)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "remove(_:for:options:task:)")
  func removeCredential(_ credential: URLCredential, forProtectionSpace protectionSpace: URLProtectionSpace, options: [String : Any]? = nil, task: URLSessionTask)
  @available(iOS 8.0, *)
  func getDefaultCredential(for space: URLProtectionSpace, task: URLSessionTask, completionHandler: @escaping @Sendable (URLCredential?) -> Void)
  @available(iOS 8.0, *)
  func defaultCredential(for space: URLProtectionSpace, task: URLSessionTask) async -> URLCredential?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getDefaultCredential(for:task:completionHandler:)")
  func getDefaultCredentialForProtectionSpace(_ space: URLProtectionSpace, task: URLSessionTask, completionHandler: @escaping @Sendable (URLCredential?) -> Void)
  @available(iOS 8.0, *)
  func setDefaultCredential(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, task: URLSessionTask)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "setDefaultCredential(_:for:task:)")
  func setDefaultCredential(_ credential: URLCredential, forProtectionSpace protectionSpace: URLProtectionSpace, task: URLSessionTask)
}

/**
    @const NSURLCredentialStorageChangedNotification
    @abstract This notification is sent on the main thread whenever
    the set of stored credentials changes.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSURLCredentialStorageChanged")
let NSURLCredentialStorageChangedNotification: NSNotification.Name
extension NSNotification.Name {

  /**
      @const NSURLCredentialStorageChangedNotification
      @abstract This notification is sent on the main thread whenever
      the set of stored credentials changes.
  */
  @available(iOS 2.0, *)
  static let NSURLCredentialStorageChanged: NSNotification.Name
}
@available(iOS 7.0, *)
let NSURLCredentialStorageRemoveSynchronizableCredentials: String
