@_exported import CoreFoundation

let NSURLErrorDomain: String

/**
    @const NSURLErrorFailingURLErrorKey
    @abstract The NSError userInfo dictionary key used to store and retrieve the URL which caused a load to fail.
*/
@available(iOS 4.0, *)
let NSURLErrorFailingURLErrorKey: String

/**
    @const NSURLErrorFailingURLStringErrorKey
    @abstract The NSError userInfo dictionary key used to store and retrieve the NSString object for the URL which caused a load to fail.
    @discussion This constant supersedes NSErrorFailingURLStringKey, which was deprecated in Mac OS X 10.6.  Both constants refer to the same value for backward-compatibility, but this symbol name has a better prefix.
*/
@available(iOS 4.0, *)
let NSURLErrorFailingURLStringErrorKey: String

/**
    @const NSErrorFailingURLStringKey
    @abstract The NSError userInfo dictionary key used to store and retrieve the NSString object for the URL which caused a load to fail.
    @discussion This constant is deprecated in Mac OS X 10.6, and is superseded by NSURLErrorFailingURLStringErrorKey.  Both constants refer to the same value for backward-compatibility, but the new symbol name has a better prefix.
*/
@available(iOS, unavailable, introduced: 2.0, deprecated: 4.0, message: "Use NSURLErrorFailingURLStringErrorKey instead")
let NSErrorFailingURLStringKey: String

/**
    @const NSURLErrorFailingURLPeerTrustErrorKey
    @abstract The NSError userInfo dictionary key used to store and retrieve the SecTrustRef object representing the state of a failed SSL handshake.
 */
@available(iOS 4.0, *)
let NSURLErrorFailingURLPeerTrustErrorKey: String

/**
    @const NSURLErrorBackgroundTaskCancelledReasonKey
    @abstract The NSError userInfo dictionary key used to store and retrieve the NSNumber corresponding to the reason why a background
	NSURLSessionTask was cancelled
 */
@available(iOS 8.0, *)
let NSURLErrorBackgroundTaskCancelledReasonKey: String
var NSURLErrorCancelledReasonUserForceQuitApplication: Int { get }
var NSURLErrorCancelledReasonBackgroundUpdatesDisabled: Int { get }
@available(iOS 8.0, *)
var NSURLErrorCancelledReasonInsufficientSystemResources: Int { get }

/**
    @const NSURLErrorNetworkUnavailableReasonKey
    @abstract The NSErrorUserInfoKey used to store and retrieve the NSNumber object corresponding to the reason why the network is unavailable when the task failed due to unsatisfiable network constraints.  See the NSURLErrorNetworkUnavailableReason enum for details.
*/
@available(iOS 13.0, *)
let NSURLErrorNetworkUnavailableReasonKey: String

/**
    @enum Codes associated with NSURLErrorNetworkUnavailableReasonKey
    @abstract Constants used by NSError to indicate that a URLSessionTask failed because of unsatisfiable network constraints.
    @discussion For example if the URLSessionConfiguration property allowsExpensiveNetworkAccess was set to NO and the only interfaces available were marked as expensive then the task would fail with a NSURLErrorNotConnectedToInternet error and the userInfo dictionary would contain the value NSURLErrorNetworkUnavailableReasonExpensive for the key NSURLErrorNetworkUnavailableReason.
*/
@available(iOS 13.0, *)
@available(*, unavailable, message: "Not available in Swift")
enum NSURLErrorNetworkUnavailableReason : Int, @unchecked Sendable {
  init?(rawValue: Int)
  var rawValue: Int { get }
  typealias RawValue = Int
  case cellular
  @available(swift, obsoleted: 3, renamed: "cellular")
  static var Cellular: NSURLErrorNetworkUnavailableReason { get }
  case expensive
  @available(swift, obsoleted: 3, renamed: "expensive")
  static var Expensive: NSURLErrorNetworkUnavailableReason { get }
  case constrained
  @available(swift, obsoleted: 3, renamed: "constrained")
  static var Constrained: NSURLErrorNetworkUnavailableReason { get }
}
var NSURLErrorUnknown: Int { get }
var NSURLErrorCancelled: Int { get }
var NSURLErrorBadURL: Int { get }
var NSURLErrorTimedOut: Int { get }
var NSURLErrorUnsupportedURL: Int { get }
var NSURLErrorCannotFindHost: Int { get }
var NSURLErrorCannotConnectToHost: Int { get }
var NSURLErrorNetworkConnectionLost: Int { get }
var NSURLErrorDNSLookupFailed: Int { get }
var NSURLErrorHTTPTooManyRedirects: Int { get }
var NSURLErrorResourceUnavailable: Int { get }
var NSURLErrorNotConnectedToInternet: Int { get }
var NSURLErrorRedirectToNonExistentLocation: Int { get }
var NSURLErrorBadServerResponse: Int { get }
var NSURLErrorUserCancelledAuthentication: Int { get }
var NSURLErrorUserAuthenticationRequired: Int { get }
var NSURLErrorZeroByteResource: Int { get }
var NSURLErrorCannotDecodeRawData: Int { get }
var NSURLErrorCannotDecodeContentData: Int { get }
var NSURLErrorCannotParseResponse: Int { get }
@available(iOS 9.0, *)
var NSURLErrorAppTransportSecurityRequiresSecureConnection: Int { get }
var NSURLErrorFileDoesNotExist: Int { get }
var NSURLErrorFileIsDirectory: Int { get }
var NSURLErrorNoPermissionsToReadFile: Int { get }
@available(iOS 2.0, *)
var NSURLErrorDataLengthExceedsMaximum: Int { get }
@available(iOS 10.3, *)
var NSURLErrorFileOutsideSafeArea: Int { get }
var NSURLErrorSecureConnectionFailed: Int { get }
var NSURLErrorServerCertificateHasBadDate: Int { get }
var NSURLErrorServerCertificateUntrusted: Int { get }
var NSURLErrorServerCertificateHasUnknownRoot: Int { get }
var NSURLErrorServerCertificateNotYetValid: Int { get }
var NSURLErrorClientCertificateRejected: Int { get }
var NSURLErrorClientCertificateRequired: Int { get }
var NSURLErrorCannotLoadFromNetwork: Int { get }
var NSURLErrorCannotCreateFile: Int { get }
var NSURLErrorCannotOpenFile: Int { get }
var NSURLErrorCannotCloseFile: Int { get }
var NSURLErrorCannotWriteToFile: Int { get }
var NSURLErrorCannotRemoveFile: Int { get }
var NSURLErrorCannotMoveFile: Int { get }
var NSURLErrorDownloadDecodingFailedMidStream: Int { get }
var NSURLErrorDownloadDecodingFailedToComplete: Int { get }
@available(iOS 3.0, *)
var NSURLErrorInternationalRoamingOff: Int { get }
@available(iOS 3.0, *)
var NSURLErrorCallIsActive: Int { get }
@available(iOS 3.0, *)
var NSURLErrorDataNotAllowed: Int { get }
@available(iOS 3.0, *)
var NSURLErrorRequestBodyStreamExhausted: Int { get }
@available(iOS 8.0, *)
var NSURLErrorBackgroundSessionRequiresSharedContainer: Int { get }
@available(iOS 8.0, *)
var NSURLErrorBackgroundSessionInUseByAnotherProcess: Int { get }
@available(iOS 8.0, *)
var NSURLErrorBackgroundSessionWasDisconnected: Int { get }
