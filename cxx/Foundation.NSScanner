@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "Scanner")
typealias NSScanner = Scanner
class Scanner : NSObject, NSCopying {
  var string: String { get }
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  var scanLocation: Int
  var charactersToBeSkipped: CharacterSet?
  var caseSensitive: Bool
  var locale: Any?
  init(string: String)
  convenience init!()
  func copy(with zone: NSZone? = nil) -> Any
}

@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension Scanner {
  enum NumberRepresentation {
    case decimal
    case hexadecimal
    static func == (a: Scanner.NumberRepresentation, b: Scanner.NumberRepresentation) -> Bool
    func hash(into hasher: inout Hasher)
    var hashValue: Int { get }
  }
  var currentIndex: String.Index
  func scanInt(representation: Scanner.NumberRepresentation = .decimal) -> Int?
  func scanInt32(representation: Scanner.NumberRepresentation = .decimal) -> Int32?
  func scanInt64(representation: Scanner.NumberRepresentation = .decimal) -> Int64?
  func scanUInt64(representation: Scanner.NumberRepresentation = .decimal) -> UInt64?
  func scanFloat(representation: Scanner.NumberRepresentation = .decimal) -> Float?
  func scanDouble(representation: Scanner.NumberRepresentation = .decimal) -> Double?
  func scanDecimal() -> Decimal?
  func scanString(_ searchString: String) -> String?
  func scanCharacters(from set: CharacterSet) -> String?
  func scanUpToString(_ substring: String) -> String?
  func scanUpToCharacters(from set: CharacterSet) -> String?
  func scanCharacter() -> Character?
}

@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension Scanner.NumberRepresentation : Equatable {
}

@available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
extension Scanner.NumberRepresentation : Hashable {
}
extension Scanner {
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanInt(_ result: UnsafeMutablePointer<Int32>?) -> Bool
  @available(iOS 2.0, *)
  func scanInteger(_ result: UnsafeMutablePointer<Int>?) -> Bool
  func scanLongLong(_ result: UnsafeMutablePointer<Int64>?) -> Bool
  @available(iOS 7.0, *)
  func scanUnsignedLongLong(_ result: UnsafeMutablePointer<UInt64>?) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanFloat(_ result: UnsafeMutablePointer<Float>?) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanDouble(_ result: UnsafeMutablePointer<Double>?) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanHexInt(_ result: UnsafeMutablePointer<UInt32>?) -> Bool
  @available(iOS 2.0, *)
  func scanHexLongLong(_ result: UnsafeMutablePointer<UInt64>?) -> Bool
  @available(iOS 2.0, *)
  func scanHexFloat(_ result: UnsafeMutablePointer<Float>?) -> Bool
  @available(iOS 2.0, *)
  func scanHexDouble(_ result: UnsafeMutablePointer<Double>?) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanString(_ string: String, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "scanString(_:into:)")
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanString(_ string: String, intoString result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanCharacters(from set: CharacterSet, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "scanCharacters(from:into:)")
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanCharactersFromSet(_ set: CharacterSet, intoString result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanUp(to string: String, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "scanUp(to:into:)")
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanUpToString(_ string: String, intoString result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanUpToCharacters(from set: CharacterSet, into result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "scanUpToCharacters(from:into:)")
  @available(iOS, introduced: 2.0, deprecated: 13.0)
  func scanUpToCharactersFromSet(_ set: CharacterSet, intoString result: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  var isAtEnd: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isAtEnd")
  var atEnd: Bool { get }
  @available(*, unavailable, renamed: "init(string:)", message: "Not available in Swift")
  class func scannerWithString(_ string: String) -> Self
  class func localizedScanner(with string: String) -> Any
  @available(swift, obsoleted: 3, renamed: "localizedScanner(with:)")
  class func localizedScannerWithString(_ string: String) -> Any
}
