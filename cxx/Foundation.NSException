@_exported import CoreFoundation


/***************	Generic Exception names		***************/
@available(swift, obsoleted: 3, renamed: "NSExceptionName.genericException")
let NSGenericException: NSExceptionName
extension NSExceptionName {

  /***************	Generic Exception names		***************/
  static let genericException: NSExceptionName
  static let rangeException: NSExceptionName
  static let invalidArgumentException: NSExceptionName
  static let internalInconsistencyException: NSExceptionName
  static let mallocException: NSExceptionName
  static let objectInaccessibleException: NSExceptionName
  static let objectNotAvailableException: NSExceptionName
  static let destinationInvalidException: NSExceptionName
  static let portTimeoutException: NSExceptionName
  static let invalidSendPortException: NSExceptionName
  static let invalidReceivePortException: NSExceptionName
  static let portSendException: NSExceptionName
  static let portReceiveException: NSExceptionName
  static let oldStyleException: NSExceptionName
  static let inconsistentArchiveException: NSExceptionName
}
@available(swift, obsoleted: 3, renamed: "NSExceptionName.rangeException")
let NSRangeException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.invalidArgumentException")
let NSInvalidArgumentException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.internalInconsistencyException")
let NSInternalInconsistencyException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.mallocException")
let NSMallocException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.objectInaccessibleException")
let NSObjectInaccessibleException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.objectNotAvailableException")
let NSObjectNotAvailableException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.destinationInvalidException")
let NSDestinationInvalidException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.portTimeoutException")
let NSPortTimeoutException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.invalidSendPortException")
let NSInvalidSendPortException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.invalidReceivePortException")
let NSInvalidReceivePortException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.portSendException")
let NSPortSendException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.portReceiveException")
let NSPortReceiveException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.oldStyleException")
let NSOldStyleException: NSExceptionName
@available(swift, obsoleted: 3, renamed: "NSExceptionName.inconsistentArchiveException")
let NSInconsistentArchiveException: NSExceptionName
class NSException : NSObject, NSCopying, NSSecureCoding {
  @available(*, unavailable, message: "superseded by import of -[NSException initWithName:reason:userInfo:]")
  /*not inherited*/ init(name: NSExceptionName, reason: String?, userInfo: [AnyHashable : Any]? = nil)
  @available(*, unavailable, renamed: "init(name:reason:userInfo:)", message: "Not available in Swift")
  class func exceptionWithName(_ name: NSExceptionName, reason: String?, userInfo: [AnyHashable : Any]? = nil) -> NSException
  init(name aName: NSExceptionName, reason aReason: String?, userInfo aUserInfo: [AnyHashable : Any]? = nil)
  var name: NSExceptionName { get }
  var reason: String? { get }
  var userInfo: [AnyHashable : Any]? { get }
  @available(iOS 2.0, *)
  var callStackReturnAddresses: [NSNumber] { get }
  @available(iOS 4.0, *)
  var callStackSymbols: [String] { get }
  func raise()
  convenience init!()
  class var supportsSecureCoding: Bool { get }
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}
extension NSException {
  class func raise(_ name: NSExceptionName, format: String, arguments argList: CVaListPointer)
}
typealias NSUncaughtExceptionHandler = (NSException) -> Void
func NSGetUncaughtExceptionHandler() -> (@convention(c) (NSException) -> Void)?
func NSSetUncaughtExceptionHandler(_: (@convention(c) (NSException) -> Void)?)
@available(iOS 4.0, *)
let NSAssertionHandlerKey: String
class NSAssertionHandler : NSObject {
  class var current: NSAssertionHandler { get }
  @available(swift, obsoleted: 3, renamed: "current")
  class var currentHandler: NSAssertionHandler { get }
  init!()
}
