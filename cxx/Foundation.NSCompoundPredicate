@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "NSCompoundPredicate.LogicalType")
typealias NSCompoundPredicateType = NSCompoundPredicate.LogicalType
extension NSCompoundPredicate {
  enum LogicalType : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case notPredicateType
    @available(swift, obsoleted: 3, renamed: "notPredicateType")
    static var NotPredicateType: NSCompoundPredicate.LogicalType { get }
    case andPredicateType
    @available(swift, obsoleted: 3, renamed: "andPredicateType")
    static var AndPredicateType: NSCompoundPredicate.LogicalType { get }
    case orPredicateType
    @available(swift, obsoleted: 3, renamed: "orPredicateType")
    static var OrPredicateType: NSCompoundPredicate.LogicalType { get }
  }
}
@available(iOS 3.0, *)
class NSCompoundPredicate : NSPredicate {
  init(type: NSCompoundPredicate.LogicalType, subpredicates: [NSPredicate])
  init?(coder: NSCoder)
  var compoundPredicateType: NSCompoundPredicate.LogicalType { get }
  var subpredicates: [Any] { get }

  /*** Convenience Methods ***/
  /*not inherited*/ init(andPredicateWithSubpredicates subpredicates: [NSPredicate])

  /*** Convenience Methods ***/
  @available(*, unavailable, renamed: "init(andPredicateWithSubpredicates:)", message: "Not available in Swift")
  class func andPredicateWithSubpredicates(_ subpredicates: [NSPredicate]) -> NSCompoundPredicate
  /*not inherited*/ init(orPredicateWithSubpredicates subpredicates: [NSPredicate])
  @available(*, unavailable, renamed: "init(orPredicateWithSubpredicates:)", message: "Not available in Swift")
  class func orPredicateWithSubpredicates(_ subpredicates: [NSPredicate]) -> NSCompoundPredicate
  /*not inherited*/ init(notPredicateWithSubpredicate predicate: NSPredicate)
  @available(*, unavailable, renamed: "init(notPredicateWithSubpredicate:)", message: "Not available in Swift")
  class func notPredicateWithSubpredicate(_ predicate: NSPredicate) -> NSCompoundPredicate
  convenience init!()
}
