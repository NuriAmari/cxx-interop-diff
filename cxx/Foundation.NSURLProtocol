@_exported import CoreFoundation


/**
@protocol NSURLProtocolClient
@discussion NSURLProtocolClient provides the interface to the URL
loading system that is intended for use by NSURLProtocol
implementors.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "URLProtocolClient")
typealias NSURLProtocolClient = URLProtocolClient

/**
@protocol NSURLProtocolClient
@discussion NSURLProtocolClient provides the interface to the URL
loading system that is intended for use by NSURLProtocol
implementors.
*/
@available(iOS 2.0, *)
protocol URLProtocolClient : NSObjectProtocol {

  /**
  @method URLProtocol:wasRedirectedToRequest:
   @abstract Indicates to an NSURLProtocolClient that a redirect has
   occurred.
   @param protocol the NSURLProtocol object sending the message.
   @param request the NSURLRequest to which the protocol implementation
   has redirected.
   */
  func urlProtocol(_ protocol: URLProtocol, wasRedirectedTo request: URLRequest, redirectResponse: URLResponse)

  /**
  @method URLProtocol:wasRedirectedToRequest:
   @abstract Indicates to an NSURLProtocolClient that a redirect has
   occurred.
   @param protocol the NSURLProtocol object sending the message.
   @param request the NSURLRequest to which the protocol implementation
   has redirected.
   */
  @available(swift, obsoleted: 3, renamed: "urlProtocol(_:wasRedirectedTo:redirectResponse:)")
  func URLProtocol(_ protocol: URLProtocol, wasRedirectedToRequest request: URLRequest, redirectResponse: URLResponse)

  /**
  @method URLProtocol:cachedResponseIsValid:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has examined a cached response and has
       determined that it is valid.
       @param protocol the NSURLProtocol object sending the message.
       @param cachedResponse the NSCachedURLResponse object that has
       examined and is valid.
       */
  func urlProtocol(_ protocol: URLProtocol, cachedResponseIsValid cachedResponse: CachedURLResponse)

  /**
  @method URLProtocol:cachedResponseIsValid:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has examined a cached response and has
       determined that it is valid.
       @param protocol the NSURLProtocol object sending the message.
       @param cachedResponse the NSCachedURLResponse object that has
       examined and is valid.
       */
  @available(swift, obsoleted: 3, renamed: "urlProtocol(_:cachedResponseIsValid:)")
  func URLProtocol(_ protocol: URLProtocol, cachedResponseIsValid cachedResponse: CachedURLResponse)

  /**
  @method URLProtocol:didReceiveResponse:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has created an NSURLResponse for the current load.
       @param protocol the NSURLProtocol object sending the message.
       @param response the NSURLResponse object the protocol implementation
       has created.
       @param policy The NSURLCacheStoragePolicy the protocol
       has determined should be used for the given response if the
       response is to be stored in a cache.
       */
  func urlProtocol(_ protocol: URLProtocol, didReceive response: URLResponse, cacheStoragePolicy policy: URLCache.StoragePolicy)

  /**
  @method URLProtocol:didReceiveResponse:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has created an NSURLResponse for the current load.
       @param protocol the NSURLProtocol object sending the message.
       @param response the NSURLResponse object the protocol implementation
       has created.
       @param policy The NSURLCacheStoragePolicy the protocol
       has determined should be used for the given response if the
       response is to be stored in a cache.
       */
  @available(swift, obsoleted: 3, renamed: "urlProtocol(_:didReceive:cacheStoragePolicy:)")
  func URLProtocol(_ protocol: URLProtocol, didReceiveResponse response: URLResponse, cacheStoragePolicy policy: URLCache.StoragePolicy)

  /**
  @method URLProtocol:didLoadData:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has loaded URL data.
       @discussion The data object must contain only new data loaded since
       the previous call to this method (if any), not cumulative data for
       the entire load.
       @param protocol the NSURLProtocol object sending the message.
       @param data URL load data being made available.
       */
  func urlProtocol(_ protocol: URLProtocol, didLoad data: Data)

  /**
  @method URLProtocol:didLoadData:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has loaded URL data.
       @discussion The data object must contain only new data loaded since
       the previous call to this method (if any), not cumulative data for
       the entire load.
       @param protocol the NSURLProtocol object sending the message.
       @param data URL load data being made available.
       */
  @available(swift, obsoleted: 3, renamed: "urlProtocol(_:didLoad:)")
  func URLProtocol(_ protocol: URLProtocol, didLoadData data: Data)

  /**
  @method URLProtocolDidFinishLoading:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has finished loading successfully.
       @param protocol the NSURLProtocol object sending the message.
       */
  func urlProtocolDidFinishLoading(_ protocol: URLProtocol)

  /**
  @method URLProtocolDidFinishLoading:
       @abstract Indicates to an NSURLProtocolClient that the protocol
       implementation has finished loading successfully.
       @param protocol the NSURLProtocol object sending the message.
       */
  @available(swift, obsoleted: 3, renamed: "urlProtocolDidFinishLoading(_:)")
  func URLProtocolDidFinishLoading(_ protocol: URLProtocol)

  /**
              @method URLProtocol:didFailWithError:
   @abstract Indicates to an NSURLProtocolClient that the protocol
   implementation has failed to load successfully.
   @param protocol the NSURLProtocol object sending the message.
   @param error The error that caused the load to fail.
   */
  func urlProtocol(_ protocol: URLProtocol, didFailWithError error: Error)

  /**
              @method URLProtocol:didFailWithError:
   @abstract Indicates to an NSURLProtocolClient that the protocol
   implementation has failed to load successfully.
   @param protocol the NSURLProtocol object sending the message.
   @param error The error that caused the load to fail.
   */
  @available(swift, obsoleted: 3, renamed: "urlProtocol(_:didFailWithError:)")
  func URLProtocol(_ protocol: URLProtocol, didFailWithError error: Error)

  /**
  @method URLProtocol:didReceiveAuthenticationChallenge:
       @abstract Start authentication for the specified request
       @param protocol The protocol object requesting authentication.
       @param challenge The authentication challenge.
       @discussion The protocol client guarantees that it will answer the
       request on the same thread that called this method. It may add a
       default credential to the challenge it issues to the connection delegate,
       if the protocol did not provide one.
       */
  func urlProtocol(_ protocol: URLProtocol, didReceive challenge: URLAuthenticationChallenge)

  /**
  @method URLProtocol:didReceiveAuthenticationChallenge:
       @abstract Start authentication for the specified request
       @param protocol The protocol object requesting authentication.
       @param challenge The authentication challenge.
       @discussion The protocol client guarantees that it will answer the
       request on the same thread that called this method. It may add a
       default credential to the challenge it issues to the connection delegate,
       if the protocol did not provide one.
       */
  @available(swift, obsoleted: 3, renamed: "urlProtocol(_:didReceive:)")
  func URLProtocol(_ protocol: URLProtocol, didReceiveAuthenticationChallenge challenge: URLAuthenticationChallenge)

  /**
  @method URLProtocol:didCancelAuthenticationChallenge:
       @abstract Cancel authentication for the specified request
       @param protocol The protocol object cancelling authentication.
       @param challenge The authentication challenge.
       */
  func urlProtocol(_ protocol: URLProtocol, didCancel challenge: URLAuthenticationChallenge)

  /**
  @method URLProtocol:didCancelAuthenticationChallenge:
       @abstract Cancel authentication for the specified request
       @param protocol The protocol object cancelling authentication.
       @param challenge The authentication challenge.
       */
  @available(swift, obsoleted: 3, renamed: "urlProtocol(_:didCancel:)")
  func URLProtocol(_ protocol: URLProtocol, didCancelAuthenticationChallenge challenge: URLAuthenticationChallenge)
}

/**
    @class NSURLProtocol
    
    @abstract NSURLProtocol is an abstract class which provides the
    basic structure for performing protocol-specific loading of URL
    data. Concrete subclasses handle the specifics associated with one
    or more protocols or URL schemes.
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "URLProtocol")
typealias NSURLProtocol = URLProtocol

/**
    @class NSURLProtocol
    
    @abstract NSURLProtocol is an abstract class which provides the
    basic structure for performing protocol-specific loading of URL
    data. Concrete subclasses handle the specifics associated with one
    or more protocols or URL schemes.
*/
@available(iOS 2.0, *)
class URLProtocol : NSObject {

  /** 
      @method initWithRequest:cachedResponse:client:
      @abstract Initializes an NSURLProtocol given request, 
      cached response, and client.
      @param request The request to load.
      @param cachedResponse A response that has been retrieved from the
      cache for the given request. The protocol implementation should
      apply protocol-specific validity checks if such tests are
      necessary.
      @param client The NSURLProtocolClient object that serves as the
      interface the protocol implementation can use to report results back
      to the URL loading system.
  */
  init(request: URLRequest, cachedResponse: CachedURLResponse?, client: URLProtocolClient?)

  /**
      @abstract Returns the NSURLProtocolClient of the receiver. 
      @result The NSURLProtocolClient of the receiver.  
  */
  var client: URLProtocolClient? { get }

  /**
      @abstract Returns the NSURLRequest of the receiver. 
      @result The NSURLRequest of the receiver. 
  */
  var request: URLRequest { get }

  /**
      @abstract Returns the NSCachedURLResponse of the receiver.  
      @result The NSCachedURLResponse of the receiver. 
  */
  @NSCopying var cachedResponse: CachedURLResponse? { get }

  /** 
      @method canInitWithRequest:
      @abstract This method determines whether this protocol can handle
      the given request.
      @discussion A concrete subclass should inspect the given request and
      determine whether or not the implementation can perform a load with
      that request. This is an abstract method. Sublasses must provide an
      implementation.
      @param request A request to inspect.
      @result YES if the protocol can handle the given request, NO if not.
  */
  class func canInit(with request: URLRequest) -> Bool

  /** 
      @method canInitWithRequest:
      @abstract This method determines whether this protocol can handle
      the given request.
      @discussion A concrete subclass should inspect the given request and
      determine whether or not the implementation can perform a load with
      that request. This is an abstract method. Sublasses must provide an
      implementation.
      @param request A request to inspect.
      @result YES if the protocol can handle the given request, NO if not.
  */
  @available(swift, obsoleted: 3, renamed: "canInit(with:)")
  class func canInitWithRequest(_ request: URLRequest) -> Bool

  /** 
      @method canonicalRequestForRequest:
      @abstract This method returns a canonical version of the given
      request.
      @discussion It is up to each concrete protocol implementation to
      define what "canonical" means. However, a protocol should
      guarantee that the same input request always yields the same
      canonical form. Special consideration should be given when
      implementing this method since the canonical form of a request is
      used to look up objects in the URL cache, a process which performs
      equality checks between NSURLRequest objects.
      <p>
      This is an abstract method; sublasses must provide an
      implementation.
      @param request A request to make canonical.
      @result The canonical form of the given request. 
  */
  class func canonicalRequest(for request: URLRequest) -> URLRequest

  /** 
      @method canonicalRequestForRequest:
      @abstract This method returns a canonical version of the given
      request.
      @discussion It is up to each concrete protocol implementation to
      define what "canonical" means. However, a protocol should
      guarantee that the same input request always yields the same
      canonical form. Special consideration should be given when
      implementing this method since the canonical form of a request is
      used to look up objects in the URL cache, a process which performs
      equality checks between NSURLRequest objects.
      <p>
      This is an abstract method; sublasses must provide an
      implementation.
      @param request A request to make canonical.
      @result The canonical form of the given request. 
  */
  @available(swift, obsoleted: 3, renamed: "canonicalRequest(for:)")
  class func canonicalRequestForRequest(_ request: URLRequest) -> URLRequest

  /**
      @method requestIsCacheEquivalent:toRequest:
      @abstract Compares two requests for equivalence with regard to caching.
      @discussion Requests are considered euqivalent for cache purposes
      if and only if they would be handled by the same protocol AND that
      protocol declares them equivalent after performing 
      implementation-specific checks.
      @result YES if the two requests are cache-equivalent, NO otherwise.
  */
  class func requestIsCacheEquivalent(_ a: URLRequest, to b: URLRequest) -> Bool

  /**
      @method requestIsCacheEquivalent:toRequest:
      @abstract Compares two requests for equivalence with regard to caching.
      @discussion Requests are considered euqivalent for cache purposes
      if and only if they would be handled by the same protocol AND that
      protocol declares them equivalent after performing 
      implementation-specific checks.
      @result YES if the two requests are cache-equivalent, NO otherwise.
  */
  @available(swift, obsoleted: 3, renamed: "requestIsCacheEquivalent(_:to:)")
  class func requestIsCacheEquivalent(_ a: URLRequest, toRequest b: URLRequest) -> Bool

  /** 
      @method startLoading
      @abstract Starts protocol-specific loading of a request. 
      @discussion When this method is called, the protocol implementation
      should start loading a request.
  */
  func startLoading()

  /** 
      @method stopLoading
      @abstract Stops protocol-specific loading of a request. 
      @discussion When this method is called, the protocol implementation
      should end the work of loading a request. This could be in response
      to a cancel operation, so protocol implementations must be able to
      handle this call while a load is in progress.
  */
  func stopLoading()

  /** 
      @method propertyForKey:inRequest:
      @abstract Returns the property in the given request previously
      stored with the given key.
      @discussion The purpose of this method is to provide an interface
      for protocol implementors to access protocol-specific information
      associated with NSURLRequest objects.
      @param key The string to use for the property lookup.
      @param request The request to use for the property lookup.
      @result The property stored with the given key, or nil if no property
      had previously been stored with the given key in the given request.
  */
  class func property(forKey key: String, in request: URLRequest) -> Any?

  /** 
      @method propertyForKey:inRequest:
      @abstract Returns the property in the given request previously
      stored with the given key.
      @discussion The purpose of this method is to provide an interface
      for protocol implementors to access protocol-specific information
      associated with NSURLRequest objects.
      @param key The string to use for the property lookup.
      @param request The request to use for the property lookup.
      @result The property stored with the given key, or nil if no property
      had previously been stored with the given key in the given request.
  */
  @available(swift, obsoleted: 3, renamed: "property(forKey:in:)")
  class func propertyForKey(_ key: String, inRequest request: URLRequest) -> Any?

  /** 
      @method setProperty:forKey:inRequest:
      @abstract Stores the given property in the given request using the
      given key.
      @discussion The purpose of this method is to provide an interface
      for protocol implementors to customize protocol-specific
      information associated with NSMutableURLRequest objects.
      @param value The property to store. 
      @param key The string to use for the property storage. 
      @param request The request in which to store the property. 
  */
  class func setProperty(_ value: Any, forKey key: String, in request: NSMutableURLRequest)

  /** 
      @method setProperty:forKey:inRequest:
      @abstract Stores the given property in the given request using the
      given key.
      @discussion The purpose of this method is to provide an interface
      for protocol implementors to customize protocol-specific
      information associated with NSMutableURLRequest objects.
      @param value The property to store. 
      @param key The string to use for the property storage. 
      @param request The request in which to store the property. 
  */
  @available(swift, obsoleted: 3, renamed: "setProperty(_:forKey:in:)")
  class func setProperty(_ value: Any, forKey key: String, inRequest request: NSMutableURLRequest)

  /**
      @method removePropertyForKey:inRequest:
      @abstract Remove any property stored under the given key
      @discussion Like setProperty:forKey:inRequest: above, the purpose of this
          method is to give protocol implementors the ability to store 
          protocol-specific information in an NSURLRequest
      @param key The key whose value should be removed
      @param request The request to be modified
  */
  class func removeProperty(forKey key: String, in request: NSMutableURLRequest)

  /**
      @method removePropertyForKey:inRequest:
      @abstract Remove any property stored under the given key
      @discussion Like setProperty:forKey:inRequest: above, the purpose of this
          method is to give protocol implementors the ability to store 
          protocol-specific information in an NSURLRequest
      @param key The key whose value should be removed
      @param request The request to be modified
  */
  @available(swift, obsoleted: 3, renamed: "removeProperty(forKey:in:)")
  class func removePropertyForKey(_ key: String, inRequest request: NSMutableURLRequest)

  /** 
      @method registerClass:
      @abstract This method registers a protocol class, making it visible
      to several other NSURLProtocol class methods.
      @discussion When the URL loading system begins to load a request,
      each protocol class that has been registered is consulted in turn to
      see if it can be initialized with a given request. The first
      protocol handler class to provide a YES answer to
      <tt>+canInitWithRequest:</tt> "wins" and that protocol
      implementation is used to perform the URL load. There is no
      guarantee that all registered protocol classes will be consulted.
      Hence, it should be noted that registering a class places it first
      on the list of classes that will be consulted in calls to
      <tt>+canInitWithRequest:</tt>, moving it in front of all classes
      that had been registered previously.
      <p>A similar design governs the process to create the canonical form
      of a request with the <tt>+canonicalRequestForRequest:</tt> class
      method.
      @param protocolClass the class to register.
      @result YES if the protocol was registered successfully, NO if not.
      The only way that failure can occur is if the given class is not a
      subclass of NSURLProtocol.
  */
  class func registerClass(_ protocolClass: AnyClass) -> Bool

  /** 
      @method unregisterClass:
      @abstract This method unregisters a protocol. 
      @discussion After unregistration, a protocol class is no longer
      consulted in calls to NSURLProtocol class methods.
      @param protocolClass The class to unregister.
  */
  class func unregisterClass(_ protocolClass: AnyClass)
  convenience init!()
}
extension URLProtocol {
  @available(iOS 8.0, *)
  class func canInit(with task: URLSessionTask) -> Bool
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "canInit(with:)")
  class func canInitWithTask(_ task: URLSessionTask) -> Bool
  @available(iOS 8.0, *)
  convenience init(task: URLSessionTask, cachedResponse: CachedURLResponse?, client: URLProtocolClient?)
  @available(iOS 8.0, *)
  @NSCopying var task: URLSessionTask? { get }
}
