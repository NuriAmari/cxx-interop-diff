@_exported import CoreFoundation

typealias NSComparisonPredicateOptions = Int
var NSCaseInsensitivePredicateOption: Int { get }
var NSDiacriticInsensitivePredicateOption: Int { get }
@available(iOS 4.0, *)
var NSNormalizedPredicateOption: Int { get }
@available(swift, obsoleted: 3, renamed: "NSComparisonPredicate.Modifier")
typealias NSComparisonPredicateModifier = NSComparisonPredicate.Modifier
extension NSComparisonPredicate {
  enum Modifier : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case directPredicateModifier
    @available(swift, obsoleted: 3, renamed: "directPredicateModifier")
    static var DirectPredicateModifier: NSComparisonPredicate.Modifier { get }
    case allPredicateModifier
    @available(swift, obsoleted: 3, renamed: "allPredicateModifier")
    static var AllPredicateModifier: NSComparisonPredicate.Modifier { get }
    case anyPredicateModifier
    @available(swift, obsoleted: 3, renamed: "anyPredicateModifier")
    static var AnyPredicateModifier: NSComparisonPredicate.Modifier { get }
  }
  enum Operator : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case lessThanPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "lessThanPredicateOperatorType")
    static var LessThanPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case lessThanOrEqualToPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "lessThanOrEqualToPredicateOperatorType")
    static var LessThanOrEqualToPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case greaterThanPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "greaterThanPredicateOperatorType")
    static var GreaterThanPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case greaterThanOrEqualToPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "greaterThanOrEqualToPredicateOperatorType")
    static var GreaterThanOrEqualToPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case equalToPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "equalToPredicateOperatorType")
    static var EqualToPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case notEqualToPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "notEqualToPredicateOperatorType")
    static var NotEqualToPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case matchesPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "matchesPredicateOperatorType")
    static var MatchesPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case likePredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "likePredicateOperatorType")
    static var LikePredicateOperatorType: NSComparisonPredicate.Operator { get }
    case beginsWithPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "beginsWithPredicateOperatorType")
    static var BeginsWithPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case endsWithPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "endsWithPredicateOperatorType")
    static var EndsWithPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case inPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "inPredicateOperatorType")
    static var InPredicateOperatorType: NSComparisonPredicate.Operator { get }
    case customSelectorPredicateOperatorType
    @available(swift, obsoleted: 3, renamed: "customSelectorPredicateOperatorType")
    static var CustomSelectorPredicateOperatorType: NSComparisonPredicate.Operator { get }
    @available(iOS 3.0, *)
    case containsPredicateOperatorType
    @available(iOS 3.0, *)
    @available(swift, obsoleted: 3, renamed: "containsPredicateOperatorType")
    static var ContainsPredicateOperatorType: NSComparisonPredicate.Operator { get }
    @available(iOS 3.0, *)
    case betweenPredicateOperatorType
    @available(iOS 3.0, *)
    @available(swift, obsoleted: 3, renamed: "betweenPredicateOperatorType")
    static var BetweenPredicateOperatorType: NSComparisonPredicate.Operator { get }
  }
}
@available(swift, obsoleted: 3, renamed: "NSComparisonPredicate.Operator")
typealias NSPredicateOperatorType = NSComparisonPredicate.Operator
@available(iOS 3.0, *)
class NSComparisonPredicate : NSPredicate {
  @available(*, unavailable, message: "superseded by import of -[NSComparisonPredicate initWithLeftExpression:rightExpression:modifier:type:options:]")
  /*not inherited*/ init(leftExpression lhs: NSExpression, rightExpression rhs: NSExpression, modifier: NSComparisonPredicate.Modifier, type: NSComparisonPredicate.Operator, options: NSComparisonPredicateOptions)
  @available(*, unavailable, renamed: "init(leftExpression:rightExpression:modifier:type:options:)", message: "Not available in Swift")
  class func predicateWithLeftExpression(_ lhs: NSExpression, rightExpression rhs: NSExpression, modifier: NSComparisonPredicate.Modifier, type: NSComparisonPredicate.Operator, options: NSComparisonPredicateOptions) -> NSComparisonPredicate
  @available(*, unavailable, message: "superseded by import of -[NSComparisonPredicate initWithLeftExpression:rightExpression:customSelector:]")
  /*not inherited*/ init(leftExpression lhs: NSExpression, rightExpression rhs: NSExpression, customSelector selector: Selector)
  @available(*, unavailable, renamed: "init(leftExpression:rightExpression:customSelector:)", message: "Not available in Swift")
  class func predicateWithLeftExpression(_ lhs: NSExpression, rightExpression rhs: NSExpression, customSelector selector: Selector) -> NSComparisonPredicate
  init(leftExpression lhs: NSExpression, rightExpression rhs: NSExpression, modifier: NSComparisonPredicate.Modifier, type: NSComparisonPredicate.Operator, options: NSComparisonPredicateOptions)
  init(leftExpression lhs: NSExpression, rightExpression rhs: NSExpression, customSelector selector: Selector)
  init?(coder: NSCoder)
  var predicateOperatorType: NSComparisonPredicate.Operator { get }
  var comparisonPredicateModifier: NSComparisonPredicate.Modifier { get }
  var leftExpression: NSExpression { get }
  var rightExpression: NSExpression { get }
  var customSelector: Selector? { get }
  var options: NSComparisonPredicateOptions { get }
  convenience init!()
}
