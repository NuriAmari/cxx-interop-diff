@_exported import CoreFoundation

class DateFormatter : Formatter {
  @available(iOS 8.0, *)
  var formattingContext: Formatter.Context
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, for string: String, range rangep: UnsafeMutablePointer<NSRange>?) throws
  @available(swift, obsoleted: 3, renamed: "getObjectValue(_:for:range:)")
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, forString string: String, range rangep: UnsafeMutablePointer<NSRange>?) throws
  func string(from date: Date) -> String
  @available(swift, obsoleted: 3, renamed: "string(from:)")
  func stringFromDate(_ date: Date) -> String
  func date(from string: String) -> Date?
  @available(swift, obsoleted: 3, renamed: "date(from:)")
  func dateFromString(_ string: String) -> Date?
  @available(iOS 4.0, *)
  class func localizedString(from date: Date, dateStyle dstyle: DateFormatter.Style, time tstyle: DateFormatter.Style) -> String
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "localizedString(from:dateStyle:time:)")
  class func localizedStringFromDate(_ date: Date, dateStyle dstyle: DateFormatter.Style, timeStyle tstyle: DateFormatter.Style) -> String
  @available(iOS 4.0, *)
  class func dateFormat(fromTemplate tmplate: String, options opts: Int, locale: Locale?) -> String?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "dateFormat(fromTemplate:options:locale:)")
  class func dateFormatFromTemplate(_ tmplate: String, options opts: Int, locale: Locale?) -> String?
  class var defaultFormatterBehavior: DateFormatter.Behavior
  @available(iOS 8.0, *)
  func setLocalizedDateFormatFromTemplate(_ dateFormatTemplate: String)
  var dateFormat: String!
  var dateStyle: DateFormatter.Style
  var timeStyle: DateFormatter.Style
  var locale: Locale!
  var generatesCalendarDates: Bool
  var formatterBehavior: DateFormatter.Behavior
  var timeZone: TimeZone!
  var calendar: Calendar!
  var isLenient: Bool
  @available(swift, obsoleted: 3, renamed: "isLenient")
  var lenient: Bool
  var twoDigitStartDate: Date?
  var defaultDate: Date?
  var eraSymbols: [String]!
  var monthSymbols: [String]!
  var shortMonthSymbols: [String]!
  var weekdaySymbols: [String]!
  var shortWeekdaySymbols: [String]!
  var amSymbol: String!
  @available(swift, obsoleted: 3, renamed: "amSymbol")
  var AMSymbol: String!
  var pmSymbol: String!
  @available(swift, obsoleted: 3, renamed: "pmSymbol")
  var PMSymbol: String!
  @available(iOS 2.0, *)
  var longEraSymbols: [String]!
  @available(iOS 2.0, *)
  var veryShortMonthSymbols: [String]!
  @available(iOS 2.0, *)
  var standaloneMonthSymbols: [String]!
  @available(iOS 2.0, *)
  var shortStandaloneMonthSymbols: [String]!
  @available(iOS 2.0, *)
  var veryShortStandaloneMonthSymbols: [String]!
  @available(iOS 2.0, *)
  var veryShortWeekdaySymbols: [String]!
  @available(iOS 2.0, *)
  var standaloneWeekdaySymbols: [String]!
  @available(iOS 2.0, *)
  var shortStandaloneWeekdaySymbols: [String]!
  @available(iOS 2.0, *)
  var veryShortStandaloneWeekdaySymbols: [String]!
  @available(iOS 2.0, *)
  var quarterSymbols: [String]!
  @available(iOS 2.0, *)
  var shortQuarterSymbols: [String]!
  @available(iOS 2.0, *)
  var standaloneQuarterSymbols: [String]!
  @available(iOS 2.0, *)
  var shortStandaloneQuarterSymbols: [String]!
  @available(iOS 2.0, *)
  var gregorianStartDate: Date?
  @available(iOS 4.0, *)
  var doesRelativeDateFormatting: Bool
  init!()
  init?(coder: NSCoder)
}
@available(swift, obsoleted: 3, renamed: "DateFormatter")
typealias NSDateFormatter = DateFormatter
@available(swift, obsoleted: 3, renamed: "DateFormatter.Style")
typealias NSDateFormatterStyle = DateFormatter.Style
extension DateFormatter {
  enum Style : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case noStyle
    @available(swift, obsoleted: 3, renamed: "noStyle")
    static var NoStyle: DateFormatter.Style { get }
    case shortStyle
    @available(swift, obsoleted: 3, renamed: "shortStyle")
    static var ShortStyle: DateFormatter.Style { get }
    case mediumStyle
    @available(swift, obsoleted: 3, renamed: "mediumStyle")
    static var MediumStyle: DateFormatter.Style { get }
    case longStyle
    @available(swift, obsoleted: 3, renamed: "longStyle")
    static var LongStyle: DateFormatter.Style { get }
    case fullStyle
    @available(swift, obsoleted: 3, renamed: "fullStyle")
    static var FullStyle: DateFormatter.Style { get }
  }
  enum Behavior : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case behaviorDefault
    @available(swift, obsoleted: 3, renamed: "behaviorDefault")
    static var BehaviorDefault: DateFormatter.Behavior { get }
    case behavior10_4
    @available(swift, obsoleted: 3, renamed: "behavior10_4")
    static var Behavior10_4: DateFormatter.Behavior { get }
  }
}
@available(swift, obsoleted: 3, renamed: "DateFormatter.Behavior")
typealias NSDateFormatterBehavior = DateFormatter.Behavior
