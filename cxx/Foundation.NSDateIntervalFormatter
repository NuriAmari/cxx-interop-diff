@_exported import CoreFoundation

@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "DateIntervalFormatter.Style")
typealias NSDateIntervalFormatterStyle = DateIntervalFormatter.Style
extension DateIntervalFormatter {
  @available(iOS 8.0, *)
  enum Style : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case noStyle
    @available(swift, obsoleted: 3, renamed: "noStyle")
    static var NoStyle: DateIntervalFormatter.Style { get }
    case shortStyle
    @available(swift, obsoleted: 3, renamed: "shortStyle")
    static var ShortStyle: DateIntervalFormatter.Style { get }
    case mediumStyle
    @available(swift, obsoleted: 3, renamed: "mediumStyle")
    static var MediumStyle: DateIntervalFormatter.Style { get }
    case longStyle
    @available(swift, obsoleted: 3, renamed: "longStyle")
    static var LongStyle: DateIntervalFormatter.Style { get }
    case fullStyle
    @available(swift, obsoleted: 3, renamed: "fullStyle")
    static var FullStyle: DateIntervalFormatter.Style { get }
  }
}
@available(iOS 8.0, *)
class DateIntervalFormatter : Formatter {
  var locale: Locale!
  var calendar: Calendar!
  var timeZone: TimeZone!
  var dateTemplate: String!
  var dateStyle: DateIntervalFormatter.Style
  var timeStyle: DateIntervalFormatter.Style
  func string(from fromDate: Date, to toDate: Date) -> String
  @available(swift, obsoleted: 3, renamed: "string(from:to:)")
  func stringFromDate(_ fromDate: Date, toDate: Date) -> String
  @available(iOS 10.0, *)
  func string(from dateInterval: DateInterval) -> String?
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "string(from:)")
  func stringFromDateInterval(_ dateInterval: DateInterval) -> String?
  init!()
  init?(coder: NSCoder)
}
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "DateIntervalFormatter")
typealias NSDateIntervalFormatter = DateIntervalFormatter
