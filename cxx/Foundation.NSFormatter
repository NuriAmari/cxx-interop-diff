@_exported import CoreFoundation

@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "Formatter.Context")
typealias NSFormattingContext = Formatter.Context
extension Formatter {
  @available(iOS 8.0, *)
  enum Context : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case unknown
    @available(swift, obsoleted: 3, renamed: "unknown")
    static var Unknown: Formatter.Context { get }
    case dynamic
    @available(swift, obsoleted: 3, renamed: "dynamic")
    static var Dynamic: Formatter.Context { get }
    case standalone
    @available(swift, obsoleted: 3, renamed: "standalone")
    static var Standalone: Formatter.Context { get }
    case listItem
    @available(swift, obsoleted: 3, renamed: "listItem")
    static var ListItem: Formatter.Context { get }
    case beginningOfSentence
    @available(swift, obsoleted: 3, renamed: "beginningOfSentence")
    static var BeginningOfSentence: Formatter.Context { get }
    case middleOfSentence
    @available(swift, obsoleted: 3, renamed: "middleOfSentence")
    static var MiddleOfSentence: Formatter.Context { get }
  }
  @available(iOS 8.0, *)
  enum UnitStyle : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case short
    @available(swift, obsoleted: 3, renamed: "short")
    static var Short: Formatter.UnitStyle { get }
    case medium
    @available(swift, obsoleted: 3, renamed: "medium")
    static var Medium: Formatter.UnitStyle { get }
    case long
    @available(swift, obsoleted: 3, renamed: "long")
    static var Long: Formatter.UnitStyle { get }
  }
}
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "Formatter.UnitStyle")
typealias NSFormattingUnitStyle = Formatter.UnitStyle
class Formatter : NSObject, NSCopying, NSCoding {
  func string(for obj: Any?) -> String?
  @available(swift, obsoleted: 3, renamed: "string(for:)")
  func stringForObjectValue(_ obj: Any?) -> String?
  func attributedString(for obj: Any, withDefaultAttributes attrs: [NSAttributedString.Key : Any]? = nil) -> NSAttributedString?
  @available(swift, obsoleted: 3, renamed: "attributedString(for:withDefaultAttributes:)")
  func attributedStringForObjectValue(_ obj: Any, withDefaultAttributes attrs: [NSAttributedString.Key : Any]? = nil) -> NSAttributedString?
  func editingString(for obj: Any) -> String?
  @available(swift, obsoleted: 3, renamed: "editingString(for:)")
  func editingStringForObjectValue(_ obj: Any) -> String?
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, for string: String, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "getObjectValue(_:for:errorDescription:)")
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, forString string: String, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  func isPartialStringValid(_ partialString: String, newEditing newString: AutoreleasingUnsafeMutablePointer<NSString?>?, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "isPartialStringValid(_:newEditing:errorDescription:)")
  func isPartialStringValid(_ partialString: String, newEditingString newString: AutoreleasingUnsafeMutablePointer<NSString?>?, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  func isPartialStringValid(_ partialStringPtr: AutoreleasingUnsafeMutablePointer<NSString>, proposedSelectedRange proposedSelRangePtr: NSRangePointer?, originalString origString: String, originalSelectedRange origSelRange: NSRange, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  init!()
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
}
@available(swift, obsoleted: 3, renamed: "Formatter")
typealias NSFormatter = Formatter
