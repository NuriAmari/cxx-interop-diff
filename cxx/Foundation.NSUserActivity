@_exported import CoreFoundation

typealias NSUserActivityPersistentIdentifier = String
@available(iOS 8.0, *)
class NSUserActivity : NSObject {
  init(activityType: String)
  @available(iOS, introduced: 8.0, deprecated: 10.0, message: "Use initWithActivityType: with a specific activity type string")
  convenience init()
  var activityType: String { get }
  var title: String?
  var userInfo: [AnyHashable : Any]?
  func addUserInfoEntries(from otherDictionary: [AnyHashable : Any])
  @available(swift, obsoleted: 3, renamed: "addUserInfoEntries(from:)")
  func addUserInfoEntriesFromDictionary(_ otherDictionary: [AnyHashable : Any])
  @available(iOS 9.0, *)
  var requiredUserInfoKeys: Set<String>?
  var needsSave: Bool
  var webpageURL: URL?
  @available(iOS 11.0, *)
  var referrerURL: URL?
  @available(iOS 9.0, *)
  var expirationDate: Date?
  @available(iOS 9.0, *)
  var keywords: Set<String>
  var supportsContinuationStreams: Bool
  weak var delegate: @sil_weak NSUserActivityDelegate?
  @available(iOS 13.0, *)
  var targetContentIdentifier: String?
  func becomeCurrent()
  @available(iOS 9.0, *)
  func resignCurrent()
  func invalidate()
  func getContinuationStreams(completionHandler: @escaping @Sendable (InputStream?, OutputStream?, Error?) -> Void)
  func continuationStreams() async throws -> (InputStream, OutputStream)
  @available(swift, obsoleted: 3, renamed: "getContinuationStreams(completionHandler:)")
  func getContinuationStreamsWithCompletionHandler(_ completionHandler: @escaping @Sendable (InputStream?, OutputStream?, Error?) -> Void)
  @available(iOS 9.0, *)
  var isEligibleForHandoff: Bool
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "isEligibleForHandoff")
  var eligibleForHandoff: Bool
  @available(iOS 9.0, *)
  var isEligibleForSearch: Bool
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "isEligibleForSearch")
  var eligibleForSearch: Bool
  @available(iOS 9.0, *)
  var isEligibleForPublicIndexing: Bool
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "isEligibleForPublicIndexing")
  var eligibleForPublicIndexing: Bool
  @available(iOS 12.0, *)
  var isEligibleForPrediction: Bool
  @available(iOS 12.0, *)
  @available(swift, obsoleted: 3, renamed: "isEligibleForPrediction")
  var eligibleForPrediction: Bool
  @available(iOS 12.0, *)
  var persistentIdentifier: NSUserActivityPersistentIdentifier?
  @available(iOS 12.0, *)
  class func deleteSavedUserActivities(withPersistentIdentifiers persistentIdentifiers: [NSUserActivityPersistentIdentifier], completionHandler handler: @escaping @Sendable () -> Void)
  @available(iOS 12.0, *)
  class func deleteSavedUserActivities(withPersistentIdentifiers persistentIdentifiers: [NSUserActivityPersistentIdentifier]) async
  @available(iOS 12.0, *)
  @available(swift, obsoleted: 3, renamed: "deleteSavedUserActivities(withPersistentIdentifiers:completionHandler:)")
  class func deleteSavedUserActivitiesWithPersistentIdentifiers(_ persistentIdentifiers: [NSUserActivityPersistentIdentifier], completionHandler handler: @escaping @Sendable () -> Void)
  @available(iOS 12.0, *)
  class func deleteAllSavedUserActivities(completionHandler handler: @escaping @Sendable () -> Void)
  @available(iOS 12.0, *)
  class func deleteAllSavedUserActivities() async
  @available(iOS 12.0, *)
  @available(swift, obsoleted: 3, renamed: "deleteAllSavedUserActivities(completionHandler:)")
  class func deleteAllSavedUserActivitiesWithCompletionHandler(_ handler: @escaping @Sendable () -> Void)
}
let NSUserActivityTypeBrowsingWeb: String
@available(iOS 8.0, *)
protocol NSUserActivityDelegate : NSObjectProtocol {
  optional func userActivityWillSave(_ userActivity: NSUserActivity)
  optional func userActivityWasContinued(_ userActivity: NSUserActivity)
  optional func userActivity(_ userActivity: NSUserActivity, didReceive inputStream: InputStream, outputStream: OutputStream)
  @available(swift, obsoleted: 3, renamed: "userActivity(_:didReceive:outputStream:)")
  optional func userActivity(_ userActivity: NSUserActivity, didReceiveInputStream inputStream: InputStream, outputStream: OutputStream)
}
