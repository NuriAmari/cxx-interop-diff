@_exported import CoreFoundation


/**
    @enum NSURLCacheStoragePolicy
    
    @discussion The NSURLCacheStoragePolicy enum defines constants that
    can be used to specify the type of storage that is allowable for an
    NSCachedURLResponse object that is to be stored in an NSURLCache.
    
    @constant NSURLCacheStorageAllowed Specifies that storage in an
    NSURLCache is allowed without restriction.

    @constant NSURLCacheStorageAllowedInMemoryOnly Specifies that
    storage in an NSURLCache is allowed; however storage should be
    done in memory only, no disk storage should be done.

    @constant NSURLCacheStorageNotAllowed Specifies that storage in an
    NSURLCache is not allowed in any fashion, either in memory or on
    disk.
*/
@available(swift, obsoleted: 3, renamed: "URLCache.StoragePolicy")
typealias NSURLCacheStoragePolicy = URLCache.StoragePolicy
extension URLCache {

  /**
      @enum NSURLCacheStoragePolicy
      
      @discussion The NSURLCacheStoragePolicy enum defines constants that
      can be used to specify the type of storage that is allowable for an
      NSCachedURLResponse object that is to be stored in an NSURLCache.
      
      @constant NSURLCacheStorageAllowed Specifies that storage in an
      NSURLCache is allowed without restriction.
  
      @constant NSURLCacheStorageAllowedInMemoryOnly Specifies that
      storage in an NSURLCache is allowed; however storage should be
      done in memory only, no disk storage should be done.
  
      @constant NSURLCacheStorageNotAllowed Specifies that storage in an
      NSURLCache is not allowed in any fashion, either in memory or on
      disk.
  */
  enum StoragePolicy : UInt, @unchecked Sendable {
    init?(rawValue: UInt)
    var rawValue: UInt { get }
    typealias RawValue = UInt
    case allowed
    @available(swift, obsoleted: 3, renamed: "allowed")
    static var Allowed: URLCache.StoragePolicy { get }
    case allowedInMemoryOnly
    @available(swift, obsoleted: 3, renamed: "allowedInMemoryOnly")
    static var AllowedInMemoryOnly: URLCache.StoragePolicy { get }
    case notAllowed
    @available(swift, obsoleted: 3, renamed: "notAllowed")
    static var NotAllowed: URLCache.StoragePolicy { get }
  }
}

/**
    @class NSCachedURLResponse
    NSCachedURLResponse is a class whose objects functions as a wrapper for
    objects that are stored in the framework's caching system. 
    It is used to maintain characteristics and attributes of a cached 
    object. 
*/
@available(iOS 2.0, *)
class CachedURLResponse : NSObject, NSSecureCoding, NSCopying {

  /** 
      @method initWithResponse:data
      @abstract Initializes an NSCachedURLResponse with the given
      response and data.
      @discussion A default NSURLCacheStoragePolicy is used for
      NSCachedURLResponse objects initialized with this method:
      NSURLCacheStorageAllowed.
      @param response a NSURLResponse object.
      @param data an NSData object representing the URL content
      corresponding to the given response.
      @result an initialized NSCachedURLResponse.
  */
  init(response: URLResponse, data: Data)

  /** 
      @method initWithResponse:data:userInfo:storagePolicy:
      @abstract Initializes an NSCachedURLResponse with the given
      response, data, user-info dictionary, and storage policy.
      @param response a NSURLResponse object.
      @param data an NSData object representing the URL content
      corresponding to the given response.
      @param userInfo a dictionary user-specified information to be
      stored with the NSCachedURLResponse.
      @param storagePolicy an NSURLCacheStoragePolicy constant.
      @result an initialized NSCachedURLResponse.
  */
  init(response: URLResponse, data: Data, userInfo: [AnyHashable : Any]? = nil, storagePolicy: URLCache.StoragePolicy)

  /**
      @abstract Returns the response wrapped by this instance. 
      @result The response wrapped by this instance. 
  */
  @NSCopying var response: URLResponse { get }

  /**
      @abstract Returns the data of the receiver. 
      @result The data of the receiver. 
  */
  var data: Data { get }

  /**
      @abstract Returns the userInfo dictionary of the receiver. 
      @result The userInfo dictionary of the receiver. 
  */
  var userInfo: [AnyHashable : Any]? { get }

  /**
      @abstract Returns the NSURLCacheStoragePolicy constant of the receiver. 
      @result The NSURLCacheStoragePolicy constant of the receiver. 
  */
  var storagePolicy: URLCache.StoragePolicy { get }
  init!()
  @available(iOS 2.0, *)
  class var supportsSecureCoding: Bool { get }
  @available(iOS 2.0, *)
  func encode(with coder: NSCoder)
  init?(coder: NSCoder)
  @available(iOS 2.0, *)
  func copy(with zone: NSZone? = nil) -> Any
}

/**
    @class NSCachedURLResponse
    NSCachedURLResponse is a class whose objects functions as a wrapper for
    objects that are stored in the framework's caching system. 
    It is used to maintain characteristics and attributes of a cached 
    object. 
*/
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "CachedURLResponse")
typealias NSCachedURLResponse = CachedURLResponse
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "URLCache")
typealias NSURLCache = URLCache
@available(iOS 2.0, *)
class URLCache : NSObject {

  /** 
      @property sharedURLCache
      @abstract Returns the shared NSURLCache instance or
      sets the NSURLCache instance shared by all clients of
      the current process. This will be the new object returned when
      calls to the <tt>sharedURLCache</tt> method are made.
      @discussion Unless set explicitly through a call to
      <tt>+setSharedURLCache:</tt>, this method returns an NSURLCache
      instance created with the following default values:
      <ul>
      <li>Memory capacity: 4 megabytes (4 * 1024 * 1024 bytes)
      <li>Disk capacity: 20 megabytes (20 * 1024 * 1024 bytes)
      <li>Disk path: <nobr>(user home directory)/Library/Caches/(application bundle id)</nobr> 
      </ul>
      <p>Users who do not have special caching requirements or
      constraints should find the default shared cache instance
      acceptable. If this default shared cache instance is not
      acceptable, <tt>+setSharedURLCache:</tt> can be called to set a
      different NSURLCache instance to be returned from this method. 
      Callers should take care to ensure that the setter is called
      at a time when no other caller has a reference to the previously-set 
      shared URL cache. This is to prevent storing cache data from 
      becoming unexpectedly unretrievable.
      @result the shared NSURLCache instance.
  */
  class var shared: URLCache

  /** 
      @property sharedURLCache
      @abstract Returns the shared NSURLCache instance or
      sets the NSURLCache instance shared by all clients of
      the current process. This will be the new object returned when
      calls to the <tt>sharedURLCache</tt> method are made.
      @discussion Unless set explicitly through a call to
      <tt>+setSharedURLCache:</tt>, this method returns an NSURLCache
      instance created with the following default values:
      <ul>
      <li>Memory capacity: 4 megabytes (4 * 1024 * 1024 bytes)
      <li>Disk capacity: 20 megabytes (20 * 1024 * 1024 bytes)
      <li>Disk path: <nobr>(user home directory)/Library/Caches/(application bundle id)</nobr> 
      </ul>
      <p>Users who do not have special caching requirements or
      constraints should find the default shared cache instance
      acceptable. If this default shared cache instance is not
      acceptable, <tt>+setSharedURLCache:</tt> can be called to set a
      different NSURLCache instance to be returned from this method. 
      Callers should take care to ensure that the setter is called
      at a time when no other caller has a reference to the previously-set 
      shared URL cache. This is to prevent storing cache data from 
      becoming unexpectedly unretrievable.
      @result the shared NSURLCache instance.
  */
  @available(swift, obsoleted: 3, renamed: "shared")
  class var sharedURLCache: URLCache

  /** 
      @method initWithMemoryCapacity:diskCapacity:diskPath:
      @abstract Initializes an NSURLCache with the given capacity and
      path.
      @discussion The returned NSURLCache is backed by disk, so
      developers can be more liberal with space when choosing the
      capacity for this kind of cache. A disk cache measured in the tens
      of megabytes should be acceptable in most cases.
      @param memoryCapacity the capacity, measured in bytes, for the cache in memory.
      @param diskCapacity the capacity, measured in bytes, for the cache on disk.
      @param path the path on disk where the cache data is stored.
      @result an initialized NSURLCache, with the given capacity, backed
      by disk.
  */
  @available(iOS, introduced: 2.0, deprecated: 100000)
  init(memoryCapacity: Int, diskCapacity: Int, diskPath path: String?)

  /**
      @method initWithMemoryCapacity:diskCapacity:directoryURL:
      @abstract Initializes an NSURLCache with the given capacity and directory.
      @param memoryCapacity the capacity, measured in bytes, for the cache in memory. Or 0 to disable memory cache.
      @param diskCapacity the capacity, measured in bytes, for the cache on disk. Or 0 to disable disk cache.
      @param directoryURL the path to a directory on disk where the cache data is stored. Or nil for default directory.
      @result an initialized NSURLCache, with the given capacity, optionally backed by disk.
   */
  @available(iOS 13.0, *)
  init(memoryCapacity: Int, diskCapacity: Int, directoryURL: URL?)

  /** 
      @method cachedResponseForRequest:
      @abstract Returns the NSCachedURLResponse stored in the cache with
      the given request.
      @discussion The method returns nil if there is no
      NSCachedURLResponse stored using the given request.
      @param request the NSURLRequest to use as a key for the lookup.
      @result The NSCachedURLResponse stored in the cache with the given
      request, or nil if there is no NSCachedURLResponse stored with the
      given request.
  */
  func cachedResponse(for request: URLRequest) -> CachedURLResponse?

  /** 
      @method cachedResponseForRequest:
      @abstract Returns the NSCachedURLResponse stored in the cache with
      the given request.
      @discussion The method returns nil if there is no
      NSCachedURLResponse stored using the given request.
      @param request the NSURLRequest to use as a key for the lookup.
      @result The NSCachedURLResponse stored in the cache with the given
      request, or nil if there is no NSCachedURLResponse stored with the
      given request.
  */
  @available(swift, obsoleted: 3, renamed: "cachedResponse(for:)")
  func cachedResponseForRequest(_ request: URLRequest) -> CachedURLResponse?

  /** 
      @method storeCachedResponse:forRequest:
      @abstract Stores the given NSCachedURLResponse in the cache using
      the given request.
      @param cachedResponse The cached response to store.
      @param request the NSURLRequest to use as a key for the storage.
  */
  func storeCachedResponse(_ cachedResponse: CachedURLResponse, for request: URLRequest)

  /** 
      @method storeCachedResponse:forRequest:
      @abstract Stores the given NSCachedURLResponse in the cache using
      the given request.
      @param cachedResponse The cached response to store.
      @param request the NSURLRequest to use as a key for the storage.
  */
  @available(swift, obsoleted: 3, renamed: "storeCachedResponse(_:for:)")
  func storeCachedResponse(_ cachedResponse: CachedURLResponse, forRequest request: URLRequest)

  /** 
      @method removeCachedResponseForRequest:
      @abstract Removes the NSCachedURLResponse from the cache that is
      stored using the given request. 
      @discussion No action is taken if there is no NSCachedURLResponse
      stored with the given request.
      @param request the NSURLRequest to use as a key for the lookup.
  */
  func removeCachedResponse(for request: URLRequest)

  /** 
      @method removeCachedResponseForRequest:
      @abstract Removes the NSCachedURLResponse from the cache that is
      stored using the given request. 
      @discussion No action is taken if there is no NSCachedURLResponse
      stored with the given request.
      @param request the NSURLRequest to use as a key for the lookup.
  */
  @available(swift, obsoleted: 3, renamed: "removeCachedResponse(for:)")
  func removeCachedResponseForRequest(_ request: URLRequest)

  /** 
      @method removeAllCachedResponses
      @abstract Clears the given cache, removing all NSCachedURLResponse
      objects that it stores.
  */
  func removeAllCachedResponses()

  /**
   @method removeCachedResponsesSince:
   @abstract Clears the given cache of any cached responses since the provided date.
   */
  @available(iOS 8.0, *)
  func removeCachedResponses(since date: Date)

  /**
   @method removeCachedResponsesSince:
   @abstract Clears the given cache of any cached responses since the provided date.
   */
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "removeCachedResponses(since:)")
  func removeCachedResponsesSinceDate(_ date: Date)

  /**
      @abstract In-memory capacity of the receiver. 
      @discussion At the time this call is made, the in-memory cache will truncate its contents to the size given, if necessary.
      @result The in-memory capacity, measured in bytes, for the receiver. 
  */
  var memoryCapacity: Int

  /**
      @abstract The on-disk capacity of the receiver. 
      @discussion The on-disk capacity, measured in bytes, for the receiver. On mutation the on-disk cache will truncate its contents to the size given, if necessary.
  */
  var diskCapacity: Int

  /**
      @abstract Returns the current amount of space consumed by the
      in-memory cache of the receiver.
      @discussion This size, measured in bytes, indicates the current
      usage of the in-memory cache. 
      @result the current usage of the in-memory cache of the receiver.
  */
  var currentMemoryUsage: Int { get }

  /**
      @abstract Returns the current amount of space consumed by the
      on-disk cache of the receiver.
      @discussion This size, measured in bytes, indicates the current
      usage of the on-disk cache. 
      @result the current usage of the on-disk cache of the receiver.
  */
  var currentDiskUsage: Int { get }
  init!()
}

extension URLCache {
  @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
  convenience init(memoryCapacity: Int, diskCapacity: Int, directory: URL? = nil)
}
extension URLCache {
  @available(iOS 8.0, *)
  func storeCachedResponse(_ cachedResponse: CachedURLResponse, for dataTask: URLSessionDataTask)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "storeCachedResponse(_:for:)")
  func storeCachedResponse(_ cachedResponse: CachedURLResponse, forDataTask dataTask: URLSessionDataTask)
  @available(iOS 8.0, *)
  func getCachedResponse(for dataTask: URLSessionDataTask, completionHandler: @escaping @Sendable (CachedURLResponse?) -> Void)
  @available(iOS 8.0, *)
  func cachedResponse(for dataTask: URLSessionDataTask) async -> CachedURLResponse?
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "getCachedResponse(for:completionHandler:)")
  func getCachedResponseForDataTask(_ dataTask: URLSessionDataTask, completionHandler: @escaping @Sendable (CachedURLResponse?) -> Void)
  @available(iOS 8.0, *)
  func removeCachedResponse(for dataTask: URLSessionDataTask)
  @available(iOS 8.0, *)
  @available(swift, obsoleted: 3, renamed: "removeCachedResponse(for:)")
  func removeCachedResponseForDataTask(_ dataTask: URLSessionDataTask)
}
