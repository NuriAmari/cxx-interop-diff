@_exported import CoreFoundation

@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "LengthFormatter.Unit")
typealias NSLengthFormatterUnit = LengthFormatter.Unit
extension LengthFormatter {
  @available(iOS 8.0, *)
  enum Unit : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case millimeter
    @available(swift, obsoleted: 3, renamed: "millimeter")
    static var Millimeter: LengthFormatter.Unit { get }
    case centimeter
    @available(swift, obsoleted: 3, renamed: "centimeter")
    static var Centimeter: LengthFormatter.Unit { get }
    case meter
    @available(swift, obsoleted: 3, renamed: "meter")
    static var Meter: LengthFormatter.Unit { get }
    case kilometer
    @available(swift, obsoleted: 3, renamed: "kilometer")
    static var Kilometer: LengthFormatter.Unit { get }
    case inch
    @available(swift, obsoleted: 3, renamed: "inch")
    static var Inch: LengthFormatter.Unit { get }
    case foot
    @available(swift, obsoleted: 3, renamed: "foot")
    static var Foot: LengthFormatter.Unit { get }
    case yard
    @available(swift, obsoleted: 3, renamed: "yard")
    static var Yard: LengthFormatter.Unit { get }
    case mile
    @available(swift, obsoleted: 3, renamed: "mile")
    static var Mile: LengthFormatter.Unit { get }
  }
}
@available(iOS 8.0, *)
class LengthFormatter : Formatter {
  @NSCopying var numberFormatter: NumberFormatter!
  var unitStyle: Formatter.UnitStyle
  var isForPersonHeightUse: Bool
  @available(swift, obsoleted: 3, renamed: "isForPersonHeightUse")
  var forPersonHeightUse: Bool
  func string(fromValue value: Double, unit: LengthFormatter.Unit) -> String
  @available(swift, obsoleted: 3, renamed: "string(fromValue:unit:)")
  func stringFromValue(_ value: Double, unit: LengthFormatter.Unit) -> String
  func string(fromMeters numberInMeters: Double) -> String
  @available(swift, obsoleted: 3, renamed: "string(fromMeters:)")
  func stringFromMeters(_ numberInMeters: Double) -> String
  func unitString(fromValue value: Double, unit: LengthFormatter.Unit) -> String
  @available(swift, obsoleted: 3, renamed: "unitString(fromValue:unit:)")
  func unitStringFromValue(_ value: Double, unit: LengthFormatter.Unit) -> String
  func unitString(fromMeters numberInMeters: Double, usedUnit unitp: UnsafeMutablePointer<LengthFormatter.Unit>?) -> String
  @available(swift, obsoleted: 3, renamed: "unitString(fromMeters:usedUnit:)")
  func unitStringFromMeters(_ numberInMeters: Double, usedUnit unitp: UnsafeMutablePointer<LengthFormatter.Unit>?) -> String
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, for string: String, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  @available(swift, obsoleted: 3, renamed: "getObjectValue(_:for:errorDescription:)")
  func getObjectValue(_ obj: AutoreleasingUnsafeMutablePointer<AnyObject?>?, forString string: String, errorDescription error: AutoreleasingUnsafeMutablePointer<NSString?>?) -> Bool
  init!()
  init?(coder: NSCoder)
}
@available(iOS 8.0, *)
@available(swift, obsoleted: 3, renamed: "LengthFormatter")
typealias NSLengthFormatter = LengthFormatter
