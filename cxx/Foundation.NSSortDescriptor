@_exported import CoreFoundation

class NSSortDescriptor : NSObject, NSSecureCoding, NSCopying {
  @available(iOS 4.0, *)
  @available(*, unavailable, message: "superseded by import of -[NSSortDescriptor initWithKey:ascending:]")
  convenience init(key: String?, ascending: Bool)
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(key:ascending:)", message: "Not available in Swift")
  class func sortDescriptorWithKey(_ key: String?, ascending: Bool) -> Self
  @available(iOS 4.0, *)
  @available(*, unavailable, message: "superseded by import of -[NSSortDescriptor initWithKey:ascending:selector:]")
  convenience init(key: String?, ascending: Bool, selector: Selector?)
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(key:ascending:selector:)", message: "Not available in Swift")
  class func sortDescriptorWithKey(_ key: String?, ascending: Bool, selector: Selector?) -> Self
  init(key: String?, ascending: Bool)
  init(key: String?, ascending: Bool, selector: Selector?)
  init?(coder: NSCoder)
  var key: String? { get }
  var ascending: Bool { get }
  var selector: Selector? { get }
  @available(iOS 7.0, *)
  func allowEvaluation()
  @available(iOS 4.0, *)
  @available(*, unavailable, message: "superseded by import of -[NSSortDescriptor initWithKey:ascending:comparator:]")
  convenience init(key: String?, ascending: Bool, comparator cmptr: @escaping Comparator)
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(key:ascending:comparator:)", message: "Not available in Swift")
  class func sortDescriptorWithKey(_ key: String?, ascending: Bool, comparator cmptr: @escaping Comparator) -> Self
  @available(iOS 4.0, *)
  init(key: String?, ascending: Bool, comparator cmptr: @escaping Comparator)
  @available(iOS 4.0, *)
  var comparator: Comparator { get }
  func compare(_ object1: Any, to object2: Any) -> ComparisonResult
  @available(swift, obsoleted: 3, renamed: "compare(_:to:)")
  func compareObject(_ object1: Any, toObject object2: Any) -> ComparisonResult
  var reversedSortDescriptor: Any { get }
  init!()
  class var supportsSecureCoding: Bool { get }
  func encode(with coder: NSCoder)
  func copy(with zone: NSZone? = nil) -> Any
}

extension NSSortDescriptor {
  convenience init<Root, Value>(keyPath: KeyPath<Root, Value>, ascending: Bool)
  convenience init<Root, Value>(keyPath: KeyPath<Root, Value>, ascending: Bool, comparator cmptr: @escaping Comparator)
  var keyPath: AnyKeyPath? { get }
}

@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
extension NSSortDescriptor {
  /// Creates an `NSSortDescriptor` representing the same sort as the given
  /// `SortDescriptor`.
  ///
  /// - Parameters:
  ///     - sortDescriptor: The `SortDescriptor` to convert.
  convenience init<Compared>(_ sortDescriptor: SortDescriptor<Compared>)
}
extension NSSet {
  @available(iOS 4.0, *)
  func sortedArray(using sortDescriptors: [NSSortDescriptor]) -> [Any]
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "sortedArray(using:)")
  func sortedArrayUsingDescriptors(_ sortDescriptors: [NSSortDescriptor]) -> [Any]
}
extension NSArray {
  func sortedArray(using sortDescriptors: [NSSortDescriptor]) -> [Any]
  @available(swift, obsoleted: 3, renamed: "sortedArray(using:)")
  func sortedArrayUsingDescriptors(_ sortDescriptors: [NSSortDescriptor]) -> [Any]
}
extension NSMutableArray {
  func sort(using sortDescriptors: [NSSortDescriptor])
  @available(swift, obsoleted: 3, renamed: "sort(using:)")
  func sortUsingDescriptors(_ sortDescriptors: [NSSortDescriptor])
}
extension NSOrderedSet {
  @available(iOS 5.0, *)
  func sortedArray(using sortDescriptors: [NSSortDescriptor]) -> [Any]
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "sortedArray(using:)")
  func sortedArrayUsingDescriptors(_ sortDescriptors: [NSSortDescriptor]) -> [Any]
}
extension NSMutableOrderedSet {
  @available(iOS 5.0, *)
  func sort(using sortDescriptors: [NSSortDescriptor])
  @available(iOS 5.0, *)
  @available(swift, obsoleted: 3, renamed: "sort(using:)")
  func sortUsingDescriptors(_ sortDescriptors: [NSSortDescriptor])
}
