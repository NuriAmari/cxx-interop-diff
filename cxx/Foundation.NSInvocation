@_exported import CoreFoundation

@available(*, unavailable, message: "NSInvocation and related APIs not available")
class NSInvocation : NSObject {
  /*not inherited*/ init(methodSignature sig: NSMethodSignature)
  @available(*, unavailable, renamed: "init(methodSignature:)", message: "Not available in Swift")
  class func invocationWithMethodSignature(_ sig: NSMethodSignature) -> NSInvocation
  var methodSignature: NSMethodSignature { get }
  func retainArguments()
  var argumentsRetained: Bool { get }
  unowned(unsafe) var target: @sil_unmanaged AnyObject?
  var selector: Selector
  func getReturnValue(_ retLoc: UnsafeMutableRawPointer)
  func setReturnValue(_ retLoc: UnsafeMutableRawPointer)
  func getArgument(_ argumentLocation: UnsafeMutableRawPointer, at idx: Int)
  @available(swift, obsoleted: 3, renamed: "getArgument(_:at:)")
  func getArgument(_ argumentLocation: UnsafeMutableRawPointer, atIndex idx: Int)
  func setArgument(_ argumentLocation: UnsafeMutableRawPointer, at idx: Int)
  @available(swift, obsoleted: 3, renamed: "setArgument(_:at:)")
  func setArgument(_ argumentLocation: UnsafeMutableRawPointer, atIndex idx: Int)
  func invoke()
  func invoke(withTarget target: Any)
  @available(swift, obsoleted: 3, renamed: "invoke(withTarget:)")
  func invokeWithTarget(_ target: Any)
  init!()
}
