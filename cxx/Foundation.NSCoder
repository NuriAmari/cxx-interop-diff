@_exported import CoreFoundation


/**
 Describes the action an NSCoder should take when it encounters decode failures (e.g. corrupt data) for non-TopLevel decodes.
 */
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "NSCoder.DecodingFailurePolicy")
typealias NSDecodingFailurePolicy = NSCoder.DecodingFailurePolicy
extension NSCoder {

  /**
   Describes the action an NSCoder should take when it encounters decode failures (e.g. corrupt data) for non-TopLevel decodes.
   */
  @available(iOS 9.0, *)
  enum DecodingFailurePolicy : Int, @unchecked Sendable {
    init?(rawValue: Int)
    var rawValue: Int { get }
    typealias RawValue = Int
    case raiseException
    @available(swift, obsoleted: 3, renamed: "raiseException")
    static var RaiseException: NSCoder.DecodingFailurePolicy { get }
    case setErrorAndReturn
    @available(swift, obsoleted: 3, renamed: "setErrorAndReturn")
    static var SetErrorAndReturn: NSCoder.DecodingFailurePolicy { get }
  }
}
class NSCoder : NSObject {
  func encodeValue(ofObjCType type: UnsafePointer<CChar>, at addr: UnsafeRawPointer)
  @available(swift, obsoleted: 3, renamed: "encodeValue(ofObjCType:at:)")
  func encodeValueOfObjCType(_ type: UnsafePointer<CChar>, at addr: UnsafeRawPointer)
  func encodeDataObject(_ data: Data)
  func decodeDataObject() -> Data?
  @available(iOS 11.0, *)
  func decodeValue(ofObjCType type: UnsafePointer<CChar>, at data: UnsafeMutableRawPointer, size: Int)
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "decodeValue(ofObjCType:at:size:)")
  func decodeValueOfObjCType(_ type: UnsafePointer<CChar>, at data: UnsafeMutableRawPointer, size: Int)
  func version(forClassName className: String) -> Int
  @available(swift, obsoleted: 3, renamed: "version(forClassName:)")
  func versionForClassName(_ className: String) -> Int
  init!()
}

extension NSCoder {
  @available(*, unavailable, renamed: "decodeObject(of:forKey:)")
  func decodeObjectOfClass<DecodedObjectType>(_ cls: DecodedObjectType.Type, forKey key: String) -> DecodedObjectType? where DecodedObjectType : NSObject, DecodedObjectType : NSCoding
  func decodeObject<DecodedObjectType>(of cls: DecodedObjectType.Type, forKey key: String) -> DecodedObjectType? where DecodedObjectType : NSObject, DecodedObjectType : NSCoding
  @available(*, unavailable, renamed: "decodeObject(of:forKey:)")
  @nonobjc func decodeObjectOfClasses(_ classes: NSSet?, forKey key: String) -> AnyObject?
  @nonobjc func decodeObject(of classes: [AnyClass]?, forKey key: String) -> Any?
  @available(macOS 10.11, iOS 9.0, *)
  @available(macOS, introduced: 10.11, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(iOS, introduced: 9.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(tvOS, introduced: 9.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(watchOS, introduced: 2.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @nonobjc func decodeTopLevelObject() throws -> Any?
  @available(*, unavailable, renamed: "decodeTopLevelObject(forKey:)")
  func decodeTopLevelObjectForKey(_ key: String) throws -> AnyObject?
  @available(macOS 10.11, iOS 9.0, *)
  @available(swift, obsoleted: 4)
  @available(macOS, introduced: 10.11, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(iOS, introduced: 9.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(tvOS, introduced: 9.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(watchOS, introduced: 2.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @nonobjc func decodeTopLevelObject(forKey key: String) throws -> AnyObject?
  @available(swift 4)
  @available(macOS 10.11, iOS 9.0, *)
  @available(macOS, introduced: 10.11, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(iOS, introduced: 9.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(tvOS, introduced: 9.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @available(watchOS, introduced: 2.0, deprecated: 100000.0, message: "Use decodeTopLevelObject(of:forKey:) instead")
  @nonobjc func decodeTopLevelObject(forKey key: String) throws -> Any?
  @available(*, unavailable, renamed: "decodeTopLevelObject(of:forKey:)")
  func decodeTopLevelObjectOfClass<DecodedObjectType>(_ cls: DecodedObjectType.Type, forKey key: String) throws -> DecodedObjectType? where DecodedObjectType : NSObject, DecodedObjectType : NSCoding
  @available(macOS 10.11, iOS 9.0, *)
  func decodeTopLevelObject<DecodedObjectType>(of cls: DecodedObjectType.Type, forKey key: String) throws -> DecodedObjectType? where DecodedObjectType : NSObject, DecodedObjectType : NSCoding
  @available(*, unavailable, renamed: "decodeTopLevelObject(of:forKey:)")
  @nonobjc func decodeTopLevelObjectOfClasses(_ classes: NSSet?, forKey key: String) throws -> AnyObject?
  @available(macOS 10.11, iOS 9.0, *)
  @nonobjc func decodeTopLevelObject(of classes: [AnyClass]?, forKey key: String) throws -> Any?
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc func decodeArrayOfObjects<DecodedObject>(ofClass cls: DecodedObject.Type, forKey key: String) -> [DecodedObject]? where DecodedObject : NSObject, DecodedObject : NSSecureCoding
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc func decodeArrayOfObjects(ofClasses classes: [AnyClass], forKey key: String) -> [Any]?
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc func decodeDictionary<DecodedKey, DecodedObject>(withKeyClass keyClass: DecodedKey.Type, objectClass: DecodedObject.Type, forKey key: String) -> [DecodedKey : DecodedObject]? where DecodedKey : NSObject, DecodedKey : NSCopying, DecodedKey : NSSecureCoding, DecodedObject : NSObject, DecodedObject : NSSecureCoding
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc func decodeDictionary(withKeysOfClasses keyClasses: [AnyClass], objectsOfClasses classes: [AnyClass], forKey key: String) -> [AnyHashable : Any]?
}
extension NSCoder {
  func encode(_ object: Any?)
  @available(swift, obsoleted: 3, renamed: "encode(_:)")
  func encodeObject(_ object: Any?)
  func encodeRootObject(_ rootObject: Any)
  func encodeBycopyObject(_ anObject: Any?)
  func encodeByrefObject(_ anObject: Any?)
  func encodeConditionalObject(_ object: Any?)
  func encodeArray(ofObjCType type: UnsafePointer<CChar>, count: Int, at array: UnsafeRawPointer)
  @available(swift, obsoleted: 3, renamed: "encodeArray(ofObjCType:count:at:)")
  func encodeArrayOfObjCType(_ type: UnsafePointer<CChar>, count: Int, at array: UnsafeRawPointer)
  func encodeBytes(_ byteaddr: UnsafeRawPointer?, length: Int)
  func decodeObject() -> Any?
  @available(iOS 9.0, *)
  @available(*, unavailable, message: "Use 'decodeTopLevelObject() throws' instead")
  func decodeTopLevelObject() throws -> Any
  func decodeArray(ofObjCType itemType: UnsafePointer<CChar>, count: Int, at array: UnsafeMutableRawPointer)
  @available(swift, obsoleted: 3, renamed: "decodeArray(ofObjCType:count:at:)")
  func decodeArrayOfObjCType(_ itemType: UnsafePointer<CChar>, count: Int, at array: UnsafeMutableRawPointer)
  func decodeBytes(withReturnedLength lengthp: UnsafeMutablePointer<Int>) -> UnsafeMutableRawPointer?
  @available(swift, obsoleted: 3, renamed: "decodeBytes(withReturnedLength:)")
  func decodeBytesWithReturnedLength(_ lengthp: UnsafeMutablePointer<Int>) -> UnsafeMutableRawPointer?
  @available(*, unavailable, message: "not available in automatic reference counting mode")
  func setObjectZone(_ zone: NSZone?)
  @available(*, unavailable, message: "not available in automatic reference counting mode")
  func objectZone() -> NSZone?
  var systemVersion: UInt32 { get }
  var allowsKeyedCoding: Bool { get }
  func encode(_ object: Any?, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeObject(_ object: Any?, forKey key: String)
  func encodeConditionalObject(_ object: Any?, forKey key: String)
  func encode(_ value: Bool, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeBool(_ value: Bool, forKey key: String)
  func encode(_ value: Int32, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeInt(_ value: Int32, forKey key: String)
  func encode(_ value: Int32, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeInt32(_ value: Int32, forKey key: String)
  func encode(_ value: Int64, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeInt64(_ value: Int64, forKey key: String)
  func encode(_ value: Float, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeFloat(_ value: Float, forKey key: String)
  func encode(_ value: Double, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeDouble(_ value: Double, forKey key: String)
  func encodeBytes(_ bytes: UnsafePointer<UInt8>?, length: Int, forKey key: String)
  func containsValue(forKey key: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "containsValue(forKey:)")
  func containsValueForKey(_ key: String) -> Bool
  func decodeObject(forKey key: String) -> Any?
  @available(swift, obsoleted: 3, renamed: "decodeObject(forKey:)")
  func decodeObjectForKey(_ key: String) -> Any?
  @available(iOS 9.0, *)
  @available(*, unavailable, message: "Use 'decodeObject(of:, forKey:)' instead")
  func decodeTopLevelObject(forKey key: String) throws -> Any
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "decodeTopLevelObject(forKey:)")
  @available(*, unavailable, message: "Use 'decodeObject(of:, forKey:)' instead")
  func decodeTopLevelObjectForKey(_ key: String) throws -> Any
  func decodeBool(forKey key: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "decodeBool(forKey:)")
  func decodeBoolForKey(_ key: String) -> Bool
  func decodeInt(forKey key: String) -> Int32
  @available(swift, obsoleted: 3, renamed: "decodeInt(forKey:)")
  func decodeIntForKey(_ key: String) -> Int32
  func decodeInt32(forKey key: String) -> Int32
  @available(swift, obsoleted: 3, renamed: "decodeInt32(forKey:)")
  func decodeInt32ForKey(_ key: String) -> Int32
  func decodeInt64(forKey key: String) -> Int64
  @available(swift, obsoleted: 3, renamed: "decodeInt64(forKey:)")
  func decodeInt64ForKey(_ key: String) -> Int64
  func decodeFloat(forKey key: String) -> Float
  @available(swift, obsoleted: 3, renamed: "decodeFloat(forKey:)")
  func decodeFloatForKey(_ key: String) -> Float
  func decodeDouble(forKey key: String) -> Double
  @available(swift, obsoleted: 3, renamed: "decodeDouble(forKey:)")
  func decodeDoubleForKey(_ key: String) -> Double
  func decodeBytes(forKey key: String, returnedLength lengthp: UnsafeMutablePointer<Int>?) -> UnsafePointer<UInt8>?
  @available(swift, obsoleted: 3, renamed: "decodeBytes(forKey:returnedLength:)")
  func decodeBytesForKey(_ key: String, returnedLength lengthp: UnsafeMutablePointer<Int>?) -> UnsafePointer<UInt8>?
  @available(iOS 2.0, *)
  func encode(_ value: Int, forKey key: String)
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeInteger(_ value: Int, forKey key: String)
  @available(iOS 2.0, *)
  func decodeInteger(forKey key: String) -> Int
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "decodeInteger(forKey:)")
  func decodeIntegerForKey(_ key: String) -> Int
  @available(iOS 6.0, *)
  var requiresSecureCoding: Bool { get }
  @available(iOS 6.0, *)
  func decodeObject(of aClass: AnyClass, forKey key: String) -> Any?
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "decodeObject(of:forKey:)")
  func decodeObjectOfClass(_ aClass: AnyClass, forKey key: String) -> Any?
  @available(iOS 9.0, *)
  @available(*, unavailable, message: "Use 'decodeObject(of:, forKey:)' instead")
  func decodeTopLevelObject(of aClass: AnyClass, forKey key: String) throws -> Any
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "decodeTopLevelObject(of:forKey:)")
  @available(*, unavailable, message: "Use 'decodeObject(of:, forKey:)' instead")
  func decodeTopLevelObjectOfClass(_ aClass: AnyClass, forKey key: String) throws -> Any

  /**
   Decodes the \c NSArray object for the given  \c key, which should be an \c NSArray<cls>, containing the given non-collection class (no nested arrays or arrays of dictionaries, etc) from the coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  func __decodeArrayOfObjects(of cls: AnyClass, forKey key: String) -> [Any]?

  /**
   Decodes the \c NSArray object for the given  \c key, which should be an \c NSArray<cls>, containing the given non-collection class (no nested arrays or arrays of dictionaries, etc) from the coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__decodeArrayOfObjects(of:forKey:)")
  func __decodeArrayOfObjectsOfClass(_ cls: AnyClass, forKey key: String) -> [Any]?

  /**
    Decodes the \c NSDictionary object for the given \c key, which should be an \c NSDictionary<keyCls,objectCls> , with keys of type given in \c keyCls and objects of the given non-collection class \c objectCls (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  func __decodeDictionary(withKeysOf keyCls: AnyClass, objectsOf objectCls: AnyClass, forKey key: String) -> [AnyHashable : Any]?

  /**
    Decodes the \c NSDictionary object for the given \c key, which should be an \c NSDictionary<keyCls,objectCls> , with keys of type given in \c keyCls and objects of the given non-collection class \c objectCls (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__decodeDictionary(withKeysOf:objectsOf:forKey:)")
  func __decodeDictionaryWithKeysOfClass(_ keyCls: AnyClass, objectsOfClass objectCls: AnyClass, forKey key: String) -> [AnyHashable : Any]?
  @available(iOS 6.0, *)
  func __decodeObject(ofClasses classes: Set<AnyHashable>?, forKey key: String) -> Any?
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "__decodeObject(ofClasses:forKey:)")
  func __decodeObjectOfClasses(_ classes: Set<AnyHashable>?, forKey key: String) -> Any?
  @available(iOS 9.0, *)
  @available(*, unavailable, message: "Use 'decodeObject(of:, forKey:)' instead")
  func decodeTopLevelObject(ofClasses classes: Set<AnyHashable>?, forKey key: String) throws -> Any
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "decodeTopLevelObject(ofClasses:forKey:)")
  @available(*, unavailable, message: "Use 'decodeObject(of:, forKey:)' instead")
  func decodeTopLevelObjectOfClasses(_ classes: Set<AnyHashable>?, forKey key: String) throws -> Any

  /**
   Decodes the \c NSArray object for the given \c key, which should be an \c NSArray, containing the given non-collection classes (no nested arrays or arrays of dictionaries, etc) from the coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  func __decodeArrayOfObjects(ofClasses classes: Set<AnyHashable>, forKey key: String) -> [Any]?

  /**
   Decodes the \c NSArray object for the given \c key, which should be an \c NSArray, containing the given non-collection classes (no nested arrays or arrays of dictionaries, etc) from the coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__decodeArrayOfObjects(ofClasses:forKey:)")
  func __decodeArrayOfObjectsOfClasses(_ classes: Set<AnyHashable>, forKey key: String) -> [Any]?

  /**
   Decodes the \c NSDictionary object for the given \c key, which should be an \c NSDictionary, with keys of the types given in \c keyClasses and objects of the given non-collection classes in \c objectClasses (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the given coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  func __decodeDictionary(withKeysOfClasses keyClasses: Set<AnyHashable>, objectsOfClasses objectClasses: Set<AnyHashable>, forKey key: String) -> [AnyHashable : Any]?

  /**
   Decodes the \c NSDictionary object for the given \c key, which should be an \c NSDictionary, with keys of the types given in \c keyClasses and objects of the given non-collection classes in \c objectClasses (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the given coder.
  
   Requires \c NSSecureCoding otherwise an exception is thrown and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the object for \c key is not of the expected types, or cannot be decoded, and sets the \c error on the decoder.
   */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__decodeDictionary(withKeysOfClasses:objectsOfClasses:forKey:)")
  func __decodeDictionaryWithKeysOfClasses(_ keyClasses: Set<AnyHashable>, objectsOfClasses objectClasses: Set<AnyHashable>, forKey key: String) -> [AnyHashable : Any]?
  @available(iOS 6.0, *)
  func decodePropertyList(forKey key: String) -> Any?
  @available(iOS 6.0, *)
  @available(swift, obsoleted: 3, renamed: "decodePropertyList(forKey:)")
  func decodePropertyListForKey(_ key: String) -> Any?
  @available(iOS 6.0, *)
  var allowedClasses: Set<AnyHashable>? { get }

  /**
   @abstract Signals to this coder that the decode has failed.
   @parameter non-nil error that describes the reason why the decode failed
   @discussion
   Sets an error on this NSCoder once per TopLevel decode; calling it repeatedly will have no effect until the call stack unwinds to one of the TopLevel decode entry-points.
  
   This method is only meaningful to call for decodes.
  
   Typically, you would want to call this method in your -initWithCoder: implementation when you detect situations like:
   - lack of secure coding
   - corruption of your data
   - domain validation failures
  
   After calling -failWithError: within your -initWithCoder: implementation, you should clean up and return nil as early as possible.
  
   Once an error has been signaled to a decoder, it remains set until it has handed off to the first TopLevel decode invocation above it.  For example, consider the following call graph:
   A    -decodeTopLevelObjectForKey:error:
   B        -initWithCoder:
   C            -decodeObjectForKey:
   D                -initWithCoder:
   E                    -decodeObjectForKey:
   F                        -failWithError:
  
   In this case the error provided in stack-frame F will be returned via the outError in stack-frame A. Furthermore the result object from decodeTopLevelObjectForKey:error: will be nil, regardless of the result of stack-frame B.
  
   NSCoder implementations support two mechanisms for the stack-unwinding from F to A:
   - forced (NSException based)
   - particpatory (error based)
  
   The kind of unwinding you get is determined by the decodingFailurePolicy property of this NSCoder (which defaults to NSDecodingFailurePolicyRaiseException to match historical behavior).
   */
  @available(iOS 9.0, *)
  func failWithError(_ error: Error)

  /**
   @abstract Defines the behavior this NSCoder should take on decode failure (i.e. corrupt archive, invalid data, etc.).
   @discussion
   The default result of this property is NSDecodingFailurePolicyRaiseException, subclasses can change this to an alternative policy.
   */
  @available(iOS 9.0, *)
  var decodingFailurePolicy: NSCoder.DecodingFailurePolicy { get }

  /**
   @abstract The current error (if there is one) for the current TopLevel decode.
   @discussion
   The meaning of this property changes based on the result of the decodingFailurePolicy property:
   For NSDecodingFailurePolicyRaiseException, this property will always be nil.
   For NSDecodingFailurePolicySetErrorAndReturn, this property can be non-nil, and if so, indicates that there was a failure while decoding the archive (specifically its the very first error encountered).
  
   While .error is non-nil, all attempts to decode data from this coder will return a nil/zero-equivalent value.
  
   This error is consumed by a TopLevel decode API (which resets this coder back to a being able to potentially decode data).
   */
  @available(iOS 9.0, *)
  var error: Error? { get }
}
extension NSCoder {
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func decodeValue(ofObjCType type: UnsafePointer<CChar>, at data: UnsafeMutableRawPointer)
  @available(swift, obsoleted: 3, renamed: "decodeValue(ofObjCType:at:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func decodeValueOfObjCType(_ type: UnsafePointer<CChar>, at data: UnsafeMutableRawPointer)
}
