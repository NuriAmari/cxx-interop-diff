@_exported import CoreFoundation

class FileHandle : NSObject, NSSecureCoding {
  var availableData: Data { get }
  init(fileDescriptor fd: Int32, closeOnDealloc closeopt: Bool)
  init?(coder: NSCoder)
  @available(iOS 13.0, *)
  func __readDataToEndOfFileAndReturnError() throws -> Data
  @available(iOS 13.0, *)
  func __readDataUp(toLength length: Int) throws -> Data
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "__readDataUp(toLength:)")
  func __readDataUpToLength(_ length: Int) throws -> Data
  @available(iOS 13.0, *)
  func __write(_ data: Data, error: ()) throws
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "__write(_:error:)")
  func __writeData(_ data: Data, error: ()) throws
  @available(iOS 13.0, *)
  func __getOffset(_ offsetInFile: UnsafeMutablePointer<UInt64>) throws
  @available(iOS 13.0, *)
  func __seek(toEndReturningOffset offsetInFile: UnsafeMutablePointer<UInt64>?) throws
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "__seek(toEndReturningOffset:)")
  func __seekToEndReturningOffset(_ offsetInFile: UnsafeMutablePointer<UInt64>?) throws
  @available(iOS 13.0, *)
  func seek(toOffset offset: UInt64) throws
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "seek(toOffset:)")
  func seekToOffset(_ offset: UInt64) throws
  @available(iOS 13.0, *)
  func truncate(atOffset offset: UInt64) throws
  @available(iOS 13.0, *)
  @available(swift, obsoleted: 3, renamed: "truncate(atOffset:)")
  func truncateAtOffset(_ offset: UInt64) throws
  @available(iOS 13.0, *)
  func synchronize() throws
  @available(iOS 13.0, *)
  func close() throws
  convenience init!()
  class var supportsSecureCoding: Bool { get }
  func encode(with coder: NSCoder)
}

extension FileHandle {
  @available(macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4, *)
  func readToEnd() throws -> Data?
  @available(macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4, *)
  func read(upToCount count: Int) throws -> Data?
  @available(macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4, *)
  func offset() throws -> UInt64
  @available(macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4, *)
  @discardableResult
  func seekToEnd() throws -> UInt64
  @available(macOS 10.15.4, iOS 13.4, watchOS 6.2, tvOS 13.4, *)
  func write<T>(contentsOf data: T) throws where T : DataProtocol
}

extension FileHandle {
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  struct AsyncBytes : AsyncSequence {
    typealias Element = UInt8
    typealias AsyncIterator = FileHandle.AsyncBytes.Iterator
    func makeAsyncIterator() -> FileHandle.AsyncBytes.Iterator
    @frozen struct Iterator : AsyncIteratorProtocol {
      typealias Element = UInt8
      @usableFromInline
      var buffer: _AsyncBytesBuffer
      @inlinable @inline(__always) mutating func next() async throws -> UInt8?
    }
  }
  @available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, *)
  var bytes: FileHandle.AsyncBytes { get }
}
@available(swift, obsoleted: 3, renamed: "FileHandle")
typealias NSFileHandle = FileHandle
extension FileHandle {
  class var withStandardInput: FileHandle { get }
  @available(swift, obsoleted: 3, renamed: "withStandardInput")
  class var fileHandleWithStandardInput: FileHandle { get }
  class var withStandardOutput: FileHandle { get }
  @available(swift, obsoleted: 3, renamed: "withStandardOutput")
  class var fileHandleWithStandardOutput: FileHandle { get }
  class var withStandardError: FileHandle { get }
  @available(swift, obsoleted: 3, renamed: "withStandardError")
  class var fileHandleWithStandardError: FileHandle { get }
  class var withNullDevice: FileHandle { get }
  @available(swift, obsoleted: 3, renamed: "withNullDevice")
  class var fileHandleWithNullDevice: FileHandle { get }
  convenience init?(forReadingAtPath path: String)
  @available(*, unavailable, renamed: "init(forReadingAtPath:)", message: "Not available in Swift")
  class func fileHandleForReadingAtPath(_ path: String) -> Self?
  convenience init?(forWritingAtPath path: String)
  @available(*, unavailable, renamed: "init(forWritingAtPath:)", message: "Not available in Swift")
  class func fileHandleForWritingAtPath(_ path: String) -> Self?
  convenience init?(forUpdatingAtPath path: String)
  @available(*, unavailable, renamed: "init(forUpdatingAtPath:)", message: "Not available in Swift")
  class func fileHandleForUpdatingAtPath(_ path: String) -> Self?
  @available(iOS 4.0, *)
  convenience init(forReadingFrom url: URL) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(forReadingFrom:)")
  convenience init(forReadingFromURL url: URL) throws
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(forReadingFrom:)", message: "Not available in Swift")
  class func fileHandleForReadingFromURL(_ url: URL) throws -> Self
  @available(iOS 4.0, *)
  convenience init(forWritingTo url: URL) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(forWritingTo:)")
  convenience init(forWritingToURL url: URL) throws
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(forWritingTo:)", message: "Not available in Swift")
  class func fileHandleForWritingToURL(_ url: URL) throws -> Self
  @available(iOS 4.0, *)
  convenience init(forUpdating url: URL) throws
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(forUpdating:)")
  convenience init(forUpdatingURL url: URL) throws
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(forUpdating:)", message: "Not available in Swift")
  class func fileHandleForUpdatingURL(_ url: URL) throws -> Self
}
@available(swift, obsoleted: 3, renamed: "NSExceptionName.fileHandleOperationException")
let NSFileHandleOperationException: NSExceptionName
extension NSExceptionName {
  static let fileHandleOperationException: NSExceptionName
}
@available(swift, obsoleted: 3, renamed: "FileHandle.readCompletionNotification")
let NSFileHandleReadCompletionNotification: NSNotification.Name
extension FileHandle {
  class let readCompletionNotification: NSNotification.Name
}
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSFileHandleReadToEndOfFileCompletion")
let NSFileHandleReadToEndOfFileCompletionNotification: NSNotification.Name
extension NSNotification.Name {
  static let NSFileHandleReadToEndOfFileCompletion: NSNotification.Name
  static let NSFileHandleConnectionAccepted: NSNotification.Name
  static let NSFileHandleDataAvailable: NSNotification.Name
}
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSFileHandleConnectionAccepted")
let NSFileHandleConnectionAcceptedNotification: NSNotification.Name
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSFileHandleDataAvailable")
let NSFileHandleDataAvailableNotification: NSNotification.Name
let NSFileHandleNotificationDataItem: String
let NSFileHandleNotificationFileHandleItem: String
@available(iOS, unavailable, introduced: 2.0, deprecated: 5.0, message: "Not supported")
let NSFileHandleNotificationMonitorModes: String
extension FileHandle {
  func readInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)
  @available(swift, obsoleted: 3, renamed: "readInBackgroundAndNotify(forModes:)")
  func readInBackgroundAndNotifyForModes(_ modes: [RunLoop.Mode]?)
  func readInBackgroundAndNotify()
  func readToEndOfFileInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)
  @available(swift, obsoleted: 3, renamed: "readToEndOfFileInBackgroundAndNotify(forModes:)")
  func readToEndOfFileInBackgroundAndNotifyForModes(_ modes: [RunLoop.Mode]?)
  func readToEndOfFileInBackgroundAndNotify()
  func acceptConnectionInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)
  @available(swift, obsoleted: 3, renamed: "acceptConnectionInBackgroundAndNotify(forModes:)")
  func acceptConnectionInBackgroundAndNotifyForModes(_ modes: [RunLoop.Mode]?)
  func acceptConnectionInBackgroundAndNotify()
  func waitForDataInBackgroundAndNotify(forModes modes: [RunLoop.Mode]?)
  @available(swift, obsoleted: 3, renamed: "waitForDataInBackgroundAndNotify(forModes:)")
  func waitForDataInBackgroundAndNotifyForModes(_ modes: [RunLoop.Mode]?)
  func waitForDataInBackgroundAndNotify()
  @available(iOS 5.0, *)
  var readabilityHandler: ((FileHandle) -> Void)?
  @available(iOS 5.0, *)
  var writeabilityHandler: ((FileHandle) -> Void)?
}
extension FileHandle {
  convenience init(fileDescriptor fd: Int32)
  var fileDescriptor: Int32 { get }
}
extension FileHandle {
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func readDataToEndOfFile() -> Data
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func readData(ofLength length: Int) -> Data
  @available(swift, obsoleted: 3, renamed: "readData(ofLength:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func readDataOfLength(_ length: Int) -> Data
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func write(_ data: Data)
  @available(swift, obsoleted: 3, renamed: "write(_:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func writeData(_ data: Data)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  var offsetInFile: UInt64 { get }
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func seekToEndOfFile() -> UInt64
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func seek(toFileOffset offset: UInt64)
  @available(swift, obsoleted: 3, renamed: "seek(toFileOffset:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func seekToFileOffset(_ offset: UInt64)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func truncateFile(atOffset offset: UInt64)
  @available(swift, obsoleted: 3, renamed: "truncateFile(atOffset:)")
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func truncateFileAtOffset(_ offset: UInt64)
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func synchronizeFile()
  @available(iOS, introduced: 2.0, deprecated: 100000)
  func closeFile()
}
@available(swift, obsoleted: 3, renamed: "Pipe")
typealias NSPipe = Pipe
class Pipe : NSObject {
  var fileHandleForReading: FileHandle { get }
  var fileHandleForWriting: FileHandle { get }
  @available(*, unavailable, message: "superseded by import of -[NSObject init]")
  /*not inherited*/ init()
  @available(*, unavailable, renamed: "init()", message: "Not available in Swift")
  class func pipe() -> Pipe
  init!()
}
