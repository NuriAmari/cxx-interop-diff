@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "NSNotification.Name")
typealias NSNotificationName = NSNotification.Name
extension NSNotification {
  struct Name : _ObjectiveCBridgeable, Hashable, Equatable, _SwiftNewtypeWrapper, RawRepresentable, @unchecked Sendable {
    init(_ rawValue: String)
    init(rawValue: String)
    var _rawValue: NSString
    var rawValue: String { get }
    typealias RawValue = String
    typealias _ObjectiveCType = NSString
  }
}

/****************	Notifications	****************/
class NSNotification : NSObject, NSCopying, NSCoding {
  var name: NSNotification.Name { get }
  var object: Any? { get }
  var userInfo: [AnyHashable : Any]? { get }
  @available(iOS 4.0, *)
  init(name: NSNotification.Name, object: Any?, userInfo: [AnyHashable : Any]? = nil)
  init?(coder: NSCoder)
  convenience init!()
  func copy(with zone: NSZone? = nil) -> Any
  func encode(with coder: NSCoder)
}

extension NSNotification : _HasCustomAnyHashableRepresentation {
  @nonobjc func _toCustomAnyHashable() -> AnyHashable?
}
extension NSNotification {
  convenience init(name aName: NSNotification.Name, object anObject: Any?)
  @available(*, unavailable, renamed: "init(name:object:)", message: "Not available in Swift")
  class func notificationWithName(_ aName: NSNotification.Name, object anObject: Any?) -> Self
  @available(*, unavailable, renamed: "init(name:object:userInfo:)", message: "Not available in Swift")
  class func notificationWithName(_ aName: NSNotification.Name, object anObject: Any?, userInfo aUserInfo: [AnyHashable : Any]? = nil) -> Self
}

/****************	Notification Center	****************/
@available(swift, obsoleted: 3, renamed: "NotificationCenter")
typealias NSNotificationCenter = NotificationCenter

/****************	Notification Center	****************/
class NotificationCenter : NSObject {
  class var `default`: NotificationCenter { get }
  @available(swift, obsoleted: 3, renamed: "default")
  class var defaultCenter: NotificationCenter { get }
  func addObserver(_ observer: Any, selector aSelector: Selector, name aName: NSNotification.Name?, object anObject: Any?)
  func post(_ notification: Notification)
  @available(swift, obsoleted: 3, renamed: "post(_:)")
  func postNotification(_ notification: Notification)
  func postNotificationName(_ aName: NSNotification.Name, object anObject: Any?)
  func postNotificationName(_ aName: NSNotification.Name, object anObject: Any?, userInfo aUserInfo: [AnyHashable : Any]? = nil)
  func removeObserver(_ observer: Any)
  func removeObserver(_ observer: Any, name aName: NSNotification.Name?, object anObject: Any?)
  @available(iOS 4.0, *)
  func addObserver(forName name: NSNotification.Name?, object obj: Any?, queue: OperationQueue?, using block: @escaping (Notification) -> Void) -> NSObjectProtocol
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "addObserver(forName:object:queue:using:)")
  func addObserverForName(_ name: NSNotification.Name?, object obj: Any?, queue: OperationQueue?, usingBlock block: @escaping (Notification) -> Void) -> NSObjectProtocol
  init!()
}

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension NotificationCenter {
  /// Returns a publisher that emits events when broadcasting notifications.
  ///
  /// - Parameters:
  ///   - name: The name of the notification to publish.
  ///   - object: The object posting the named notfication. If `nil`, the publisher emits elements for any object producing a notification with the given name.
  /// - Returns: A publisher that emits events when broadcasting notifications.
  func publisher(for name: Notification.Name, object: AnyObject? = nil) -> NotificationCenter.Publisher
}

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension NotificationCenter {
  /// A publisher that emits elements when broadcasting notifications.
  struct Publisher : Publisher {
    typealias Output = Notification
    typealias Failure = Never
    /// The notification center this publisher uses as a source.
    let center: NotificationCenter
    /// The name of notifications published by this publisher.
    let name: Notification.Name
    /// The object posting the named notfication.
    let object: AnyObject?
    /// Creates a publisher that emits events when broadcasting notifications.
    ///
    /// - Parameters:
    ///   - center: The notification center to publish notifications for.
    ///   - name: The name of the notification to publish.
    ///   - object: The object posting the named notfication. If `nil`, the publisher emits elements for any object producing a notification with the given name.
    init(center: NotificationCenter, name: Notification.Name, object: AnyObject? = nil)
    func receive<S>(subscriber: S) where S : Subscriber, S.Failure == Never, S.Input == Notification
  }
}

extension NotificationCenter {
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  func notifications(named name: Notification.Name, object: AnyObject? = nil) -> NotificationCenter.Notifications
  @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
  final class Notifications : AsyncSequence {
    typealias Element = Notification
    @available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
    struct Iterator : AsyncIteratorProtocol {
      func next() async -> Notification?
      typealias Element = Notification
    }
    final __consuming func makeAsyncIterator() -> NotificationCenter.Notifications.Iterator
    typealias AsyncIterator = NotificationCenter.Notifications.Iterator
  }
}

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension NotificationCenter.Publisher : Equatable {
  static func == (lhs: NotificationCenter.Publisher, rhs: NotificationCenter.Publisher) -> Bool
}
