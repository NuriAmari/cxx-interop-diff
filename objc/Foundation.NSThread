@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "Thread")
typealias NSThread = Thread
class Thread : NSObject {
  class var current: Thread { get }
  @available(swift, obsoleted: 3, renamed: "current")
  class var currentThread: Thread { get }
  @available(iOS 10.0, *)
  class func detachNewThread(_ block: @escaping () -> Void)
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "detachNewThread(_:)")
  class func detachNewThreadWithBlock(_ block: @escaping () -> Void)
  class func detachNewThreadSelector(_ selector: Selector, toTarget target: Any, with argument: Any?)
  @available(swift, obsoleted: 3, renamed: "detachNewThreadSelector(_:toTarget:with:)")
  class func detachNewThreadSelector(_ selector: Selector, toTarget target: Any, withObject argument: Any?)
  class func isMultiThreaded() -> Bool
  var threadDictionary: NSMutableDictionary { get }
  class func sleep(until date: Date)
  @available(swift, obsoleted: 3, renamed: "sleep(until:)")
  class func sleepUntilDate(_ date: Date)
  class func sleep(forTimeInterval ti: TimeInterval)
  @available(swift, obsoleted: 3, renamed: "sleep(forTimeInterval:)")
  class func sleepForTimeInterval(_ ti: TimeInterval)
  class func exit()
  class func threadPriority() -> Double
  class func setThreadPriority(_ p: Double) -> Bool
  @available(iOS 4.0, *)
  var threadPriority: Double
  @available(iOS 8.0, *)
  var qualityOfService: QualityOfService
  @available(iOS 2.0, *)
  class var callStackReturnAddresses: [NSNumber] { get }
  @available(iOS 4.0, *)
  class var callStackSymbols: [String] { get }
  @available(iOS 2.0, *)
  var name: String?
  @available(iOS 2.0, *)
  var stackSize: Int
  @available(iOS 2.0, *)
  var isMainThread: Bool { get }
  @available(iOS 2.0, *)
  class var isMainThread: Bool { get }
  @available(iOS 2.0, *)
  class var main: Thread { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "main")
  class var mainThread: Thread { get }
  @available(iOS 2.0, *)
  init()
  @available(iOS 2.0, *)
  convenience init(target: Any, selector: Selector, object argument: Any?)
  @available(iOS 10.0, *)
  convenience init(block: @escaping () -> Void)
  @available(iOS 2.0, *)
  var isExecuting: Bool { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "isExecuting")
  var executing: Bool { get }
  @available(iOS 2.0, *)
  var isFinished: Bool { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "isFinished")
  var finished: Bool { get }
  @available(iOS 2.0, *)
  var isCancelled: Bool { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "isCancelled")
  var cancelled: Bool { get }
  @available(iOS 2.0, *)
  func cancel()
  @available(iOS 2.0, *)
  func start()
  @available(iOS 2.0, *)
  func main()
}
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSWillBecomeMultiThreaded")
let NSWillBecomeMultiThreadedNotification: NSNotification.Name
extension NSNotification.Name {
  static let NSWillBecomeMultiThreaded: NSNotification.Name
  static let NSDidBecomeSingleThreaded: NSNotification.Name
  static let NSThreadWillExit: NSNotification.Name
}
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSDidBecomeSingleThreaded")
let NSDidBecomeSingleThreadedNotification: NSNotification.Name
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSThreadWillExit")
let NSThreadWillExitNotification: NSNotification.Name
extension NSObject {
  class func performSelector(onMainThread aSelector: Selector, with arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  func performSelector(onMainThread aSelector: Selector, with arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  @available(swift, obsoleted: 3, renamed: "performSelector(onMainThread:with:waitUntilDone:modes:)")
  class func performSelectorOnMainThread(_ aSelector: Selector, withObject arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  @available(swift, obsoleted: 3, renamed: "performSelector(onMainThread:with:waitUntilDone:modes:)")
  func performSelectorOnMainThread(_ aSelector: Selector, withObject arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  class func performSelector(onMainThread aSelector: Selector, with arg: Any?, waitUntilDone wait: Bool)
  func performSelector(onMainThread aSelector: Selector, with arg: Any?, waitUntilDone wait: Bool)
  @available(swift, obsoleted: 3, renamed: "performSelector(onMainThread:with:waitUntilDone:)")
  class func performSelectorOnMainThread(_ aSelector: Selector, withObject arg: Any?, waitUntilDone wait: Bool)
  @available(swift, obsoleted: 3, renamed: "performSelector(onMainThread:with:waitUntilDone:)")
  func performSelectorOnMainThread(_ aSelector: Selector, withObject arg: Any?, waitUntilDone wait: Bool)
  @available(iOS 2.0, *)
  class func perform(_ aSelector: Selector, on thr: Thread, with arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  @available(iOS 2.0, *)
  func perform(_ aSelector: Selector, on thr: Thread, with arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "perform(_:on:with:waitUntilDone:modes:)")
  class func performSelector(_ aSelector: Selector, onThread thr: Thread, withObject arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "perform(_:on:with:waitUntilDone:modes:)")
  func performSelector(_ aSelector: Selector, onThread thr: Thread, withObject arg: Any?, waitUntilDone wait: Bool, modes array: [String]?)
  @available(iOS 2.0, *)
  class func perform(_ aSelector: Selector, on thr: Thread, with arg: Any?, waitUntilDone wait: Bool)
  @available(iOS 2.0, *)
  func perform(_ aSelector: Selector, on thr: Thread, with arg: Any?, waitUntilDone wait: Bool)
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "perform(_:on:with:waitUntilDone:)")
  class func performSelector(_ aSelector: Selector, onThread thr: Thread, withObject arg: Any?, waitUntilDone wait: Bool)
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "perform(_:on:with:waitUntilDone:)")
  func performSelector(_ aSelector: Selector, onThread thr: Thread, withObject arg: Any?, waitUntilDone wait: Bool)
  @available(iOS 2.0, *)
  class func performSelector(inBackground aSelector: Selector, with arg: Any?)
  @available(iOS 2.0, *)
  func performSelector(inBackground aSelector: Selector, with arg: Any?)
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "performSelector(inBackground:with:)")
  class func performSelectorInBackground(_ aSelector: Selector, withObject arg: Any?)
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "performSelector(inBackground:with:)")
  func performSelectorInBackground(_ aSelector: Selector, withObject arg: Any?)
}
