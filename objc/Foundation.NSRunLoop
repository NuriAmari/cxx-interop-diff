@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "RunLoop.Mode.default")
let NSDefaultRunLoopMode: RunLoop.Mode
extension RunLoop.Mode {
  static let `default`: RunLoop.Mode
  @available(swift, obsoleted: 4.2, renamed: "RunLoop.Mode.default")
  static let defaultRunLoopMode: RunLoop.Mode
  @available(iOS 2.0, *)
  static let common: RunLoop.Mode
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 4.2, renamed: "RunLoop.Mode.common")
  static let commonModes: RunLoop.Mode
}
@available(iOS 2.0, *)
@available(swift, obsoleted: 3, renamed: "RunLoop.Mode.common")
let NSRunLoopCommonModes: RunLoop.Mode
@available(swift, obsoleted: 3, renamed: "RunLoop")
typealias NSRunLoop = RunLoop
class RunLoop : NSObject {
  class var current: RunLoop { get }
  @available(swift, obsoleted: 3, renamed: "current")
  class var currentRunLoop: RunLoop { get }
  @available(iOS 2.0, *)
  class var main: RunLoop { get }
  @available(iOS 2.0, *)
  @available(swift, obsoleted: 3, renamed: "main")
  class var mainRunLoop: RunLoop { get }
  var currentMode: RunLoop.Mode? { get }
  func getCFRunLoop() -> CFRunLoop
  func add(_ timer: Timer, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "add(_:forMode:)")
  func addTimer(_ timer: Timer, forMode mode: RunLoop.Mode)
  func add(_ aPort: Port, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "add(_:forMode:)")
  func addPort(_ aPort: Port, forMode mode: RunLoop.Mode)
  func remove(_ aPort: Port, forMode mode: RunLoop.Mode)
  @available(swift, obsoleted: 3, renamed: "remove(_:forMode:)")
  func removePort(_ aPort: Port, forMode mode: RunLoop.Mode)
  func limitDate(forMode mode: RunLoop.Mode) -> Date?
  @available(swift, obsoleted: 3, renamed: "limitDate(forMode:)")
  func limitDateForMode(_ mode: RunLoop.Mode) -> Date?
  func acceptInput(forMode mode: RunLoop.Mode, before limitDate: Date)
  @available(swift, obsoleted: 3, renamed: "acceptInput(forMode:before:)")
  func acceptInputForMode(_ mode: RunLoop.Mode, beforeDate limitDate: Date)
  init()
}

@available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
extension RunLoop : Scheduler {
  /// The scheduler time type used by the run loop.
  struct SchedulerTimeType : Strideable, Codable, Hashable {
    /// The date represented by this type.
    var date: Date
    /// Initializes a run loop scheduler time with the given date.
    ///
    /// - Parameter date: The date to represent.
    init(_ date: Date)
    /// Returns the distance to another run loop scheduler time.
    ///
    /// - Parameter other: Another dispatch queue time.
    /// - Returns: The time interval between this time and the provided time.
    func distance(to other: RunLoop.SchedulerTimeType) -> RunLoop.SchedulerTimeType.Stride
    /// Returns a run loop scheduler time calculated by advancing this instance’s time by the given interval.
    ///
    /// - Parameter n: A time interval to advance.
    /// - Returns: A dispatch queue time advanced by the given interval from this instance’s time.
    func advanced(by n: RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType
    /// The interval by which run loop times advance.
    struct Stride : ExpressibleByFloatLiteral, Comparable, SignedNumeric, Codable, SchedulerTimeIntervalConvertible {
      typealias FloatLiteralType = TimeInterval
      typealias IntegerLiteralType = TimeInterval
      typealias Magnitude = TimeInterval
      /// The value of this time interval in seconds.
      var magnitude: TimeInterval
      /// The value of this time interval in seconds.
      var timeInterval: TimeInterval { get }
      init(integerLiteral value: TimeInterval)
      init(floatLiteral value: TimeInterval)
      init(_ timeInterval: TimeInterval)
      init?<T>(exactly source: T) where T : BinaryInteger
      static func < (lhs: RunLoop.SchedulerTimeType.Stride, rhs: RunLoop.SchedulerTimeType.Stride) -> Bool
      static func * (lhs: RunLoop.SchedulerTimeType.Stride, rhs: RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride
      static func + (lhs: RunLoop.SchedulerTimeType.Stride, rhs: RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride
      static func - (lhs: RunLoop.SchedulerTimeType.Stride, rhs: RunLoop.SchedulerTimeType.Stride) -> RunLoop.SchedulerTimeType.Stride
      static func *= (lhs: inout RunLoop.SchedulerTimeType.Stride, rhs: RunLoop.SchedulerTimeType.Stride)
      static func += (lhs: inout RunLoop.SchedulerTimeType.Stride, rhs: RunLoop.SchedulerTimeType.Stride)
      static func -= (lhs: inout RunLoop.SchedulerTimeType.Stride, rhs: RunLoop.SchedulerTimeType.Stride)
      static func seconds(_ s: Int) -> RunLoop.SchedulerTimeType.Stride
      static func seconds(_ s: Double) -> RunLoop.SchedulerTimeType.Stride
      static func milliseconds(_ ms: Int) -> RunLoop.SchedulerTimeType.Stride
      static func microseconds(_ us: Int) -> RunLoop.SchedulerTimeType.Stride
      static func nanoseconds(_ ns: Int) -> RunLoop.SchedulerTimeType.Stride
      static func == (a: RunLoop.SchedulerTimeType.Stride, b: RunLoop.SchedulerTimeType.Stride) -> Bool
      func encode(to encoder: Encoder) throws
      init(from decoder: Decoder) throws
    }
    func hash(into hasher: inout Hasher)
    func encode(to encoder: Encoder) throws
    var hashValue: Int { get }
    init(from decoder: Decoder) throws
  }
  /// Options that affect the operation of the run loop scheduler.
  struct SchedulerOptions {
  }
  func schedule(options: RunLoop.SchedulerOptions?, _ action: @escaping () -> Void)
  func schedule(after date: RunLoop.SchedulerTimeType, tolerance: RunLoop.SchedulerTimeType.Stride, options: RunLoop.SchedulerOptions?, _ action: @escaping () -> Void)
  func schedule(after date: RunLoop.SchedulerTimeType, interval: RunLoop.SchedulerTimeType.Stride, tolerance: RunLoop.SchedulerTimeType.Stride, options: RunLoop.SchedulerOptions?, _ action: @escaping () -> Void) -> Cancellable
  var now: RunLoop.SchedulerTimeType { get }
  var minimumTolerance: RunLoop.SchedulerTimeType.Stride { get }
}
extension RunLoop {
  func run()
  func run(until limitDate: Date)
  @available(swift, obsoleted: 3, renamed: "run(until:)")
  func runUntilDate(_ limitDate: Date)
  func run(mode: RunLoop.Mode, before limitDate: Date) -> Bool
  @available(swift, obsoleted: 3, renamed: "run(mode:before:)")
  func runMode(_ mode: RunLoop.Mode, beforeDate limitDate: Date) -> Bool

  /// Schedules the execution of a block on the target run loop in given modes.
  /// - parameter: modes   An array of input modes for which the block may be executed.
  /// - parameter: block   The block to execute
  @available(iOS 10.0, *)
  func perform(inModes modes: [RunLoop.Mode], block: @escaping () -> Void)

  /// Schedules the execution of a block on the target run loop in given modes.
  /// - parameter: modes   An array of input modes for which the block may be executed.
  /// - parameter: block   The block to execute
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "perform(inModes:block:)")
  func performInModes(_ modes: [RunLoop.Mode], block: @escaping () -> Void)

  /// Schedules the execution of a block on the target run loop.
  /// - parameter: block   The block to execute
  @available(iOS 10.0, *)
  func perform(_ block: @escaping () -> Void)

  /// Schedules the execution of a block on the target run loop.
  /// - parameter: block   The block to execute
  @available(iOS 10.0, *)
  @available(swift, obsoleted: 3, renamed: "perform(_:)")
  func performBlock(_ block: @escaping () -> Void)
}

/**************** 	Delayed perform	 ******************/
extension NSObject {
  class func perform(_ aSelector: Selector, with anArgument: Any?, afterDelay delay: TimeInterval, inModes modes: [RunLoop.Mode])
  func perform(_ aSelector: Selector, with anArgument: Any?, afterDelay delay: TimeInterval, inModes modes: [RunLoop.Mode])
  @available(swift, obsoleted: 3, renamed: "perform(_:with:afterDelay:inModes:)")
  class func performSelector(_ aSelector: Selector, withObject anArgument: Any?, afterDelay delay: TimeInterval, inModes modes: [RunLoop.Mode])
  @available(swift, obsoleted: 3, renamed: "perform(_:with:afterDelay:inModes:)")
  func performSelector(_ aSelector: Selector, withObject anArgument: Any?, afterDelay delay: TimeInterval, inModes modes: [RunLoop.Mode])
  class func perform(_ aSelector: Selector, with anArgument: Any?, afterDelay delay: TimeInterval)
  func perform(_ aSelector: Selector, with anArgument: Any?, afterDelay delay: TimeInterval)
  @available(swift, obsoleted: 3, renamed: "perform(_:with:afterDelay:)")
  class func performSelector(_ aSelector: Selector, withObject anArgument: Any?, afterDelay delay: TimeInterval)
  @available(swift, obsoleted: 3, renamed: "perform(_:with:afterDelay:)")
  func performSelector(_ aSelector: Selector, withObject anArgument: Any?, afterDelay delay: TimeInterval)
  class func cancelPreviousPerformRequests(withTarget aTarget: Any, selector aSelector: Selector, object anArgument: Any?)
  @available(swift, obsoleted: 3, renamed: "cancelPreviousPerformRequests(withTarget:selector:object:)")
  class func cancelPreviousPerformRequestsWithTarget(_ aTarget: Any, selector aSelector: Selector, object anArgument: Any?)
  class func cancelPreviousPerformRequests(withTarget aTarget: Any)
  @available(swift, obsoleted: 3, renamed: "cancelPreviousPerformRequests(withTarget:)")
  class func cancelPreviousPerformRequestsWithTarget(_ aTarget: Any)
}
extension RunLoop {
  func perform(_ aSelector: Selector, target: Any, argument arg: Any?, order: Int, modes: [RunLoop.Mode])
  @available(swift, obsoleted: 3, renamed: "perform(_:target:argument:order:modes:)")
  func performSelector(_ aSelector: Selector, target: Any, argument arg: Any?, order: Int, modes: [RunLoop.Mode])
  func cancelPerform(_ aSelector: Selector, target: Any, argument arg: Any?)
  @available(swift, obsoleted: 3, renamed: "cancelPerform(_:target:argument:)")
  func cancelPerformSelector(_ aSelector: Selector, target: Any, argument arg: Any?)
  func cancelPerformSelectors(withTarget target: Any)
  @available(swift, obsoleted: 3, renamed: "cancelPerformSelectors(withTarget:)")
  func cancelPerformSelectorsWithTarget(_ target: Any)
}
