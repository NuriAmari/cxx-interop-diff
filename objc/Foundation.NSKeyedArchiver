@_exported import CoreFoundation

@available(swift, obsoleted: 3, renamed: "NSExceptionName.invalidArchiveOperationException")
let NSInvalidArchiveOperationException: NSExceptionName
extension NSExceptionName {
  static let invalidArchiveOperationException: NSExceptionName
  static let invalidUnarchiveOperationException: NSExceptionName
}
@available(swift, obsoleted: 3, renamed: "NSExceptionName.invalidUnarchiveOperationException")
let NSInvalidUnarchiveOperationException: NSExceptionName
@available(iOS 7.0, *)
let NSKeyedArchiveRootObjectKey: String
class NSKeyedArchiver : NSCoder {

  /**
   Initializes the receiver for encoding an archive, optionally disabling secure coding.
  
   If \c NSSecureCoding cannot be used, \c requiresSecureCoding may be turned off here; for improved security, however, \c requiresSecureCoding should be left enabled whenever possible. \c requiresSecureCoding ensures that all encoded objects conform to \c NSSecureCoding, preventing the possibility of encoding objects which cannot be decoded later.
  
   To produce archives whose structure matches those previously encoded using \c +archivedDataWithRootObject, encode the top-level object in your archive for the \c NSKeyedArchiveRootObjectKey.
   */
  @available(iOS 11.0, *)
  init(requiringSecureCoding requiresSecureCoding: Bool)

  /**
   Returns an \c NSData object containing the encoded form of the object graph whose root object is given, optionally disabling secure coding.
  
   If \c NSSecureCoding cannot be used, \c requiresSecureCoding may be turned off here; for improved security, however, \c requiresSecureCoding should be left enabled whenever possible. \c requiresSecureCoding ensures that all encoded objects conform to \c NSSecureCoding, preventing the possibility of encoding objects which cannot be decoded later.
  
   If the object graph cannot be encoded, returns \c nil and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  class func archivedData(withRootObject object: Any, requiringSecureCoding requiresSecureCoding: Bool) throws -> Data

  /**
   Returns an \c NSData object containing the encoded form of the object graph whose root object is given, optionally disabling secure coding.
  
   If \c NSSecureCoding cannot be used, \c requiresSecureCoding may be turned off here; for improved security, however, \c requiresSecureCoding should be left enabled whenever possible. \c requiresSecureCoding ensures that all encoded objects conform to \c NSSecureCoding, preventing the possibility of encoding objects which cannot be decoded later.
  
   If the object graph cannot be encoded, returns \c nil and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "archivedData(withRootObject:requiringSecureCoding:)")
  class func archivedDataWithRootObject(_ object: Any, requiringSecureCoding requiresSecureCoding: Bool) throws -> Data

  /// Initialize the archiver with empty data, ready for writing.
  @available(iOS, introduced: 10.0, deprecated: 12.0, message: "Use -initRequiringSecureCoding: instead")
  init()
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use -initRequiringSecureCoding: instead")
  init(forWritingWith data: NSMutableData)
  @available(swift, obsoleted: 3, renamed: "init(forWritingWith:)")
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use -initRequiringSecureCoding: instead")
  init(forWritingWithMutableData data: NSMutableData)
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")
  class func archivedData(withRootObject rootObject: Any) -> Data
  @available(swift, obsoleted: 3, renamed: "archivedData(withRootObject:)")
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: instead")
  class func archivedDataWithRootObject(_ rootObject: Any) -> Data
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +archivedDataWithRootObject:requiringSecureCoding:error: and -writeToURL:options:error: instead")
  class func archiveRootObject(_ rootObject: Any, toFile path: String) -> Bool
  unowned(unsafe) var delegate: @sil_unmanaged NSKeyedArchiverDelegate?
  var outputFormat: PropertyListSerialization.PropertyListFormat

  /// If encoding has not yet finished, then invoking this property will call finishEncoding and return the data. If you initialized the keyed archiver with a specific mutable data instance, then it will be returned from this property after finishEncoding is called.
  @available(iOS 10.0, *)
  var encodedData: Data { get }
  func finishEncoding()
  class func setClassName(_ codedName: String?, for cls: AnyClass)
  @available(swift, obsoleted: 3, renamed: "setClassName(_:for:)")
  class func setClassName(_ codedName: String?, forClass cls: AnyClass)
  func setClassName(_ codedName: String?, for cls: AnyClass)
  @available(swift, obsoleted: 3, renamed: "setClassName(_:for:)")
  func setClassName(_ codedName: String?, forClass cls: AnyClass)
  class func className(for cls: AnyClass) -> String?
  @available(swift, obsoleted: 3, renamed: "className(for:)")
  class func classNameForClass(_ cls: AnyClass) -> String?
  func className(for cls: AnyClass) -> String?
  @available(swift, obsoleted: 3, renamed: "className(for:)")
  func classNameForClass(_ cls: AnyClass) -> String?
  func encode(_ object: Any?, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeObject(_ object: Any?, forKey key: String)
  func encodeConditionalObject(_ object: Any?, forKey key: String)
  func encode(_ value: Bool, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeBool(_ value: Bool, forKey key: String)
  @available(*, unavailable, message: "Use 'encodeInt32(_:forKey:)' instead")
  func encodeCInt(_ value: Int32, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encodeCInt(_:forKey:)")
  @available(*, unavailable, message: "Use 'encodeInt32(_:forKey:)' instead")
  func encodeInt(_ value: Int32, forKey key: String)
  func encode(_ value: Int32, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeInt32(_ value: Int32, forKey key: String)
  func encode(_ value: Int64, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeInt64(_ value: Int64, forKey key: String)
  func encode(_ value: Float, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeFloat(_ value: Float, forKey key: String)
  func encode(_ value: Double, forKey key: String)
  @available(swift, obsoleted: 3, renamed: "encode(_:forKey:)")
  func encodeDouble(_ value: Double, forKey key: String)
  func encodeBytes(_ bytes: UnsafePointer<UInt8>?, length: Int, forKey key: String)
  @available(iOS 6.0, *)
  var requiresSecureCoding: Bool
}

extension NSKeyedArchiver {
  @available(macOS 10.11, iOS 9.0, *)
  @nonobjc func encodeEncodable<T>(_ value: T, forKey key: String) throws where T : Encodable
}
class NSKeyedUnarchiver : NSCoder {

  /**
   Initializes the receiver for decoding an archive previously encoded by \c NSKeyedUnarchiver.
  
   Enables \c requiresSecureCoding by default. If \c NSSecureCoding cannot be used, \c requiresSecureCoding may be turned off manually; for improved security, \c requiresSecureCoding should be left enabled whenever possible.
  
   Sets the unarchiver's \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid, and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  init(forReadingFrom data: Data) throws

  /**
   Initializes the receiver for decoding an archive previously encoded by \c NSKeyedUnarchiver.
  
   Enables \c requiresSecureCoding by default. If \c NSSecureCoding cannot be used, \c requiresSecureCoding may be turned off manually; for improved security, \c requiresSecureCoding should be left enabled whenever possible.
  
   Sets the unarchiver's \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid, and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "init(forReadingFrom:)")
  init(forReadingFromData data: Data) throws

  /**
   Decodes the root object of the given class from the given archive, previously encoded by \c NSKeyedArchiver.
  
   Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  class func __unarchivedObject(of cls: AnyClass, from data: Data) throws -> Any

  /**
   Decodes the root object of the given class from the given archive, previously encoded by \c NSKeyedArchiver.
  
   Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "__unarchivedObject(of:from:)")
  class func __unarchivedObjectOfClass(_ cls: AnyClass, fromData data: Data) throws -> Any

  /**
   Decodes the \c NSArray root object from \c data which should be an \c NSArray<cls> containing the given non-collection class (no nested arrays or arrays of dictionaries, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
   
   Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
   */
  @available(iOS 14.0, *)
  class func __unarchivedArrayOfObjects(of cls: AnyClass, from data: Data) throws -> [Any]

  /**
   Decodes the \c NSArray root object from \c data which should be an \c NSArray<cls> containing the given non-collection class (no nested arrays or arrays of dictionaries, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
   
   Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
   */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__unarchivedArrayOfObjects(of:from:)")
  class func __unarchivedArrayOfObjectsOfClass(_ cls: AnyClass, fromData data: Data) throws -> [Any]

  /**
  Decodes the \c NSDictionary root object from \c data which should be an \c NSDictionary<keyCls,objectCls>  with keys of type given in \c keyCls and objects of the given non-collection class \c objectCls (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
  
  Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
  Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
  */
  @available(iOS 14.0, *)
  class func __unarchivedDictionary(withKeysOf keyCls: AnyClass, objectsOf valueCls: AnyClass, from data: Data) throws -> [AnyHashable : Any]

  /**
  Decodes the \c NSDictionary root object from \c data which should be an \c NSDictionary<keyCls,objectCls>  with keys of type given in \c keyCls and objects of the given non-collection class \c objectCls (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
  
  Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
  Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
  */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__unarchivedDictionary(withKeysOf:objectsOf:from:)")
  class func __unarchivedDictionaryWithKeysOfClass(_ keyCls: AnyClass, objectsOfClass valueCls: AnyClass, fromData data: Data) throws -> [AnyHashable : Any]

  /**
   Decodes the root object of one of the given classes from the given archive, previously encoded by \c NSKeyedArchiver.
  
   Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  class func unarchivedObject(ofClasses classes: Set<AnyHashable>, from data: Data) throws -> Any

  /**
   Decodes the root object of one of the given classes from the given archive, previously encoded by \c NSKeyedArchiver.
  
   Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
   Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
   */
  @available(iOS 11.0, *)
  @available(swift, obsoleted: 3, renamed: "unarchivedObject(ofClasses:from:)")
  class func unarchivedObjectOfClasses(_ classes: Set<AnyHashable>, fromData data: Data) throws -> Any

  /**
  Decodes the \c NSArray root object from \c data which should be an \c NSArray, containing the given non-collection classes in \c classes  (no nested arrays or arrays of dictionaries, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
  
  Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
  Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
  */
  @available(iOS 14.0, *)
  class func __unarchivedArrayOfObjects(ofClasses classes: Set<AnyHashable>, from data: Data) throws -> [Any]

  /**
  Decodes the \c NSArray root object from \c data which should be an \c NSArray, containing the given non-collection classes in \c classes  (no nested arrays or arrays of dictionaries, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
  
  Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
  Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
  */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__unarchivedArrayOfObjects(ofClasses:from:)")
  class func __unarchivedArrayOfObjectsOfClasses(_ classes: Set<AnyHashable>, fromData data: Data) throws -> [Any]

  /**
  Decodes the \c NSDictionary root object from \c data which should be an \c NSDictionary, with keys of the types given in \c keyClasses and objects of the given non-collection classes in \c objectClasses (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
  
  Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
  Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
  */
  @available(iOS 14.0, *)
  class func __unarchivedDictionary(withKeysOfClasses keyClasses: Set<AnyHashable>, objectsOfClasses valueClasses: Set<AnyHashable>, from data: Data) throws -> [AnyHashable : Any]

  /**
  Decodes the \c NSDictionary root object from \c data which should be an \c NSDictionary, with keys of the types given in \c keyClasses and objects of the given non-collection classes in \c objectClasses (no nested dictionaries or other dictionaries contained in the dictionary, etc) from the given archive, previously encoded by \c NSKeyedArchiver.
  
  Enables \c requiresSecureCoding and sets the \c decodingFailurePolicy to \c NSDecodingFailurePolicySetErrorAndReturn.
  
  Returns \c nil if the given data is not valid or cannot be decoded, and sets the \c error out parameter.
  */
  @available(iOS 14.0, *)
  @available(swift, obsoleted: 3, renamed: "__unarchivedDictionary(withKeysOfClasses:objectsOfClasses:from:)")
  class func __unarchivedDictionaryWithKeysOfClasses(_ keyClasses: Set<AnyHashable>, objectsOfClasses valueClasses: Set<AnyHashable>, fromData data: Data) throws -> [AnyHashable : Any]
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use -initForReadingFromData:error: instead")
  init()
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use -initForReadingFromData:error: instead")
  init(forReadingWith data: Data)
  @available(swift, obsoleted: 3, renamed: "init(forReadingWith:)")
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use -initForReadingFromData:error: instead")
  init(forReadingWithData data: Data)
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")
  class func unarchiveObject(with data: Data) -> Any?
  @available(swift, obsoleted: 3, renamed: "unarchiveObject(with:)")
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")
  class func unarchiveObjectWithData(_ data: Data) -> Any?
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")
  @available(*, unavailable, message: "Use 'unarchiveTopLevelObjectWithData(_:) throws' instead")
  class func unarchiveTopLevelObject(with data: Data) throws -> Any
  @available(swift, obsoleted: 3, renamed: "unarchiveTopLevelObject(with:)")
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")
  @available(*, unavailable, message: "Use 'unarchiveTopLevelObjectWithData(_:) throws' instead")
  class func unarchiveTopLevelObjectWithData(_ data: Data) throws -> Any
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")
  class func unarchiveObject(withFile path: String) -> Any?
  @available(swift, obsoleted: 3, renamed: "unarchiveObject(withFile:)")
  @available(iOS, introduced: 2.0, deprecated: 12.0, message: "Use +unarchivedObjectOfClass:fromData:error: instead")
  class func unarchiveObjectWithFile(_ path: String) -> Any?
  unowned(unsafe) var delegate: @sil_unmanaged NSKeyedUnarchiverDelegate?
  func finishDecoding()
  class func setClass(_ cls: AnyClass?, forClassName codedName: String)
  func setClass(_ cls: AnyClass?, forClassName codedName: String)
  class func `class`(forClassName codedName: String) -> AnyClass?
  @available(swift, obsoleted: 3, renamed: "class(forClassName:)")
  class func classForClassName(_ codedName: String) -> AnyClass?
  func `class`(forClassName codedName: String) -> AnyClass?
  @available(swift, obsoleted: 3, renamed: "class(forClassName:)")
  func classForClassName(_ codedName: String) -> AnyClass?
  func containsValue(forKey key: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "containsValue(forKey:)")
  func containsValueForKey(_ key: String) -> Bool
  func decodeObject(forKey key: String) -> Any?
  @available(swift, obsoleted: 3, renamed: "decodeObject(forKey:)")
  func decodeObjectForKey(_ key: String) -> Any?
  func decodeBool(forKey key: String) -> Bool
  @available(swift, obsoleted: 3, renamed: "decodeBool(forKey:)")
  func decodeBoolForKey(_ key: String) -> Bool
  @available(*, unavailable, message: "Use 'decodeInt32(forKey:)' instead")
  func decodeCInt(forKey key: String) -> Int32
  @available(swift, obsoleted: 3, renamed: "decodeCInt(forKey:)")
  @available(*, unavailable, message: "Use 'decodeInt32(forKey:)' instead")
  func decodeIntForKey(_ key: String) -> Int32
  func decodeInt32(forKey key: String) -> Int32
  @available(swift, obsoleted: 3, renamed: "decodeInt32(forKey:)")
  func decodeInt32ForKey(_ key: String) -> Int32
  func decodeInt64(forKey key: String) -> Int64
  @available(swift, obsoleted: 3, renamed: "decodeInt64(forKey:)")
  func decodeInt64ForKey(_ key: String) -> Int64
  func decodeFloat(forKey key: String) -> Float
  @available(swift, obsoleted: 3, renamed: "decodeFloat(forKey:)")
  func decodeFloatForKey(_ key: String) -> Float
  func decodeDouble(forKey key: String) -> Double
  @available(swift, obsoleted: 3, renamed: "decodeDouble(forKey:)")
  func decodeDoubleForKey(_ key: String) -> Double
  func decodeBytes(forKey key: String, returnedLength lengthp: UnsafeMutablePointer<Int>?) -> UnsafePointer<UInt8>?
  @available(swift, obsoleted: 3, renamed: "decodeBytes(forKey:returnedLength:)")
  func decodeBytesForKey(_ key: String, returnedLength lengthp: UnsafeMutablePointer<Int>?) -> UnsafePointer<UInt8>?
  @available(iOS 6.0, *)
  var requiresSecureCoding: Bool
  @available(iOS 9.0, *)
  var decodingFailurePolicy: NSCoder.DecodingFailurePolicy
}

extension NSKeyedUnarchiver {
  @available(macOS 10.11, iOS 9.0, *)
  @available(swift, obsoleted: 4)
  @available(macOS, introduced: 10.11, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @available(iOS, introduced: 9.0, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @available(tvOS, introduced: 9.0, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @available(watchOS, introduced: 2.0, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @nonobjc class func unarchiveTopLevelObjectWithData(_ data: NSData) throws -> AnyObject?
  @available(swift 4)
  @available(macOS 10.11, iOS 9.0, *)
  @available(macOS, introduced: 10.11, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @available(iOS, introduced: 9.0, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @available(tvOS, introduced: 9.0, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @available(watchOS, introduced: 2.0, deprecated: 100000.0, message: "Use unarchivedObject(ofClass:from:) instead")
  @nonobjc class func unarchiveTopLevelObjectWithData(_ data: Data) throws -> Any?
  @available(macOS 10.13, iOS 11.0, watchOS 4.0, tvOS 11.0, *)
  @nonobjc static func unarchivedObject<DecodedObjectType>(ofClass cls: DecodedObjectType.Type, from data: Data) throws -> DecodedObjectType? where DecodedObjectType : NSObject, DecodedObjectType : NSCoding
  @available(macOS 10.13, iOS 11.0, watchOS 4.0, tvOS 11.0, *)
  @nonobjc static func unarchivedObject(ofClasses classes: [AnyClass], from data: Data) throws -> Any?
  @available(macOS 10.11, iOS 9.0, *)
  @nonobjc func decodeDecodable<T>(_ type: T.Type, forKey key: String) -> T? where T : Decodable
  @available(macOS 10.11, iOS 9.0, *)
  @nonobjc func decodeTopLevelDecodable<T>(_ type: T.Type, forKey key: String) throws -> T? where T : Decodable
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc static func unarchivedArrayOfObjects<DecodedObject>(ofClass cls: DecodedObject.Type, from data: Data) throws -> [DecodedObject]? where DecodedObject : NSObject, DecodedObject : NSSecureCoding
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc static func unarchivedArrayOfObjects(ofClasses classes: [AnyClass], from data: Data) throws -> [Any]?
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc static func unarchivedDictionary<DecodedKey, DecodedObject>(ofKeyClass keyClass: DecodedKey.Type, objectClass: DecodedObject.Type, from data: Data) throws -> [DecodedKey : DecodedObject]? where DecodedKey : NSObject, DecodedKey : NSCopying, DecodedKey : NSSecureCoding, DecodedObject : NSObject, DecodedObject : NSSecureCoding
  @available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
  @nonobjc static func unarchivedDictionary(keysOfClasses keyClasses: [AnyClass], objectsOfClasses objectClasses: [AnyClass], from data: Data) throws -> [AnyHashable : Any]?
}
protocol NSKeyedArchiverDelegate : NSObjectProtocol {
  optional func archiver(_ archiver: NSKeyedArchiver, willEncode object: Any) -> Any?
  @available(swift, obsoleted: 3, renamed: "archiver(_:willEncode:)")
  optional func archiver(_ archiver: NSKeyedArchiver, willEncodeObject object: Any) -> Any?
  optional func archiver(_ archiver: NSKeyedArchiver, didEncode object: Any?)
  @available(swift, obsoleted: 3, renamed: "archiver(_:didEncode:)")
  optional func archiver(_ archiver: NSKeyedArchiver, didEncodeObject object: Any?)
  optional func archiver(_ archiver: NSKeyedArchiver, willReplace object: Any?, with newObject: Any?)
  @available(swift, obsoleted: 3, renamed: "archiver(_:willReplace:with:)")
  optional func archiver(_ archiver: NSKeyedArchiver, willReplaceObject object: Any?, withObject newObject: Any?)
  optional func archiverWillFinish(_ archiver: NSKeyedArchiver)
  optional func archiverDidFinish(_ archiver: NSKeyedArchiver)
}
protocol NSKeyedUnarchiverDelegate : NSObjectProtocol {
  optional func unarchiver(_ unarchiver: NSKeyedUnarchiver, cannotDecodeObjectOfClassName name: String, originalClasses classNames: [String]) -> AnyClass?
  optional func unarchiver(_ unarchiver: NSKeyedUnarchiver, didDecode object: Any?) -> Any?
  @available(swift, obsoleted: 3, renamed: "unarchiver(_:didDecode:)")
  optional func unarchiver(_ unarchiver: NSKeyedUnarchiver, didDecodeObject object: Any?) -> Any?
  optional func unarchiver(_ unarchiver: NSKeyedUnarchiver, willReplace object: Any, with newObject: Any)
  @available(swift, obsoleted: 3, renamed: "unarchiver(_:willReplace:with:)")
  optional func unarchiver(_ unarchiver: NSKeyedUnarchiver, willReplaceObject object: Any, withObject newObject: Any)
  optional func unarchiverWillFinish(_ unarchiver: NSKeyedUnarchiver)
  optional func unarchiverDidFinish(_ unarchiver: NSKeyedUnarchiver)
}
extension NSObject {
  var classForKeyedArchiver: AnyClass? { get }
  class func replacementObject(for archiver: NSKeyedArchiver) -> Any?
  func replacementObject(for archiver: NSKeyedArchiver) -> Any?
  @available(swift, obsoleted: 3, renamed: "replacementObject(for:)")
  class func replacementObjectForKeyedArchiver(_ archiver: NSKeyedArchiver) -> Any?
  @available(swift, obsoleted: 3, renamed: "replacementObject(for:)")
  func replacementObjectForKeyedArchiver(_ archiver: NSKeyedArchiver) -> Any?
  class func classFallbacksForKeyedArchiver() -> [String]
  class func classForKeyedArchiver() -> AnyClass?
}
extension NSObject {
  class func classForKeyedUnarchiver() -> AnyClass
}
