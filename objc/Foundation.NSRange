@_exported import CoreFoundation

struct _NSRange {
  init()
  init(location: Int, length: Int)
  var location: Int
  var length: Int
}

extension _NSRange : Hashable {
  func hash(into hasher: inout Hasher)
  static func == (lhs: NSRange, rhs: NSRange) -> Bool
  var hashValue: Int { get }
}

extension _NSRange : CustomStringConvertible, CustomDebugStringConvertible {
  var description: String { get }
  var debugDescription: String { get }
}

extension _NSRange {
  init?(_ string: __shared String)
}

extension _NSRange {
  var lowerBound: Int { get }
  var upperBound: Int { get }
  func contains(_ index: Int) -> Bool
  mutating func formUnion(_ other: NSRange)
  func union(_ other: NSRange) -> NSRange
  func intersection(_ other: NSRange) -> NSRange?
}

extension _NSRange {
  init<R>(_ region: R) where R : RangeExpression, R.Bound : FixedWidthInteger
  init<R, S>(_ region: R, in target: S) where R : RangeExpression, S : StringProtocol, R.Bound == String.Index
  @available(swift, deprecated: 4, message: "Use Range.init(_:) instead")
  func toRange() -> Range<Int>?
}

extension _NSRange : CustomReflectable {
  var customMirror: Mirror { get }
}

extension _NSRange : _CustomPlaygroundQuickLookable {
  @available(*, deprecated, message: "NSRange.customPlaygroundQuickLook will be removed in a future Swift version")
  var customPlaygroundQuickLook: PlaygroundQuickLook { get }
}

extension _NSRange : Codable {
  init(from decoder: Decoder) throws
  func encode(to encoder: Encoder) throws
}

@available(macOS 12, iOS 15, tvOS 15, watchOS 8, *)
extension _NSRange {
  init<R, S>(_ region: R, in target: S) where R : RangeExpression, S : AttributedStringProtocol, R.Bound == AttributedString.Index
}

extension _NSRange : _ObjectiveCBridgeable {
  func _bridgeToObjectiveC() -> NSValue
  static func _forceBridgeFromObjectiveC(_ source: NSValue, result: inout NSRange?)
  static func _conditionallyBridgeFromObjectiveC(_ source: NSValue, result: inout NSRange?) -> Bool
  static func _unconditionallyBridgeFromObjectiveC(_ source: NSValue?) -> NSRange
  typealias _ObjectiveCType = NSValue
}
typealias NSRange = _NSRange
typealias NSRangePointer = UnsafeMutablePointer<NSRange>
func NSMakeRange(_ loc: Int, _ len: Int) -> NSRange
func NSMaxRange(_ range: NSRange) -> Int
func NSLocationInRange(_ loc: Int, _ range: NSRange) -> Bool
func NSEqualRanges(_ range1: NSRange, _ range2: NSRange) -> Bool
func NSUnionRange(_ range1: NSRange, _ range2: NSRange) -> NSRange
func NSIntersectionRange(_ range1: NSRange, _ range2: NSRange) -> NSRange
func NSStringFromRange(_ range: NSRange) -> String
func NSRangeFromString(_ aString: String) -> NSRange
extension NSValue {
  /*not inherited*/ init(range: NSRange)
  @available(*, unavailable, renamed: "init(range:)", message: "Not available in Swift")
  class func valueWithRange(_ range: NSRange) -> NSValue
  var rangeValue: NSRange { get }
}
