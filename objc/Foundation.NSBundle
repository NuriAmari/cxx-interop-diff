@_exported import CoreFoundation

class Bundle : NSObject {
  class var main: Bundle { get }
  @available(swift, obsoleted: 3, renamed: "main")
  class var mainBundle: Bundle { get }
  @available(*, unavailable, message: "superseded by import of -[NSBundle initWithPath:]")
  convenience init?(path: String)
  @available(*, unavailable, renamed: "init(path:)", message: "Not available in Swift")
  class func bundleWithPath(_ path: String) -> Self?
  init?(path: String)
  @available(iOS 4.0, *)
  @available(*, unavailable, message: "superseded by import of -[NSBundle initWithURL:]")
  convenience init?(url: URL)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(url:)")
  convenience init?(URL url: URL)
  @available(iOS 4.0, *)
  @available(*, unavailable, renamed: "init(url:)", message: "Not available in Swift")
  class func bundleWithURL(_ url: URL) -> Self?
  @available(iOS 4.0, *)
  convenience init?(url: URL)
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "init(url:)")
  convenience init?(URL url: URL)
  /*not inherited*/ init(for aClass: AnyClass)
  @available(swift, obsoleted: 3, renamed: "init(for:)")
  /*not inherited*/ init(forClass aClass: AnyClass)
  @available(*, unavailable, renamed: "init(for:)", message: "Not available in Swift")
  class func bundleForClass(_ aClass: AnyClass) -> Bundle
  /*not inherited*/ init?(identifier: String)
  @available(*, unavailable, renamed: "init(identifier:)", message: "Not available in Swift")
  class func bundleWithIdentifier(_ identifier: String) -> Bundle?
  class var allBundles: [Bundle] { get }
  class var allFrameworks: [Bundle] { get }
  func load() -> Bool
  var isLoaded: Bool { get }
  @available(swift, obsoleted: 3, renamed: "isLoaded")
  var loaded: Bool { get }
  func unload() -> Bool
  @available(iOS 2.0, *)
  func preflight() throws
  @available(iOS 2.0, *)
  func loadAndReturnError() throws
  @available(iOS 4.0, *)
  var bundleURL: URL { get }
  @available(iOS 4.0, *)
  var resourceURL: URL? { get }
  @available(iOS 4.0, *)
  var executableURL: URL? { get }
  @available(iOS 4.0, *)
  func url(forAuxiliaryExecutable executableName: String) -> URL?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "url(forAuxiliaryExecutable:)")
  func URLForAuxiliaryExecutable(_ executableName: String) -> URL?
  @available(iOS 4.0, *)
  var privateFrameworksURL: URL? { get }
  @available(iOS 4.0, *)
  var sharedFrameworksURL: URL? { get }
  @available(iOS 4.0, *)
  var sharedSupportURL: URL? { get }
  @available(iOS 4.0, *)
  var builtInPlugInsURL: URL? { get }
  @available(iOS 7.0, *)
  var appStoreReceiptURL: URL? { get }
  var bundlePath: String { get }
  var resourcePath: String? { get }
  var executablePath: String? { get }
  func path(forAuxiliaryExecutable executableName: String) -> String?
  @available(swift, obsoleted: 3, renamed: "path(forAuxiliaryExecutable:)")
  func pathForAuxiliaryExecutable(_ executableName: String) -> String?
  var privateFrameworksPath: String? { get }
  var sharedFrameworksPath: String? { get }
  var sharedSupportPath: String? { get }
  var builtInPlugInsPath: String? { get }
  @available(iOS 4.0, *)
  class func url(forResource name: String?, withExtension ext: String?, subdirectory subpath: String?, in bundleURL: URL) -> URL?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "url(forResource:withExtension:subdirectory:in:)")
  class func URLForResource(_ name: String?, withExtension ext: String?, subdirectory subpath: String?, inBundleWithURL bundleURL: URL) -> URL?
  @available(iOS 4.0, *)
  class func urls(forResourcesWithExtension ext: String?, subdirectory subpath: String?, in bundleURL: URL) -> [URL]?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "urls(forResourcesWithExtension:subdirectory:in:)")
  class func URLsForResourcesWithExtension(_ ext: String?, subdirectory subpath: String?, inBundleWithURL bundleURL: URL) -> [URL]?
  @available(iOS 4.0, *)
  func url(forResource name: String?, withExtension ext: String?) -> URL?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "url(forResource:withExtension:)")
  func URLForResource(_ name: String?, withExtension ext: String?) -> URL?
  @available(iOS 4.0, *)
  func url(forResource name: String?, withExtension ext: String?, subdirectory subpath: String?) -> URL?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "url(forResource:withExtension:subdirectory:)")
  func URLForResource(_ name: String?, withExtension ext: String?, subdirectory subpath: String?) -> URL?
  @available(iOS 4.0, *)
  func url(forResource name: String?, withExtension ext: String?, subdirectory subpath: String?, localization localizationName: String?) -> URL?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "url(forResource:withExtension:subdirectory:localization:)")
  func URLForResource(_ name: String?, withExtension ext: String?, subdirectory subpath: String?, localization localizationName: String?) -> URL?
  @available(iOS 4.0, *)
  func urls(forResourcesWithExtension ext: String?, subdirectory subpath: String?) -> [URL]?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "urls(forResourcesWithExtension:subdirectory:)")
  func URLsForResourcesWithExtension(_ ext: String?, subdirectory subpath: String?) -> [URL]?
  @available(iOS 4.0, *)
  func urls(forResourcesWithExtension ext: String?, subdirectory subpath: String?, localization localizationName: String?) -> [URL]?
  @available(iOS 4.0, *)
  @available(swift, obsoleted: 3, renamed: "urls(forResourcesWithExtension:subdirectory:localization:)")
  func URLsForResourcesWithExtension(_ ext: String?, subdirectory subpath: String?, localization localizationName: String?) -> [URL]?
  class func path(forResource name: String?, ofType ext: String?, inDirectory bundlePath: String) -> String?
  @available(swift, obsoleted: 3, renamed: "path(forResource:ofType:inDirectory:)")
  class func pathForResource(_ name: String?, ofType ext: String?, inDirectory bundlePath: String) -> String?
  class func paths(forResourcesOfType ext: String?, inDirectory bundlePath: String) -> [String]
  @available(swift, obsoleted: 3, renamed: "paths(forResourcesOfType:inDirectory:)")
  class func pathsForResourcesOfType(_ ext: String?, inDirectory bundlePath: String) -> [String]
  func path(forResource name: String?, ofType ext: String?) -> String?
  @available(swift, obsoleted: 3, renamed: "path(forResource:ofType:)")
  func pathForResource(_ name: String?, ofType ext: String?) -> String?
  func path(forResource name: String?, ofType ext: String?, inDirectory subpath: String?) -> String?
  @available(swift, obsoleted: 3, renamed: "path(forResource:ofType:inDirectory:)")
  func pathForResource(_ name: String?, ofType ext: String?, inDirectory subpath: String?) -> String?
  func path(forResource name: String?, ofType ext: String?, inDirectory subpath: String?, forLocalization localizationName: String?) -> String?
  @available(swift, obsoleted: 3, renamed: "path(forResource:ofType:inDirectory:forLocalization:)")
  func pathForResource(_ name: String?, ofType ext: String?, inDirectory subpath: String?, forLocalization localizationName: String?) -> String?
  func paths(forResourcesOfType ext: String?, inDirectory subpath: String?) -> [String]
  @available(swift, obsoleted: 3, renamed: "paths(forResourcesOfType:inDirectory:)")
  func pathsForResourcesOfType(_ ext: String?, inDirectory subpath: String?) -> [String]
  func paths(forResourcesOfType ext: String?, inDirectory subpath: String?, forLocalization localizationName: String?) -> [String]
  @available(swift, obsoleted: 3, renamed: "paths(forResourcesOfType:inDirectory:forLocalization:)")
  func pathsForResourcesOfType(_ ext: String?, inDirectory subpath: String?, forLocalization localizationName: String?) -> [String]
  func localizedString(forKey key: String, value: String?, table tableName: String?) -> String
  @available(swift, obsoleted: 3, renamed: "localizedString(forKey:value:table:)")
  func localizedStringForKey(_ key: String, value: String?, table tableName: String?) -> String
  @available(iOS 15.0, *)
  func __localizedAttributedString(forKey key: String, value: String?, table tableName: String?) -> NSAttributedString
  @available(iOS 15.0, *)
  @available(swift, obsoleted: 3, renamed: "__localizedAttributedString(forKey:value:table:)")
  func __localizedAttributedStringForKey(_ key: String, value: String?, table tableName: String?) -> NSAttributedString
  var bundleIdentifier: String? { get }
  var infoDictionary: [String : Any]? { get }
  var localizedInfoDictionary: [String : Any]? { get }
  func object(forInfoDictionaryKey key: String) -> Any?
  @available(swift, obsoleted: 3, renamed: "object(forInfoDictionaryKey:)")
  func objectForInfoDictionaryKey(_ key: String) -> Any?
  func classNamed(_ className: String) -> AnyClass?
  var principalClass: AnyClass? { get }
  var preferredLocalizations: [String] { get }
  var localizations: [String] { get }
  var developmentLocalization: String? { get }
  class func preferredLocalizations(from localizationsArray: [String]) -> [String]
  @available(swift, obsoleted: 3, renamed: "preferredLocalizations(from:)")
  class func preferredLocalizationsFromArray(_ localizationsArray: [String]) -> [String]
  class func preferredLocalizations(from localizationsArray: [String], forPreferences preferencesArray: [String]?) -> [String]
  @available(swift, obsoleted: 3, renamed: "preferredLocalizations(from:forPreferences:)")
  class func preferredLocalizationsFromArray(_ localizationsArray: [String], forPreferences preferencesArray: [String]?) -> [String]
  @available(iOS 2.0, *)
  var executableArchitectures: [NSNumber]? { get }
  convenience init()
}
@available(swift, obsoleted: 3, renamed: "Bundle")
typealias NSBundle = Bundle
var NSBundleExecutableArchitectureI386: Int { get }
var NSBundleExecutableArchitecturePPC: Int { get }
var NSBundleExecutableArchitectureX86_64: Int { get }
var NSBundleExecutableArchitecturePPC64: Int { get }
@available(iOS 14.0, *)
var NSBundleExecutableArchitectureARM64: Int { get }
extension NSString {
  @available(iOS 9.0, *)
  func variantFittingPresentationWidth(_ width: Int) -> String
}
@available(swift, obsoleted: 3, renamed: "Bundle.didLoadNotification")
let NSBundleDidLoadNotification: NSNotification.Name
extension Bundle {
  class let didLoadNotification: NSNotification.Name
}
let NSLoadedClasses: String
@available(iOS 9.0, *)
class NSBundleResourceRequest : NSObject, ProgressReporting {
  @available(iOS, unavailable)
  convenience init()
  convenience init(tags: Set<String>)
  init(tags: Set<String>, bundle: Bundle)
  var loadingPriority: Double
  var tags: Set<String> { get }
  var bundle: Bundle { get }
  func beginAccessingResources(completionHandler: @escaping @Sendable (Error?) -> Void)
  func beginAccessingResources() async throws
  @available(swift, obsoleted: 3, renamed: "beginAccessingResources(completionHandler:)")
  func beginAccessingResourcesWithCompletionHandler(_ completionHandler: @escaping @Sendable (Error?) -> Void)
  func conditionallyBeginAccessingResources(completionHandler: @escaping @Sendable (Bool) -> Void)
  func conditionallyBeginAccessingResources() async -> Bool
  @available(swift, obsoleted: 3, renamed: "conditionallyBeginAccessingResources(completionHandler:)")
  func conditionallyBeginAccessingResourcesWithCompletionHandler(_ completionHandler: @escaping @Sendable (Bool) -> Void)
  func endAccessingResources()
  var progress: Progress { get }
}
extension Bundle {
  @available(iOS 9.0, *)
  func setPreservationPriority(_ priority: Double, forTags tags: Set<String>)
  @available(iOS 9.0, *)
  func preservationPriority(forTag tag: String) -> Double
  @available(iOS 9.0, *)
  @available(swift, obsoleted: 3, renamed: "preservationPriority(forTag:)")
  func preservationPriorityForTag(_ tag: String) -> Double
}
@available(iOS 9.0, *)
@available(swift, obsoleted: 3, renamed: "NSNotification.Name.NSBundleResourceRequestLowDiskSpace")
let NSBundleResourceRequestLowDiskSpaceNotification: NSNotification.Name
extension NSNotification.Name {
  @available(iOS 9.0, *)
  static let NSBundleResourceRequestLowDiskSpace: NSNotification.Name
}
@available(iOS 9.0, *)
let NSBundleResourceRequestLoadingPriorityUrgent: Double
